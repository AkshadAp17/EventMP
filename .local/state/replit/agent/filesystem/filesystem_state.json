{"file_contents":{"AUTH0_COMPLETE_SETUP.md":{"content":"# Auth0 Complete Setup Guide for EventMaster\n\n## Step 1: Create Auth0 Account and Application\n\n1. **Sign up for Auth0**\n   - Go to https://auth0.com\n   - Click \"Sign Up\" and create a free account\n   - Choose your region (preferably closest to your users)\n\n2. **Create a New Application**\n   - In your Auth0 Dashboard, click \"Applications\" in the sidebar\n   - Click \"Create Application\"\n   - Name: `EventMaster`\n   - Type: Select \"Regular Web Applications\"\n   - Click \"Create\"\n\n## Step 2: Configure Application Settings\n\n1. **Basic Settings**\n   - Go to your application's \"Settings\" tab\n   - Note down these values (you'll need them later):\n     - **Domain** (e.g., `your-tenant.auth0.com`)\n     - **Client ID** (starts with letters and numbers)\n     - **Client Secret** (long string - keep this secure!)\n\n2. **Application URIs**\n   - **Allowed Callback URLs**: \n     ```\n     https://your-repl-name.your-username.repl.co/api/auth/callback,\n     http://localhost:5000/api/auth/callback\n     ```\n   - **Allowed Logout URLs**:\n     ```\n     https://your-repl-name.your-username.repl.co/,\n     http://localhost:5000/\n     ```\n   - **Allowed Web Origins**:\n     ```\n     https://your-repl-name.your-username.repl.co,\n     http://localhost:5000\n     ```\n   - Click \"Save Changes\"\n\n## Step 3: Set Up Environment Variables\n\nAdd these secrets to your Replit project:\n\n1. Click the \"Secrets\" tab in your Replit sidebar\n2. Add the following secrets:\n\n```\nAUTH0_DOMAIN=your-tenant.auth0.com\nAUTH0_CLIENT_ID=your_client_id_here\nAUTH0_CLIENT_SECRET=your_client_secret_here\nAUTH0_BASE_URL=https://your-repl-name.your-username.repl.co\n```\n\n**Replace the values with your actual Auth0 credentials from Step 2.**\n\n## Step 4: Configure User Management\n\n1. **Set up user roles (optional but recommended)**\n   - Go to \"User Management\" > \"Roles\"\n   - Create a role called \"admin\"\n   - You can assign this role to specific users later\n\n2. **User Profile Settings**\n   - Go to \"User Management\" > \"Users\"\n   - After users sign up, you can manually assign admin roles here\n\n## Step 5: Test the Setup\n\n1. After adding the environment variables, your app will restart automatically\n2. Try accessing the `/auth` page\n3. Click \"Sign In\" - you should be redirected to Auth0\n4. Create a test account or sign in\n5. You should be redirected back to your app\n\n## Troubleshooting\n\nIf you encounter issues:\n\n1. **Check your URLs** - Make sure callback URLs match exactly\n2. **Verify environment variables** - All four AUTH0_ variables must be set\n3. **Check the console** - Look for error messages in the workflow logs\n4. **Test locally first** - Use localhost URLs for initial testing\n\n## Security Notes\n\n- Never share your CLIENT_SECRET publicly\n- Use HTTPS in production (Replit handles this automatically)\n- Consider setting up custom domains for production apps\n\n## Next Steps\n\nOnce Auth0 is working:\n1. Set up user roles and permissions\n2. Customize the login/signup experience\n3. Add social login providers if needed\n4. Configure email templates","size_bytes":3018},"AUTH0_INTEGRATION_GUIDE.md":{"content":"# Auth0 Integration Guide for EventMaster\n\n## Current Status\n‚úÖ **Platform fully functional** with local authentication\n‚úÖ **Auth0 code integrated** and ready to activate\n‚úÖ **Express-OpenID-Connect** library installed\n‚úÖ **Technology event platform** complete with premium design\n\n## Your Auth0 Credentials (from the image you shared)\nFrom your Auth0 dashboard, I can see:\n\n- **Domain**: `dev-5eajbng8pxadccif.us.auth0.com`\n- **Client ID**: `iDVI5ASB3P4nshhLFTWZvdoGAEpEcC8N`\n- **Client Secret**: [Hidden in your dashboard - copy this]\n- **Base URL**: Use your Replit app URL (like `https://your-app.replit.app`)\n\n## How to Add Auth0 Credentials\n\n1. **Click the Secrets tab** in your Replit sidebar (üîê icon)\n\n2. **Add these four secrets**:\n   ```\n   AUTH0_DOMAIN = dev-5eajbng8pxadccif.us.auth0.com\n   AUTH0_CLIENT_ID = iDVI5ASB3P4nshhLFTWZvdoGAEpEcC8N\n   AUTH0_CLIENT_SECRET = [Copy from your Auth0 dashboard]\n   AUTH0_BASE_URL = https://your-replit-app-url.replit.app\n   ```\n\n3. **Restart the application** - it will automatically detect Auth0 and switch to Auth0 authentication\n\n## What Happens When You Add Auth0\n\n- **Professional Authentication**: Users can sign in with Google, GitHub, email, etc.\n- **Secure Sessions**: Auth0 handles all security and user management\n- **User Profiles**: Automatic user creation with Auth0 profile data\n- **Production Ready**: Suitable for real-world deployment\n\n## Current Platform Features (Working Now)\n\n‚úÖ **Technology Event Focus**: AI, Web Dev, Cloud, Mobile, Cybersecurity events\n‚úÖ **Premium Design**: Modern gradients, glass effects, animations\n‚úÖ **Event Management**: Full CRUD operations for events\n‚úÖ **Email-Based Payments**: Gmail integration for payment confirmations\n‚úÖ **Admin Dashboard**: Complete admin functionality\n‚úÖ **Sample Tech Events**: Ready-to-use technology events in database\n\nThe platform is fully functional right now with local authentication. Adding Auth0 will make it production-ready with professional authentication.\n\n## Next Steps\n1. Add the Auth0 secrets to activate professional authentication\n2. Test the Auth0 login flow\n3. Deploy to production when ready\n\nThe EventMaster technology event platform is complete and ready for use!","size_bytes":2226},"AUTH0_QUICK_SETUP.md":{"content":"# üöÄ Quick Auth0 Setup for EventMaster\n\n## What You Need\n1. Auth0 account (free at [auth0.com](https://auth0.com))\n2. Your Replit project URL\n\n## Step 1: Create Auth0 App\n1. Go to [auth0.com](https://auth0.com) and sign up/login\n2. Click **Applications** ‚Üí **+ Create Application**\n3. Name: `EventMaster`\n4. Type: **Single Page Application**\n5. Click **Create**\n\n## Step 2: Configure URLs\nIn your new app's **Settings** tab, add these URLs (replace `YOUR-REPLIT-URL` with your actual project URL):\n\n**Allowed Callback URLs:**\n```\nhttps://YOUR-REPLIT-URL.replit.app/api/auth/callback\n```\n\n**Allowed Logout URLs:**\n```\nhttps://YOUR-REPLIT-URL.replit.app/\n```\n\n**Allowed Web Origins:**\n```\nhttps://YOUR-REPLIT-URL.replit.app\n```\n\n**Allowed Origins (CORS):**\n```\nhttps://YOUR-REPLIT-URL.replit.app\n```\n\nClick **Save Changes**.\n\n## Step 3: Get Your Credentials\nCopy these from the **Settings** tab:\n- **Domain** (like: `dev-abc123.us.auth0.com`)\n- **Client ID** (long string)\n- **Client Secret** (click \"Show\" to reveal)\n\n## Step 4: Add to Replit Secrets\nIn your Replit project, go to **üîí Secrets** and add:\n\n| Key | Value |\n|-----|-------|\n| `AUTH0_DOMAIN` | Your Auth0 domain |\n| `AUTH0_CLIENT_ID` | Your Client ID |\n| `AUTH0_CLIENT_SECRET` | Your Client Secret |\n| `AUTH0_BASE_URL` | `https://YOUR-REPLIT-URL.replit.app` |\n| `SESSION_SECRET` | Generate with: `node -e \"console.log(require('crypto').randomBytes(64).toString('hex'))\"` |\n\n## Step 5: Test\n1. Restart your Replit app\n2. Go to `/auth` page\n3. Click **\"Continue with Auth0\"**\n4. Login/signup with Auth0\n5. You should be redirected back as logged in!\n\n## Quick Access\n- **Admin Login**: `admin@eventmaster.com` / `admin123`\n- **Auth Page**: `/auth`\n\n## Need Help?\n- Check **Monitoring** ‚Üí **Logs** in Auth0 for errors\n- Verify all URLs match exactly (no trailing slashes)\n- Make sure all 5 secrets are set in Replit\n\nThat's it! Your users can now login with Auth0 social providers like Google, Facebook, etc.","size_bytes":1975},"AUTH0_READY.md":{"content":"# Auth0 Integration Ready\n\n## Current Status\n‚úÖ Express.js backend configured for Auth0\n‚úÖ Authentication routes prepared\n‚úÖ Database schema ready for Auth0 users\n\n## Next Steps\nOnce you complete the Auth0 setup and get your credentials, provide me with:\n\n1. **AUTH0_DOMAIN** - Your Auth0 tenant domain (e.g., `your-app.us.auth0.com`)\n2. **AUTH0_CLIENT_ID** - Your application's client ID\n3. **AUTH0_CLIENT_SECRET** - Your application's client secret  \n4. **AUTH0_BASE_URL** - Your Replit app URL (e.g., `https://your-app.replit.app`)\n\n## Callback URLs to Set in Auth0\n- **Allowed Callback URLs**: `https://your-replit-app-url.replit.app/api/auth/callback`\n- **Allowed Logout URLs**: `https://your-replit-app-url.replit.app`\n\n## What Happens Next\nOnce you provide the credentials, I'll:\n1. Add them to your environment variables\n2. Enable Auth0 authentication\n3. Test the login flow\n4. Update the frontend to use Auth0\n\nThe platform is fully functional with local authentication while we set this up.","size_bytes":1003},"AUTH0_SETUP.md":{"content":"# Auth0 Setup Instructions\n\n## Prerequisites\nYou need an Auth0 account. If you don't have one, sign up at [auth0.com](https://auth0.com).\n\n## Step 1: Create Auth0 Application\n\n1. Log in to your [Auth0 Dashboard](https://manage.auth0.com)\n2. Click \"Applications\" in the left sidebar\n3. Click \"Create Application\"\n4. Give your application a name (e.g., \"EventMaster\")\n5. Select \"Regular Web Applications\"\n6. Click \"Create\"\n\n## Step 2: Configure Application Settings\n\nAfter creating the application:\n\n1. Go to the \"Settings\" tab of your application\n2. Note down these values (you'll need them later):\n   - **Domain** (e.g., `your-tenant.auth0.com`)\n   - **Client ID** \n   - **Client Secret**\n\n3. Configure the URLs:\n   - **Allowed Callback URLs**: `https://your-replit-domain.replit.app/api/auth/callback`\n   - **Allowed Logout URLs**: `https://your-replit-domain.replit.app`\n   - **Allowed Web Origins**: `https://your-replit-domain.replit.app`\n\n4. Click \"Save Changes\"\n\n## Step 3: Set Environment Variables in Replit\n\nAdd these environment variables to your Replit project:\n\n```bash\nAUTH0_DOMAIN=your-tenant.auth0.com\nAUTH0_CLIENT_ID=your_client_id_here\nAUTH0_CLIENT_SECRET=your_client_secret_here\nAUTH0_CALLBACK_URL=https://your-replit-domain.replit.app/api/auth/callback\n```\n\n### How to Add Environment Variables in Replit:\n\n1. Click on the \"Secrets\" tab in the left sidebar (lock icon)\n2. Add each variable:\n   - Key: `AUTH0_DOMAIN`, Value: your Auth0 domain\n   - Key: `AUTH0_CLIENT_ID`, Value: your Client ID\n   - Key: `AUTH0_CLIENT_SECRET`, Value: your Client Secret\n   - Key: `AUTH0_CALLBACK_URL`, Value: your callback URL\n\n## Step 4: Test Auth0 Integration\n\n1. Restart your Replit application\n2. Go to `/auth` page\n3. Click \"Continue with Auth0\" button\n4. You should be redirected to Auth0 login page\n5. After successful login, you'll be redirected back to your app\n\n## Current Local Authentication\n\nWhile setting up Auth0, you can use the local authentication system:\n\n**Admin Account:**\n- Email: `admin@eventmaster.com`\n- Password: `admin123`\n\n**Create New Account:**\n- Use the \"Sign Up\" tab on the auth page\n- Fill in the registration form\n\n## Troubleshooting\n\n### Auth0 Button Shows Error\n- Verify your environment variables are correct\n- Check that your Auth0 application URLs are properly configured\n- Ensure your Replit domain matches the callback URL\n\n### 401 Errors\n- Check if your Client Secret is correctly set\n- Verify the domain matches exactly (no trailing slash)\n\n### Redirect Errors\n- Ensure callback URL in Auth0 matches your Replit domain\n- Check that the URL includes `https://`\n\n## Optional: Customize Auth0\n\n### Add User Metadata\nYou can configure Auth0 to return additional user information by:\n1. Going to Actions > Flows in Auth0 Dashboard\n2. Select \"Login\" flow\n3. Add custom actions to include additional user data\n\n### Styling\nYou can customize the Auth0 login page appearance in:\n1. Branding > Universal Login in Auth0 Dashboard\n2. Customize colors, logos, and themes\n\n## Security Notes\n\n- Keep your Client Secret secure and never expose it in client-side code\n- Use HTTPS in production (Replit provides this automatically)\n- Regularly rotate your Auth0 credentials\n- Review Auth0 logs for any suspicious activity\n\n## Next Steps\n\nOnce Auth0 is configured:\n1. Test both Auth0 and local authentication\n2. Consider disabling local auth in production for better security\n3. Set up Auth0 rules for additional user validation if needed\n4. Configure user roles and permissions in Auth0 if required","size_bytes":3524},"AUTH0_SETUP_FINAL.md":{"content":"# Auth0 Setup - Final Step\n\n## Your Auth0 Credentials\nFrom your Auth0 dashboard screenshots, here are your exact credentials:\n\n### 1. AUTH0_DOMAIN\n```\ndev-5eajbng8pxadccif.us.auth0.com\n```\n\n### 2. AUTH0_CLIENT_ID  \n```\niDVI5ASB3P4nshhLFTWZvdoGAEpEcC8N\n```\n\n### 3. AUTH0_CLIENT_SECRET\n- Go to your Auth0 Application Settings\n- Look for the \"Client Secret\" field (it's hidden with dots)\n- Click \"Show\" or the eye icon to reveal it\n- Copy the entire secret key\n\n### 4. AUTH0_BASE_URL\nThis is your Replit app URL. It should be something like:\n```\nhttps://your-repl-name.your-username.repl.co\n```\n\n## How to Add These to Replit\n\n1. **Click the Lock icon (üîê) in your Replit sidebar** - this opens the Secrets tab\n2. **Add four new secrets**:\n   - Key: `AUTH0_DOMAIN`, Value: `dev-5eajbng8pxadccif.us.auth0.com`\n   - Key: `AUTH0_CLIENT_ID`, Value: `iDVI5ASB3P4nshhLFTWZvdoGAEpEcC8N`\n   - Key: `AUTH0_CLIENT_SECRET`, Value: [copy from Auth0 dashboard]\n   - Key: `AUTH0_BASE_URL`, Value: [your Replit app URL]\n\n## What Happens Next\nOnce you add these secrets:\n1. The app will automatically restart\n2. Auth0 authentication will be enabled\n3. The \"Professional Sign In\" button will work\n4. Users can sign in with Google, GitHub, email, etc.\n\n## Current Status\n- ‚úÖ Platform is fully functional with local authentication\n- ‚úÖ Auth0 code is integrated and ready\n- ‚úÖ Just needs the four secrets to activate Auth0\n\nThe EventMaster technology platform is complete and ready for production once Auth0 is activated!","size_bytes":1504},"README.md":{"content":"# EventMP\n#\u0000 \u0000U\u0000R\u0000L\u0000\r\u0000\n\u0000#\u0000 \u0000U\u0000R\u0000L\u0000\r\u0000\n\u0000#\u0000 \u0000U\u0000R\u0000L\u0000\r\u0000\n\u0000#\u0000 \u0000U\u0000R\u0000L\u0000\r\u0000\n\u0000#\u0000 \u0000U\u0000R\u0000L\u0000\r\u0000\n\u0000#\u0000 \u0000U\u0000R\u0000L\u0000\r\u0000\n\u0000","size_bytes":94},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# EventMaster - Event Management Platform\n\n## Overview\n\nEventMaster is a full-stack event management and ticketing platform built with a modern React frontend and Express.js backend. The application allows users to discover, book, and manage events with integrated payment processing through Stripe. It features role-based access control with dedicated admin capabilities for event management and analytics.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Recent Changes (Replit Environment Migration & Payment System Update - August 12, 2025)\n\n‚úÖ **Replit Environment Migration** - Successfully migrated from Replit Agent to standard Replit environment\n‚úÖ **Payment System Simplification** - Removed Stripe payment processing per user request\n‚úÖ **Email-Only Confirmations** - Implemented automatic booking confirmation with Gmail notifications\n‚úÖ **Session Storage Migration** - Migrated from PostgreSQL session storage to memory-based sessions for Replit compatibility\n‚úÖ **Database Configuration** - Configured for in-memory data storage with MongoDB schema ready for future use\n‚úÖ **Authentication System** - Updated both Replit Auth and Auth0 configurations to use memory sessions\n‚úÖ **Environment Variables Setup** - All configuration moved to secure environment variables (email, session secrets)\n‚úÖ **Checkout Flow Update** - Modified checkout page to show instant confirmation instead of payment processing\n‚úÖ **Booking System** - Auto-confirms bookings with immediate Gmail notifications to attendees\n‚úÖ **Dependencies Update** - Installed MongoDB and Mongoose packages, removed unnecessary PostgreSQL dependencies\n‚úÖ **Server Setup** - Application running on port 5000 with all core functionality working\n‚úÖ **Dashboard Enhancements** - Added progress bars showing event capacity fill rates\n‚úÖ **Revenue & Analytics** - Fixed dashboard stats showing proper revenue ($522) and conversion rates (80%)\n‚úÖ **Admin Authentication** - Admin login working with proper session management\n‚úÖ **UI Improvements** - Enhanced dashboard with visual progress indicators for event capacity\n‚úÖ **User Menu** - Added dropdown menu with profile access and logout functionality\n‚úÖ **Progress Bars** - Implemented capacity fill visualization across dashboard and events table\n‚úÖ **Mobile Responsive Design** - Made landing page, events page, and admin dashboard responsive for mobile devices\n‚úÖ **Email Notifications** - Added proper booking confirmation and cancellation email templates with rich HTML styling\n‚úÖ **Booking Cancellation** - Implemented booking cancellation functionality with automatic email notifications\n‚úÖ **User Management System** - Created comprehensive users page with search, filtering, and statistics\n‚úÖ **Duplicate Events Cleanup** - Removed duplicate events from database, maintaining data integrity\n‚úÖ **MongoDB Migration Complete** - Successfully migrated from in-memory to persistent MongoDB storage (August 12, 2025)\n‚úÖ **Complete System Testing** - All features working: event display, user registration, booking system, Gmail notifications\n‚úÖ **Data Persistence Verified** - Users, events, and bookings saving permanently to MongoDB database\n‚úÖ **Replit Environment Migration (August 12, 2025)** - Successfully migrated EventMaster from Replit Agent to standard Replit environment\n‚úÖ **Dependencies Fixed** - Installed missing tsx dependency to resolve application startup issues\n‚úÖ **MongoDB Connection Setup** - Configured MongoDB URI environment variable for database connectivity\n‚úÖ **Routing Issues Fixed** - Fixed Sign In button navigation from landing page to login page\n‚úÖ **Authentication System Enhanced** - Updated user registration to handle database storage and password hashing\n‚úÖ **Data Mapping Fixed** - Resolved MongoDB field mapping issues to prevent undefined values in events and users\n‚úÖ **Auth0 Removed** - Completely removed Auth0 integration and simplified to use only local authentication system\n‚úÖ **Simple Login Working** - Fixed authentication system with working admin login (admin@eventmaster.com / admin123)\n‚úÖ **Password Authentication** - Fixed password field mapping and bcrypt password validation for database users\n‚úÖ **Booking System Critical Fixes** - Fixed booking ID handling (ObjectId vs numeric), checkout page redirects, and \"booking not found\" errors\n‚úÖ **Event Attendee Count Updates FIXED** - Resolved capacity update system with proper MongoDB ID matching (August 12, 2025)\n‚úÖ **Real-time Capacity Tracking** - Event attendee counts now update automatically when bookings are created\n‚úÖ **Enhanced Date Display** - Added proper event date formatting and booking timestamps throughout the system\n‚úÖ **Database Query Optimization** - Enhanced booking retrieval to support both MongoDB ObjectId and numeric ID formats\n‚úÖ **Deployment Ready** - Created complete deployment files (render.yaml, Dockerfile, build.sh, .dockerignore) for Render hosting\n‚úÖ **User Experience Improvements** - Enhanced checkout confirmation page with proper booking details display\n‚úÖ **Email System Working** - Booking confirmation emails sending successfully via Gmail integration\n‚úÖ **Session Management** - Memory-based sessions working properly with authentication flow\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\nEvent focus: Technology events (AI, web development, mobile, cloud computing, cybersecurity, etc.)\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Build Tool**: Vite for fast development and optimized builds\n- **UI Framework**: shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom design tokens\n- **State Management**: TanStack Query (React Query) for server state\n- **Routing**: Wouter for lightweight client-side routing\n- **Forms**: React Hook Form with Zod validation\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Database**: MongoDB with Mongoose ODM\n- **Database Provider**: MongoDB Atlas with provided credentials\n- **Authentication**: Replit Auth with OpenID Connect\n- **Session Management**: express-session with memory store\n- **Payment Processing**: Stripe integration\n\n### Database Schema (MongoDB)\n- **Users**: Authentication and profile management with flexible document structure\n- **Events**: Event details, scheduling, and capacity management\n- **Bookings**: Ticket reservations and payment tracking\n- **Notifications**: User notification system\n- **ContactMessages**: Contact form submissions and inquiries\n\n## Key Components\n\n### Authentication System\n- **Provider**: Replit Auth using OpenID Connect\n- **Session Storage**: PostgreSQL-backed sessions with connect-pg-simple\n- **Authorization**: Role-based access control (admin/user roles)\n- **Security**: HTTPOnly cookies with secure flag in production\n\n### Event Management\n- **CRUD Operations**: Full event lifecycle management for admins\n- **Filtering & Search**: Category-based filtering and text search\n- **Capacity Management**: Max attendees tracking and availability checks\n- **Status Management**: Draft, active, upcoming, completed event states\n\n### Booking System\n- **Ticket Reservation**: Multi-quantity booking with unique reference codes\n- **Payment Integration**: Stripe payment intents for secure transactions\n- **Status Tracking**: Pending, confirmed, cancelled booking states\n- **Inventory Management**: Real-time attendee count updates\n\n### Admin Dashboard\n- **Analytics**: Dashboard with key metrics (events, attendees, revenue, conversion)\n- **Event Management**: Create, edit, delete events with status controls\n- **User Management**: View user profiles and booking history\n- **Real-time Updates**: Live data with TanStack Query cache invalidation\n\n## Data Flow\n\n### User Journey\n1. **Discovery**: Browse events on landing page or events listing\n2. **Authentication**: Sign in via Replit Auth when booking\n3. **Booking**: Select tickets and create booking with unique reference\n4. **Payment**: Stripe checkout flow with payment intent creation\n5. **Confirmation**: Booking status updates and email confirmation\n\n### Admin Workflow\n1. **Authentication**: Admin users access dedicated dashboard\n2. **Event Creation**: Form-based event creation with validation\n3. **Management**: Real-time event updates and status changes\n4. **Analytics**: Dashboard metrics with automatic data refresh\n\n### Database Operations\n- **Connection Pooling**: Neon serverless with connection pooling\n- **Query Optimization**: Drizzle ORM with typed queries\n- **Data Validation**: Zod schemas shared between client and server\n- **Migration Management**: Drizzle migrations with schema versioning\n\n## External Dependencies\n\n### Core Dependencies\n- **@neondatabase/serverless**: PostgreSQL database connection\n- **drizzle-orm**: Type-safe database ORM\n- **@tanstack/react-query**: Server state management\n- **@radix-ui/***: Accessible UI component primitives\n- **@stripe/stripe-js**: Payment processing integration\n\n### Development Tools\n- **typescript**: Static type checking\n- **tailwindcss**: Utility-first CSS framework\n- **vite**: Fast build tool and dev server\n- **tsx**: TypeScript execution for development\n\n### Authentication\n- **passport**: Authentication middleware\n- **openid-client**: OpenID Connect implementation\n- **express-session**: Session management\n- **connect-pg-simple**: PostgreSQL session store\n\n## Deployment Strategy\n\n### Build Process\n- **Frontend**: Vite builds optimized React bundle to `dist/public`\n- **Backend**: esbuild compiles TypeScript server to `dist/index.js`\n- **Assets**: Static files served from build directory in production\n\n### Environment Configuration\n- **Development**: Hot reload with Vite dev server proxy\n- **Production**: Express serves static files with API routes\n- **Database**: Environment-based DATABASE_URL configuration\n- **Secrets**: Environment variables for Stripe keys and session secrets\n\n### Scalability Considerations\n- **Database**: Serverless PostgreSQL with automatic scaling\n- **Sessions**: Database-backed sessions for horizontal scaling\n- **Static Assets**: Vite optimization for efficient asset delivery\n- **API Design**: RESTful endpoints with consistent error handling\n\nThe application uses a monorepo structure with shared TypeScript types and schemas between client and server, ensuring type safety across the full stack. The architecture prioritizes developer experience with hot reload, type safety, and modern tooling while maintaining production-ready performance and security.","size_bytes":10665},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as Auth0Strategy } from \"passport-auth0\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport MemoryStore from \"memorystore\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  // Use memory store for clean Replit environment\n  const MemStore = MemoryStore(session);\n  const sessionStore = new MemStore({\n    checkPeriod: sessionTtl, // prune expired entries every 24h\n  });\n\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET || 'default-dev-secret-key-change-in-production',\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: true,\n    cookie: {\n      httpOnly: true,\n      secure: false, // Set to false for development\n      maxAge: sessionTtl,\n      sameSite: 'lax',\n    },\n    name: 'eventmaster.sid',\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // Auth0 Strategy\n  console.log('Auth0 config check:', {\n    domain: process.env.AUTH0_DOMAIN?.trim(),\n    clientID: process.env.AUTH0_CLIENT_ID?.trim()?.substring(0, 10) + '...',\n    hasSecret: !!process.env.AUTH0_CLIENT_SECRET?.trim(),\n    callbackURL: `${process.env.AUTH0_BASE_URL}/api/auth/callback`\n  });\n  \n  if (process.env.AUTH0_DOMAIN && process.env.AUTH0_CLIENT_ID && process.env.AUTH0_CLIENT_SECRET) {\n    passport.use(\n      new Auth0Strategy(\n        {\n          domain: process.env.AUTH0_DOMAIN.trim(),\n          clientID: process.env.AUTH0_CLIENT_ID.trim(),\n          clientSecret: process.env.AUTH0_CLIENT_SECRET.trim(),\n          callbackURL: `${process.env.AUTH0_BASE_URL}/api/auth/callback`,\n          scope: 'openid email profile',\n        },\n        async (accessToken, refreshToken, extraParams, profile, done) => {\n          try {\n            const user = await storage.upsertUser({\n              id: profile.id,\n              email: profile.emails?.[0]?.value || profile._json?.email,\n              firstName: profile.name?.givenName || profile._json?.given_name,\n              lastName: profile.name?.familyName || profile._json?.family_name,\n              profileImageUrl: profile.photos?.[0]?.value || profile._json?.picture,\n              authProvider: \"auth0\",\n              authProviderId: profile.id,\n            });\n            return done(null, user);\n          } catch (error) {\n            return done(error);\n          }\n        }\n      )\n    );\n  }\n\n  // Local Strategy for fallback\n  passport.use(\n    new LocalStrategy(\n      { usernameField: \"email\" },\n      async (email, password, done) => {\n        try {\n          const user = await storage.getUserByEmail(email);\n          if (!user || !user.password || !(await comparePasswords(password, user.password))) {\n            return done(null, false, { message: \"Invalid email or password\" });\n          }\n          return done(null, user);\n        } catch (error) {\n          return done(error);\n        }\n      }\n    )\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  // Auth0 routes\n  app.get(\"/api/auth/login\", passport.authenticate(\"auth0\", {\n    scope: \"openid email profile\"\n  }));\n\n  app.get(\"/api/auth/callback\", \n    passport.authenticate(\"auth0\", { failureRedirect: \"/login\" }),\n    (req, res) => {\n      res.redirect(\"/\");\n    }\n  );\n\n  // Local auth routes\n  app.post(\"/api/register\", async (req, res, next) => {\n    try {\n      const { email, password, firstName, lastName, username } = req.body;\n      \n      if (!email || !password) {\n        return res.status(400).json({ message: \"Email and password are required\" });\n      }\n\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists\" });\n      }\n\n      const hashedPassword = await hashPassword(password);\n      const user = await storage.createUser({\n        email,\n        password: hashedPassword,\n        firstName,\n        lastName,\n        username,\n        authProvider: \"local\",\n      });\n\n      req.login(user, (err) => {\n        if (err) return next(err);\n        res.status(201).json(user);\n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.post(\"/api/login\", (req, res, next) => {\n    passport.authenticate(\"local\", (err: any, user: any, info: any) => {\n      if (err) return next(err);\n      if (!user) {\n        return res.status(401).json({ message: info?.message || \"Authentication failed\" });\n      }\n      req.login(user, (err) => {\n        if (err) return next(err);\n        res.json(user);\n      });\n    })(req, res, next);\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    res.json(req.user);\n  });\n\n  // Create admin user if it doesn't exist\n  initializeAdminUser();\n}\n\nasync function initializeAdminUser() {\n  try {\n    const adminEmail = process.env.ADMIN_EMAIL || \"admin@eventmaster.com\";\n    const adminPassword = process.env.ADMIN_PASSWORD || \"admin123\";\n    \n    const existingAdmin = await storage.getUserByEmail(adminEmail);\n    if (!existingAdmin) {\n      const hashedPassword = await hashPassword(adminPassword);\n      await storage.createUser({\n        email: adminEmail,\n        password: hashedPassword,\n        firstName: \"Admin\",\n        lastName: \"User\",\n        username: \"admin\",\n        isAdmin: true,\n        authProvider: \"local\",\n      });\n      console.log(`Admin user created: ${adminEmail} / ${adminPassword}`);\n    }\n  } catch (error) {\n    console.error(\"Error creating admin user:\", error);\n  }\n}","size_bytes":6849},"server/auth0.ts":{"content":"import { auth } from 'express-openid-connect';\nimport { Express } from 'express';\nimport { storage } from './storage';\n\ndeclare global {\n  namespace Express {\n    interface Request {\n      oidc: {\n        isAuthenticated(): boolean;\n        user?: any;\n      };\n    }\n  }\n}\n\nexport function setupAuth0(app: Express) {\n  const config = {\n    authRequired: false,\n    auth0Logout: true,\n    secret: process.env.AUTH0_CLIENT_SECRET || 'dev-secret-key',\n    baseURL: process.env.AUTH0_BASE_URL || 'http://localhost:5000',\n    clientID: process.env.AUTH0_CLIENT_ID || '',\n    issuerBaseURL: `https://${process.env.AUTH0_DOMAIN}` || '',\n    routes: {\n      login: '/auth/login',\n      logout: '/auth/logout', \n      callback: '/auth/callback'\n    }\n  };\n\n  console.log('Setting up Auth0 with config:', {\n    baseURL: config.baseURL,\n    clientID: config.clientID?.substring(0, 10) + '...',\n    issuerBaseURL: config.issuerBaseURL,\n    hasSecret: !!config.secret\n  });\n\n  // Apply Auth0 middleware\n  app.use(auth(config));\n\n  // Auth0 user profile endpoint\n  app.get('/api/auth/profile', (req, res, next) => {\n    if (!req.oidc.isAuthenticated()) {\n      return res.status(401).json({ error: 'Not authenticated' });\n    }\n    next();\n  }, async (req, res) => {\n    try {\n      const auth0User = req.oidc.user;\n      \n      if (!auth0User?.email) {\n        return res.status(400).json({ error: 'No email found in Auth0 profile' });\n      }\n\n      // Check if user exists in our database\n      let user = await storage.getUserByEmail(auth0User.email);\n      \n      if (!user) {\n        // Create new user from Auth0 profile\n        user = await storage.createUser({\n          email: auth0User.email,\n          firstName: auth0User.given_name || auth0User.name?.split(' ')[0] || '',\n          lastName: auth0User.family_name || auth0User.name?.split(' ').slice(1).join(' ') || '',\n          profileImageUrl: auth0User.picture || null,\n          isAdmin: false,\n        });\n        console.log('Created new user from Auth0:', user.email);\n      } else {\n        // Update existing user with latest Auth0 info (skip for now as updateUser method needs to be implemented)\n        console.log('Using existing user from Auth0:', user.email);\n      }\n\n      res.json(user!);\n    } catch (error) {\n      console.error('Auth0 profile error:', error);\n      res.status(500).json({ error: 'Failed to process Auth0 profile' });\n    }\n  });\n\n  // Check authentication status\n  app.get('/api/auth/status', (req, res) => {\n    res.json({\n      isAuthenticated: req.oidc.isAuthenticated(),\n      user: req.oidc.user || null\n    });\n  });\n}","size_bytes":2613},"server/environment.ts":{"content":"// Environment configuration with all variables moved to environment\nexport const config = {\n  // Database\n  mongodbUrl: process.env.MONGODB_URL,\n  mongodbUsername: process.env.MONGODB_USERNAME,\n  mongodbPassword: process.env.MONGODB_PASSWORD,\n  databaseUrl: process.env.DATABASE_URL,\n  \n  // Email\n  emailUser: process.env.EMAIL_USER || 'akshadapastambh37@gmail.com',\n  emailPassword: process.env.EMAIL_PASSWORD || 'urxpqhiqtjuhmcrs',\n  emailService: process.env.EMAIL_SERVICE || 'gmail',\n  \n  // Session\n  sessionSecret: process.env.SESSION_SECRET || 'your-default-session-secret-change-in-production',\n  \n  // Server\n  port: parseInt(process.env.PORT || '5000'),\n  nodeEnv: process.env.NODE_ENV || 'development',\n  \n  // Auth0\n  auth0Domain: process.env.AUTH0_DOMAIN,\n  auth0ClientId: process.env.AUTH0_CLIENT_ID,\n  auth0ClientSecret: process.env.AUTH0_CLIENT_SECRET,\n  auth0BaseUrl: process.env.AUTH0_BASE_URL,\n  \n  // Demo user credentials\n  demoUserEmail: process.env.DEMO_USER_EMAIL,\n  demoUserPassword: process.env.DEMO_USER_PASSWORD,\n  \n  // Admin credentials (moved from hardcoded)\n  adminEmail: process.env.ADMIN_EMAIL || 'akshadapastambh37@gmail.com',\n  adminPassword: process.env.ADMIN_PASSWORD || 'Akshad@11',\n};","size_bytes":1226},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1921},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport MemoryStore from \"memorystore\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  // Use memory store for clean Replit environment\n  const MemStore = MemoryStore(session);\n  const sessionStore = new MemStore({\n    checkPeriod: sessionTtl, // prune expired entries every 24h\n  });\n  return session({\n    secret: process.env.SESSION_SECRET || 'default-dev-secret-key-change-in-production',\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n  \n  passport.use(\n    new Strategy(\n      {\n        config,\n        client_id: process.env.REPL_ID!,\n        redirect_uri: `${process.env.REPLIT_DOMAINS}/callback`,\n        response_type: \"code\",\n        scope: \"email profile openid\",\n        params: {\n          user_agent: \"replit-ai\",\n        },\n      },\n      (\n        tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n        done: (err: any, user?: any) => void\n      ) => {\n        updateUserSession({}, tokens);\n        \n        const claims = tokens.claims();\n        \n        upsertUser(claims).then(() => {\n          done(null, {\n            id: claims[\"sub\"],\n            email: claims[\"email\"],\n            firstName: claims[\"first_name\"],\n            lastName: claims[\"last_name\"],\n            profileImageUrl: claims[\"profile_image_url\"],\n            claims,\n            access_token: tokens.access_token,\n            refresh_token: tokens.refresh_token,\n            expires_at: claims?.exp,\n          });\n        }).catch((err) => {\n          done(err);\n        });\n      }\n    )\n  );\n\n  passport.serializeUser((user: any, done) => {\n    done(null, user.id);\n  });\n\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user || false);\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  // Auth routes\n  app.get(\"/api/auth/login\", passport.authenticate(\"openidconnect\"));\n  \n  app.get(\n    \"/callback\",\n    passport.authenticate(\"openidconnect\", { failureRedirect: \"/api/auth/login\" }),\n    (req, res) => {\n      res.redirect(\"/\");\n    }\n  );\n\n  app.post(\"/api/auth/logout\", (req: any, res) => {\n    req.logout((err: any) => {\n      if (err) {\n        return res.status(500).json({ message: \"Failed to logout\" });\n      }\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":6162},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport passport from \"passport\";\nimport { storage } from \"./storage\";\nimport { setupAuth } from \"./replitAuth\";\nimport { authenticateUser, createUser, requireAuth, requireAdmin, type AuthUser } from \"./auth-simple\";\n// Using in-memory storage with Zod validation\nimport { z } from \"zod\";\nimport { insertEventSchema, insertBookingSchema, insertContactMessageSchema } from \"@shared/schema\";\nimport nodemailer from \"nodemailer\";\nimport bcrypt from \"bcryptjs\";\n\n// Email transporter setup\nconst transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    user: process.env.EMAIL_USER || 'akshadapastambh37@gmail.com',\n    pass: process.env.EMAIL_PASSWORD || process.env.EMAIL_PASS || 'urxpqhiqtjuhmcrs',\n  },\n});\n\n// Verify email connection\ntransporter.verify((error, success) => {\n  if (error) {\n    console.log('Email configuration error:', error);\n  } else {\n    console.log('Email server is ready to send messages');\n  }\n});\n\n// Email helper functions\nconst sendBookingConfirmationEmail = async (booking: any, event: any) => {\n  const mailOptions = {\n    from: process.env.EMAIL_USER || 'akshadapastambh37@gmail.com',\n    to: booking.attendeeEmail,\n    subject: `üéâ Booking Confirmed - ${event.name}`,\n    html: `\n      <div style=\"font-family: 'Inter', Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f8fafc;\">\n        <div style=\"background: white; padding: 30px; border-radius: 12px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\">\n          <div style=\"text-align: center; margin-bottom: 30px;\">\n            <h1 style=\"color: #8B5CF6; margin: 0; font-size: 28px;\">üéâ Booking Confirmed!</h1>\n            <p style=\"color: #6b7280; margin: 10px 0 0 0; font-size: 16px;\">Your ticket has been successfully confirmed</p>\n          </div>\n          \n          <div style=\"background: #f3f4f6; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n            <h3 style=\"color: #374151; margin: 0 0 15px 0;\">Event Details:</h3>\n            <table style=\"width: 100%; border-collapse: collapse;\">\n              <tr><td style=\"padding: 5px 0; color: #6b7280; font-weight: 500;\">Event:</td><td style=\"padding: 5px 0; color: #374151; font-weight: 600;\">${event.name}</td></tr>\n              <tr><td style=\"padding: 5px 0; color: #6b7280; font-weight: 500;\">Date:</td><td style=\"padding: 5px 0; color: #374151;\">${new Date(event.startDate).toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}</td></tr>\n              <tr><td style=\"padding: 5px 0; color: #6b7280; font-weight: 500;\">Time:</td><td style=\"padding: 5px 0; color: #374151;\">${new Date(event.startDate).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}</td></tr>\n              <tr><td style=\"padding: 5px 0; color: #6b7280; font-weight: 500;\">Location:</td><td style=\"padding: 5px 0; color: #374151;\">${event.location}</td></tr>\n              <tr><td style=\"padding: 5px 0; color: #6b7280; font-weight: 500;\">Tickets:</td><td style=\"padding: 5px 0; color: #374151; font-weight: 600;\">${booking.quantity} ticket(s)</td></tr>\n              <tr><td style=\"padding: 5px 0; color: #6b7280; font-weight: 500;\">Total Paid:</td><td style=\"padding: 5px 0; color: #10b981; font-weight: 700; font-size: 18px;\">$${booking.totalAmount}</td></tr>\n            </table>\n          </div>\n\n          <div style=\"background: #dcfce7; padding: 15px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #10b981;\">\n            <p style=\"color: #059669; margin: 0; font-weight: 600;\">Booking Reference: ${booking.bookingReference}</p>\n            <p style=\"color: #059669; margin: 5px 0 0 0; font-size: 14px;\">Please keep this reference number for your records</p>\n          </div>\n\n          <div style=\"text-align: center; margin: 30px 0;\">\n            <p style=\"color: #6b7280; margin: 0; font-size: 14px;\">Thank you for choosing EventMaster!</p>\n            <p style=\"color: #6b7280; margin: 5px 0 0 0; font-size: 14px;\">We look forward to seeing you at the event.</p>\n          </div>\n        </div>\n      </div>\n    `\n  };\n\n  try {\n    await transporter.sendMail(mailOptions);\n    console.log('Booking confirmation email sent successfully to:', booking.attendeeEmail);\n    return true;\n  } catch (error) {\n    console.error('Error sending booking confirmation email:', error);\n    return false;\n  }\n};\n\nconst sendBookingCancellationEmail = async (booking: any, event: any) => {\n  const mailOptions = {\n    from: process.env.EMAIL_USER || 'akshadapastambh37@gmail.com',\n    to: booking.attendeeEmail,\n    subject: `‚ùå Booking Cancelled - ${event.name}`,\n    html: `\n      <div style=\"font-family: 'Inter', Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f8fafc;\">\n        <div style=\"background: white; padding: 30px; border-radius: 12px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\">\n          <div style=\"text-align: center; margin-bottom: 30px;\">\n            <h1 style=\"color: #dc2626; margin: 0; font-size: 28px;\">‚ùå Booking Cancelled</h1>\n            <p style=\"color: #6b7280; margin: 10px 0 0 0; font-size: 16px;\">Your booking has been cancelled</p>\n          </div>\n          \n          <div style=\"background: #f3f4f6; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n            <h3 style=\"color: #374151; margin: 0 0 15px 0;\">Cancelled Booking Details:</h3>\n            <table style=\"width: 100%; border-collapse: collapse;\">\n              <tr><td style=\"padding: 5px 0; color: #6b7280; font-weight: 500;\">Event:</td><td style=\"padding: 5px 0; color: #374151; font-weight: 600;\">${event.name}</td></tr>\n              <tr><td style=\"padding: 5px 0; color: #6b7280; font-weight: 500;\">Date:</td><td style=\"padding: 5px 0; color: #374151;\">${new Date(event.startDate).toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}</td></tr>\n              <tr><td style=\"padding: 5px 0; color: #6b7280; font-weight: 500;\">Booking Reference:</td><td style=\"padding: 5px 0; color: #374151; font-weight: 600;\">${booking.bookingReference}</td></tr>\n              <tr><td style=\"padding: 5px 0; color: #6b7280; font-weight: 500;\">Refund Amount:</td><td style=\"padding: 5px 0; color: #dc2626; font-weight: 700; font-size: 18px;\">$${booking.totalAmount}</td></tr>\n            </table>\n          </div>\n\n          <div style=\"background: #fef2f2; padding: 15px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #dc2626;\">\n            <p style=\"color: #dc2626; margin: 0; font-weight: 600;\">Refund Processing</p>\n            <p style=\"color: #dc2626; margin: 5px 0 0 0; font-size: 14px;\">Your refund will be processed within 3-5 business days</p>\n          </div>\n\n          <div style=\"text-align: center; margin: 30px 0;\">\n            <p style=\"color: #6b7280; margin: 0; font-size: 14px;\">We're sorry to see you go!</p>\n            <p style=\"color: #6b7280; margin: 5px 0 0 0; font-size: 14px;\">Feel free to browse our other events at EventMaster.</p>\n          </div>\n        </div>\n      </div>\n    `\n  };\n\n  try {\n    await transporter.sendMail(mailOptions);\n    console.log('Booking cancellation email sent successfully to:', booking.attendeeEmail);\n    return true;\n  } catch (error) {\n    console.error('Error sending booking cancellation email:', error);\n    return false;\n  }\n};\n\n// Use the simple auth middleware from auth-simple.ts\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  console.log('Using in-memory storage for clean Replit environment');\n  console.log('Sample events and admin user loaded automatically');\n  \n  // Check if Auth0 is configured\n  const isAuth0Configured = !!(\n    process.env.AUTH0_DOMAIN &&\n    process.env.AUTH0_CLIENT_ID &&\n    process.env.AUTH0_CLIENT_SECRET &&\n    process.env.AUTH0_BASE_URL\n  );\n\n  // Remove Auth0 completely - use only simple authentication\n  console.log('Using simple authentication system...');\n  setupAuth(app);\n\n  // Simple authentication routes\n  app.post('/api/auth/register', async (req, res) => {\n    try {\n      const { email, password, firstName, lastName, username, name } = req.body;\n      \n      // Handle different form structures from both auth pages\n      const fullName = name || `${firstName || ''} ${lastName || ''}`.trim() || username || email.split('@')[0];\n\n      if (!email || !password || !fullName) {\n        return res.status(400).json({ message: \"Email, password, and name are required\" });\n      }\n\n      // Check if user already exists \n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(409).json({ message: \"User already exists. Please sign in instead.\" });\n      }\n\n      console.log('Creating user with:', { email, fullName });\n      const user = await createUser(email, password, fullName);\n      console.log('User created:', user);\n      \n      // Set up session\n      (req.session as any).user = {\n        id: user.id,\n        email: user.email,\n        name: user.name,\n        isAdmin: user.isAdmin || false\n      };\n      \n      const sessionUser = {\n        id: user.id,\n        email: user.email,\n        name: user.name,\n        isAdmin: user.isAdmin || false\n      };\n      \n      res.status(201).json(sessionUser);\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ message: \"Registration failed\" });\n    }\n  });\n\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      \n      if (!email || !password) {\n        return res.status(400).json({ message: \"Email and password are required\" });\n      }\n\n      console.log('Attempting login for:', email);\n\n      // Check demo admin user first\n      if (email === 'admin@eventmaster.com' && password === 'admin123') {\n        const user = {\n          id: 'admin-1',\n          email: 'admin@eventmaster.com',\n          name: 'Admin User',\n          isAdmin: true\n        };\n        \n        (req.session as any).user = user;\n        console.log('Admin user logged in successfully');\n        return res.json(user);\n      }\n\n      // Check database users\n      try {\n        const existingUser = await storage.getUserByEmail(email);\n        console.log('Database user found:', !!existingUser);\n        \n        if (existingUser && (existingUser.password)) {\n          const passwordToCheck = existingUser.password || '';\n          console.log('User found with password field:', !!passwordToCheck);\n          console.log('Password in DB looks like hash:', passwordToCheck.startsWith('$2'));\n          \n          let isValidPassword = false;\n          \n          // Check if password is hashed or plain text\n          if (passwordToCheck.startsWith('$2')) {\n            // Password is hashed with bcrypt\n            isValidPassword = await bcrypt.compare(password, passwordToCheck);\n          } else {\n            // Password might be stored as plain text (legacy data)\n            isValidPassword = password === passwordToCheck;\n          }\n          \n          console.log('Password validation result:', isValidPassword);\n          \n          if (isValidPassword) {\n            const user = {\n              id: existingUser.id,\n              email: existingUser.email,\n              name: existingUser.name || existingUser.email,\n              isAdmin: existingUser.isAdmin || false\n            };\n            \n            (req.session as any).user = user;\n            console.log('Database user logged in successfully');\n            return res.json(user);\n          }\n        }\n      } catch (dbError) {\n        console.error('Database authentication error:', dbError);\n      }\n      \n      console.log('Authentication failed for:', email);\n      return res.status(401).json({ message: \"Invalid email or password\" });\n      \n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  app.post('/api/auth/logout', (req, res) => {\n    console.log('üö™ Auth logout request received, clearing session...');\n    req.session.destroy((err: any) => {\n      if (err) {\n        console.error('Session destruction error:', err);\n        return res.status(500).json({ message: \"Logout failed\" });\n      }\n      res.clearCookie('connect.sid');\n      console.log('‚úÖ Auth session cleared successfully');\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  // Additional logout route for compatibility\n  app.post('/api/logout', (req, res) => {\n    console.log('üö™ General logout request received, clearing session...');\n    req.session.destroy((err: any) => {\n      if (err) {\n        console.error('Session destruction error:', err);\n        return res.status(500).json({ message: \"Logout failed\" });\n      }\n      res.clearCookie('connect.sid');\n      console.log('‚úÖ General session cleared successfully');\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  // Get current user route\n  app.get('/api/user', requireAuth, (req: any, res) => {\n    res.json(req.user);\n  });\n\n  // Create default admin and demo users on startup\n  const createDefaultUsers = async () => {\n    try {\n      // Create admin user\n      const adminEmail = 'akshadapastambh37@gmail.com';\n      const adminUser = await storage.getUserByEmail(adminEmail);\n      if (!adminUser) {\n        await storage.createUser({\n          email: adminEmail,\n          firstName: 'Admin',\n          lastName: 'User',\n          isAdmin: true,\n        });\n        console.log('Admin user created successfully');\n      }\n\n      // Create demo user\n      const demoEmail = process.env.DEMO_USER_EMAIL;\n      if (demoEmail) {\n        const demoUser = await storage.getUserByEmail(demoEmail);\n        if (!demoUser) {\n          await storage.createUser({\n            email: demoEmail,\n            firstName: 'Demo',\n            lastName: 'User',\n            isAdmin: false,\n          });\n          console.log('Demo user created successfully');\n        }\n      }\n    } catch (error) {\n      console.log('Error creating default users:', error);\n    }\n  };\n\n  // Call function to create default users\n  await createDefaultUsers();\n\n  // Create sample events on startup\n  try {\n    await storage.createSampleEvents();\n    console.log(\"Sample events created successfully\");\n  } catch (error) {\n    console.log(\"Sample events may already exist or database not ready\");\n  }\n\n  // Auth routes - handle both Auth0 and local auth\n  app.get('/api/user', async (req: any, res) => {\n    try {\n      let user;\n      \n      // Check session-based authentication first\n      const userId = (req.session as any)?.userId;\n      if (userId) {\n        user = (req.session as any).user;\n        if (user) {\n          return res.json(user);\n        }\n      }\n      \n      // If Auth0 is configured and user is authenticated via Auth0\n      if (isAuth0Configured && req.oidc?.requireAuth()) {\n        const auth0User = req.oidc.user;\n        user = await storage.getUserByEmail(auth0User.email);\n        \n        if (!user) {\n          user = await storage.createUser({\n            email: auth0User.email,\n            firstName: auth0User.given_name || auth0User.name?.split(' ')[0] || '',\n            lastName: auth0User.family_name || auth0User.name?.split(' ').slice(1).join(' ') || '',\n            profileImageUrl: auth0User.picture || null,\n            isAdmin: false,\n          });\n        }\n        return res.json(user);\n      }\n      \n      // Check passport-based authentication\n      if (req.requireAuth && req.requireAuth()) {\n        user = await storage.getUser(req.user.id);\n        return res.json(user);\n      }\n      \n      // No valid authentication found\n      return res.status(401).json({ message: \"Unauthorized\" });\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Dashboard stats\n  app.get('/api/dashboard/stats', requireAuth, async (req: any, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Manual attendee count update route for debugging\n  app.post('/api/events/:id/update-attendee-count', requireAuth, async (req: any, res) => {\n    try {\n      const eventId = parseInt(req.params.id);\n      console.log('üîß Manual attendee count update for event:', eventId);\n      \n      await storage.updateEventAttendeeCount(eventId);\n      \n      const updatedEvent = await storage.getEvent(eventId);\n      console.log('üìä Updated event current attendees:', updatedEvent?.currentAttendees);\n      \n      res.json({ \n        success: true, \n        eventId, \n        currentAttendees: updatedEvent?.currentAttendees || 0,\n        maxAttendees: updatedEvent?.maxAttendees || 0,\n        message: 'Attendee count updated successfully' \n      });\n    } catch (error) {\n      console.error('Error in manual attendee count update:', error);\n      res.status(500).json({ message: 'Failed to update attendee count' });\n    }\n  });\n\n  // Bulk update all event attendee counts\n  app.post('/api/events/update-all-attendee-counts', requireAuth, async (req: any, res) => {\n    try {\n      console.log('üîÑ Bulk updating all event attendee counts...');\n      const events = await storage.getEvents({});\n      const results = [];\n      \n      for (const event of events) {\n        await storage.updateEventAttendeeCount(event.id);\n        const updatedEvent = await storage.getEvent(event.id);\n        results.push({\n          eventId: event.id,\n          name: event.name,\n          currentAttendees: updatedEvent?.currentAttendees || 0,\n          maxAttendees: updatedEvent?.maxAttendees || 0\n        });\n      }\n      \n      res.json({ \n        success: true, \n        message: 'All event attendee counts updated',\n        results \n      });\n    } catch (error) {\n      console.error('Error in bulk attendee count update:', error);\n      res.status(500).json({ message: 'Failed to update attendee counts' });\n    }\n  });\n\n  // Event routes\n  app.get('/api/events', async (req, res) => {\n    try {\n      const { search, category, status } = req.query;\n      \n      // Check if user is admin via session or passport\n      const userId = (req.session as any)?.userId;\n      let isAdmin = false;\n      \n      if (userId) {\n        const sessionUser = (req.session as any)?.user;\n        isAdmin = sessionUser?.isAdmin || false;\n      } else if (req.user) {\n        isAdmin = req.user.isAdmin || false;\n      }\n      \n      // Show all events to regular users, admins can filter by status\n      let finalStatus = status as string;\n      // Remove automatic filtering so all events show by default\n      \n      const events = await storage.getEvents({\n        search: search as string,\n        category: category as string,\n        status: finalStatus,\n      });\n      res.json(events);\n    } catch (error) {\n      console.error(\"Error fetching events:\", error);\n      res.status(500).json({ message: \"Failed to fetch events\" });\n    }\n  });\n\n  app.get('/api/events/:id', async (req, res) => {\n    try {\n      console.log('Looking for event with ID:', req.params.id);\n      const eventId = parseInt(req.params.id);\n      if (isNaN(eventId)) {\n        return res.status(400).json({ message: \"Invalid event ID\" });\n      }\n      const event = await storage.getEvent(eventId);\n      console.log('Event found:', event ? 'YES' : 'NO');\n      if (!event) {\n        return res.status(404).json({ message: \"Event not found\" });\n      }\n      res.json(event);\n    } catch (error) {\n      console.error(\"Error fetching event:\", error);\n      res.status(500).json({ message: \"Failed to fetch event\" });\n    }\n  });\n\n  app.post('/api/events', requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      // Convert data types properly for validation\n      const processedData = {\n        ...req.body,\n        startDate: new Date(req.body.startDate),\n        endDate: new Date(req.body.endDate),\n        ticketPrice: req.body.ticketPrice.toString(),\n        maxAttendees: parseInt(req.body.maxAttendees.toString()),\n        createdBy: req.user.id,\n      };\n\n      const eventData = insertEventSchema.parse(processedData);\n      const event = await storage.createEvent(eventData);\n      \n      res.status(201).json(event);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        console.error(\"Validation errors:\", error.errors);\n        return res.status(400).json({ message: \"Invalid event data\", errors: error.errors });\n      }\n      console.error(\"Error creating event:\", error);\n      res.status(500).json({ message: \"Failed to create event\" });\n    }\n  });\n\n  app.put('/api/events/:id', requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const eventId = parseInt(req.params.id);\n      const updates = insertEventSchema.partial().parse(req.body);\n      \n      const event = await storage.updateEvent(eventId, updates);\n      res.json(event);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid event data\", errors: error.errors });\n      }\n      console.error(\"Error updating event:\", error);\n      res.status(500).json({ message: \"Failed to update event\" });\n    }\n  });\n\n  app.delete('/api/events/:id', requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const eventId = parseInt(req.params.id);\n      await storage.deleteEvent(eventId);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting event:\", error);\n      res.status(500).json({ message: \"Failed to delete event\" });\n    }\n  });\n\n  // Booking routes\n  app.get('/api/bookings', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      let bookings;\n      if (user?.isAdmin) {\n        // Admin can see all bookings\n        bookings = await storage.getBookings();\n      } else {\n        // Regular users can only see their own bookings\n        bookings = await storage.getBookings(userId);\n      }\n      \n      res.json(bookings);\n    } catch (error) {\n      console.error(\"Error fetching bookings:\", error);\n      res.status(500).json({ message: \"Failed to fetch bookings\" });\n    }\n  });\n\n  // Get single booking by ID\n  app.get('/api/bookings/:id', requireAuth, async (req: any, res) => {\n    try {\n      const bookingId = req.params.id;\n      console.log('Looking for booking with ID:', bookingId);\n\n      const booking = await storage.getBooking(bookingId);\n      if (!booking) {\n        console.log('Booking not found:', bookingId);\n        return res.status(404).json({ message: \"Booking not found\" });\n      }\n\n      // Check if user can access this booking\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      // Admin can see any booking, users can only see their own\n      if (!user?.isAdmin && booking.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      console.log('Booking found and authorized:', booking.bookingReference);\n      res.json(booking);\n    } catch (error) {\n      console.error(\"Error fetching booking:\", error);\n      res.status(500).json({ message: \"Failed to fetch booking\" });\n    }\n  });\n\n  app.post('/api/bookings', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Generate booking reference\n      const bookingReference = `BK${Date.now()}${Math.random().toString(36).substr(2, 5).toUpperCase()}`;\n      \n      // Get event to calculate total amount\n      const event = await storage.getEvent(parseInt(req.body.eventId));\n      if (!event) {\n        return res.status(404).json({ message: 'Event not found' });\n      }\n      \n      const quantity = req.body.quantity || 1;\n      const totalAmount = (parseFloat(event.ticketPrice) * quantity).toFixed(2);\n\n      const bookingData = {\n        eventId: parseInt(req.body.eventId),\n        userId,\n        quantity,\n        totalAmount,\n        status: 'confirmed', // Auto-confirm since no payment processing\n        stripePaymentIntentId: null, // No Stripe processing\n        bookingReference,\n        attendeeEmail: user.email || req.body.attendeeEmail,\n        attendeeName: req.body.attendeeName || `${user.firstName || ''} ${user.lastName || ''}`.trim() || user.email,\n      };\n      \n      const booking = await storage.createBooking(bookingData);\n      \n      // Send email confirmation using event details already retrieved\n      if (booking && event) {\n        await sendBookingConfirmationEmail(booking, event);\n      }\n      \n      // Force manual attendee count update with proper event ID conversion\n      const eventIdForUpdate = parseInt(req.body.eventId);\n      console.log('üîÑ Forcing attendee count update after booking creation for event:', eventIdForUpdate);\n      await storage.updateEventAttendeeCount(eventIdForUpdate);\n      \n      // Return booking with proper ID for frontend\n      const bookingWithEvent = await storage.getBooking(booking.id);\n      res.status(201).json(bookingWithEvent || booking);\n    } catch (error) {\n      console.error(\"Error creating booking:\", error);\n      res.status(500).json({ message: \"Failed to create booking\" });\n    }\n  });\n\n  // Skip Stripe payment and create booking with email confirmation\n  app.post(\"/api/payment/create-intent\", requireAuth, async (req: any, res) => {\n    try {\n      // Since we're not using Stripe, we just return success\n      res.json({ \n        success: true, \n        message: \"Payment processing disabled - booking will be confirmed via email\" \n      });\n    } catch (error) {\n      console.error(\"Error in payment endpoint:\", error);\n      res.status(500).json({ message: \"Payment system unavailable\" });\n    }\n\n  });\n\n  // Manual payment confirmation by admin\n  app.post(\"/api/payment/confirm\", requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { bookingId } = req.body;\n      \n      if (!bookingId) {\n        return res.status(400).json({ message: \"Booking ID is required\" });\n      }\n\n      const booking = await storage.updateBookingStatus(\n        parseInt(bookingId), \n        'confirmed',\n        `manual_${Date.now()}`\n      );\n\n      // Send confirmation email to user\n      const bookingDetails = await storage.getBooking(parseInt(bookingId));\n      if (bookingDetails && bookingDetails.event) {\n        const confirmationEmail = `\n          <div style=\"font-family: 'Inter', Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n            <h2 style=\"color: #10b981; text-align: center;\">Booking Confirmed!</h2>\n            \n            <div style=\"background: #ecfdf5; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n              <h3>Your Event Details:</h3>\n              <p><strong>Event:</strong> ${bookingDetails.event.name}</p>\n              <p><strong>Date:</strong> ${new Date(bookingDetails.event.startDate).toLocaleDateString()}</p>\n              <p><strong>Location:</strong> ${bookingDetails.event.location}</p>\n              <p><strong>Quantity:</strong> ${bookingDetails.quantity} ticket(s)</p>\n              <p><strong>Total Amount:</strong> $${bookingDetails.totalAmount}</p>\n              <p><strong>Booking Reference:</strong> ${bookingDetails.bookingReference}</p>\n            </div>\n\n            <div style=\"text-align: center; margin: 30px 0;\">\n              <p style=\"color: #10b981; font-weight: bold;\">Your payment has been confirmed and your booking is now active!</p>\n              <p style=\"color: #6b7280;\">We look forward to seeing you at the event!</p>\n            </div>\n          </div>\n        `;\n\n        await transporter.sendMail({\n          from: process.env.EMAIL_USER,\n          to: bookingDetails.attendeeEmail,\n          subject: `Booking Confirmed - ${bookingDetails.event.name}`,\n          html: confirmationEmail,\n        });\n      }\n\n      res.json({ \n        message: \"Payment confirmed successfully\",\n        booking: booking \n      });\n    } catch (error) {\n      console.error(\"Error confirming payment:\", error);\n      res.status(500).json({ message: \"Failed to confirm payment\" });\n    }\n  });\n\n  // Contact form route\n  app.post('/api/contact', async (req, res) => {\n    try {\n      const { name, email, subject, message } = req.body;\n      const contactData = { name, email, subject, message, status: 'new' };\n      const contactMessage = await storage.createContactMessage(contactData);\n      \n      // Send notification email to admin\n      const adminEmail = process.env.EMAIL_USER;\n      const adminNotificationSubject = `New Contact Message from ${contactData.name}`;\n      const adminNotificationContent = `\n        <div style=\"font-family: 'Inter', Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n          <h2 style=\"color: #8B5CF6; text-align: center;\">New Contact Message</h2>\n          \n          <div style=\"background: #f8fafc; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n            <h3>Contact Details:</h3>\n            <p><strong>Name:</strong> ${contactData.name}</p>\n            <p><strong>Email:</strong> ${contactData.email}</p>\n            <p><strong>Subject:</strong> ${contactData.subject}</p>\n            <p><strong>Message:</strong></p>\n            <p style=\"white-space: pre-wrap;\">${contactData.message}</p>\n          </div>\n          \n          <div style=\"text-align: center; margin: 30px 0;\">\n            <p style=\"color: #6b7280;\">Reply directly to this email to respond to the user.</p>\n          </div>\n        </div>\n      `;\n\n      await transporter.sendMail({\n        from: process.env.EMAIL_USER,\n        to: adminEmail,\n        replyTo: contactData.email,\n        subject: adminNotificationSubject,\n        html: adminNotificationContent,\n      });\n\n      res.status(201).json({ message: \"Contact message sent successfully\" });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid contact data\", errors: error.errors });\n      }\n      console.error(\"Error sending contact message:\", error);\n      res.status(500).json({ message: \"Failed to send contact message\" });\n    }\n  });\n\n  // Notification routes\n  app.get('/api/notifications', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const notifications = await storage.getNotifications(userId);\n      res.json(notifications);\n    } catch (error) {\n      console.error(\"Error fetching notifications:\", error);\n      res.status(500).json({ message: \"Failed to fetch notifications\" });\n    }\n  });\n\n  // Cancel booking route\n  app.delete('/api/bookings/:id', requireAuth, async (req: any, res) => {\n    try {\n      const bookingId = parseInt(req.params.id);\n      const userId = req.user.id;\n      \n      // Get booking details before deletion for email\n      const booking = await storage.getBooking(bookingId);\n      if (!booking) {\n        return res.status(404).json({ message: \"Booking not found\" });\n      }\n      \n      // Check authorization\n      const user = await storage.getUser(userId);\n      if (!user?.isAdmin && booking.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      // Update booking status to cancelled\n      await storage.updateBookingStatus(bookingId, 'cancelled');\n      \n      // Send cancellation email\n      if (booking && booking.event) {\n        await sendBookingCancellationEmail(booking, booking.event);\n      }\n      \n      res.json({ message: \"Booking cancelled successfully\" });\n    } catch (error) {\n      console.error(\"Error cancelling booking:\", error);\n      res.status(500).json({ message: \"Failed to cancel booking\" });\n    }\n  });\n\n  app.patch('/api/notifications/:id/read', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const notificationId = parseInt(req.params.id);\n      \n      const notification = await storage.markNotificationAsRead(notificationId, userId);\n      res.json(notification);\n    } catch (error) {\n      console.error(\"Error marking notification as read:\", error);\n      res.status(500).json({ message: \"Failed to mark notification as read\" });\n    }\n  });\n\n  app.patch('/api/notifications/mark-all-read', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      await storage.markAllNotificationsAsRead(userId);\n      res.json({ message: \"All notifications marked as read\" });\n    } catch (error) {\n      console.error(\"Error marking all notifications as read:\", error);\n      res.status(500).json({ message: \"Failed to mark all notifications as read\" });\n    }\n  });\n\n  app.delete('/api/notifications/:id', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const notificationId = parseInt(req.params.id);\n      \n      await storage.deleteNotification(notificationId, userId);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting notification:\", error);\n      res.status(500).json({ message: \"Failed to delete notification\" });\n    }\n  });\n\n  // Users route - Admin only\n  app.get('/api/users', requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const users = await storage.getUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  // Tickets/Attendees routes - Admin only\n  app.get('/api/tickets', requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      // Get all bookings (tickets) with event and user information\n      const tickets = await storage.getBookings();\n      res.json(tickets);\n    } catch (error) {\n      console.error(\"Error fetching tickets:\", error);\n      res.status(500).json({ message: \"Failed to fetch tickets\" });\n    }\n  });\n\n  app.get('/api/attendees', requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      // Get all confirmed bookings (attendees) with event and user information\n      const attendees = await storage.getBookings();\n      const confirmedAttendees = attendees.filter(booking => booking.status === 'confirmed');\n      \n      res.json(confirmedAttendees);\n    } catch (error) {\n      console.error(\"Error fetching attendees:\", error);\n      res.status(500).json({ message: \"Failed to fetch attendees\" });\n    }\n  });\n\n  // Export routes - Admin only\n  app.get('/api/export/tickets', requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const tickets = await storage.getBookings();\n      \n      // Convert to CSV format\n      const csvHeader = 'Booking ID,Event,Attendee Name,Email,Quantity,Amount,Status,Date\\n';\n      const csvData = tickets.map(ticket => [\n        ticket.bookingReference,\n        ticket.event?.name || 'Unknown',\n        ticket.attendeeName,\n        ticket.attendeeEmail,\n        ticket.quantity,\n        ticket.totalAmount,\n        ticket.status,\n        ticket.createdAt ? new Date(ticket.createdAt).toLocaleDateString() : ''\n      ].join(',')).join('\\n');\n\n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', 'attachment; filename=\"tickets-export.csv\"');\n      res.send(csvHeader + csvData);\n    } catch (error) {\n      console.error(\"Error exporting tickets:\", error);\n      res.status(500).json({ message: \"Failed to export tickets\" });\n    }\n  });\n\n  app.get('/api/export/attendees', requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const attendees = await storage.getBookings();\n      const confirmedAttendees = attendees.filter(booking => booking.status === 'confirmed');\n      \n      // Convert to CSV format\n      const csvHeader = 'Name,Email,Event,Tickets,Date,Amount\\n';\n      const csvData = confirmedAttendees.map(attendee => [\n        attendee.attendeeName,\n        attendee.attendeeEmail,\n        attendee.event?.name || 'Unknown',\n        attendee.quantity,\n        attendee.createdAt ? new Date(attendee.createdAt).toLocaleDateString() : '',\n        attendee.totalAmount\n      ].join(',')).join('\\n');\n\n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', 'attachment; filename=\"attendees-export.csv\"');\n      res.send(csvHeader + csvData);\n    } catch (error) {\n      console.error(\"Error exporting attendees:\", error);\n      res.status(500).json({ message: \"Failed to export attendees\" });\n    }\n  });\n\n  // Bulk notification route - Admin only\n  app.post('/api/notifications/bulk', requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { title, message, eventId } = req.body;\n      \n      if (!title || !message) {\n        return res.status(400).json({ message: \"Title and message are required\" });\n      }\n\n      // Get attendees for the event or all attendees if no eventId specified\n      let attendees;\n      if (eventId) {\n        attendees = await storage.getBookings(undefined, parseInt(eventId));\n      } else {\n        attendees = await storage.getBookings();\n      }\n\n      const confirmedAttendees = attendees.filter(booking => booking.status === 'confirmed');\n      \n      // Create notifications for all attendees\n      const notifications = [];\n      for (const attendee of confirmedAttendees) {\n        const notification = await storage.createNotification({\n          userId: attendee.userId,\n          type: 'admin_announcement',\n          title: title,\n          message: message,\n          isRead: false\n        });\n        notifications.push(notification);\n\n        // Send email notification\n        try {\n          await transporter.sendMail({\n            from: process.env.EMAIL_USER,\n            to: attendee.attendeeEmail,\n            subject: title,\n            html: `\n              <div style=\"font-family: 'Inter', Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n                <h2 style=\"color: #8B5CF6; text-align: center;\">${title}</h2>\n                <div style=\"background: #f8fafc; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n                  <p style=\"white-space: pre-wrap; color: #374151;\">${message}</p>\n                </div>\n                <div style=\"text-align: center; margin: 30px 0;\">\n                  <p style=\"color: #6b7280;\">Best regards,<br>EventMaster Team</p>\n                </div>\n              </div>\n            `,\n          });\n        } catch (emailError) {\n          console.error(\"Error sending email to\", attendee.attendeeEmail, emailError);\n        }\n      }\n\n      res.json({ \n        message: `Notifications sent to ${notifications.length} attendees`,\n        count: notifications.length \n      });\n    } catch (error) {\n      console.error(\"Error sending bulk notifications:\", error);\n      res.status(500).json({ message: \"Failed to send notifications\" });\n    }\n  });\n\n  // Analytics routes - Admin only\n  app.get('/api/analytics/revenue', requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const revenueData = await storage.getRevenueAnalytics();\n      res.json(revenueData);\n    } catch (error) {\n      console.error(\"Error fetching revenue analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch revenue analytics\" });\n    }\n  });\n\n  app.get('/api/reports/generate', requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      // Generate comprehensive report\n      const [dashboardStats, revenueData, attendeeData, eventData] = await Promise.all([\n        storage.getDashboardStats(),\n        storage.getRevenueAnalytics(),\n        storage.getAttendeeAnalytics(),\n        storage.getEventAnalytics(),\n      ]);\n\n      const report = {\n        generatedAt: new Date().toISOString(),\n        summary: dashboardStats,\n        revenue: revenueData,\n        attendees: attendeeData,\n        events: eventData,\n      };\n\n      res.json(report);\n    } catch (error) {\n      console.error(\"Error generating report:\", error);\n      res.status(500).json({ message: \"Failed to generate report\" });\n    }\n  });\n\n  app.get('/api/analytics/attendees', requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const attendeeData = await storage.getAttendeeAnalytics();\n      res.json(attendeeData);\n    } catch (error) {\n      console.error(\"Error fetching attendee analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch attendee analytics\" });\n    }\n  });\n\n  app.get('/api/analytics/events', requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const eventData = await storage.getEventAnalytics();\n      res.json(eventData);\n    } catch (error) {\n      console.error(\"Error fetching event analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch event analytics\" });\n    }\n  });\n\n  // Auth0 authentication routes\n  app.get('/api/auth/login', passport.authenticate('auth0', {\n    scope: 'openid email profile'\n  }));\n\n  app.get('/api/auth/callback', \n    passport.authenticate('auth0', { failureRedirect: '/auth?error=auth_failed' }),\n    (req, res) => {\n      // Successful authentication, redirect to events page\n      res.redirect('/events');\n    }\n  );\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":43821},"server/storage.ts":{"content":"import {\n  type User,\n  type UpsertUser,\n  type Event,\n  type InsertEvent,\n  type Booking,\n  type InsertBooking,\n  type EventWithBookings,\n  type BookingWithEvent,\n  type Notification,\n  type InsertNotification,\n  type ContactMessage,\n  type InsertContactMessage,\n} from \"@shared/schema\";\n\nexport interface IStorage {\n  // User operations (supports Auth0 and local auth)\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUsers(): Promise<User[]>;\n  upsertUser(user: Partial<UpsertUser> & { id: string }): Promise<User>;\n  createUser(user: Partial<UpsertUser> & { email: string }): Promise<User>;\n  \n  // Event operations\n  createEvent(event: InsertEvent): Promise<Event>;\n  getEvents(filters?: { search?: string; category?: string; status?: string }): Promise<Event[]>;\n  getEvent(id: number): Promise<EventWithBookings | undefined>;\n  updateEvent(id: number, updates: Partial<InsertEvent>): Promise<Event>;\n  deleteEvent(id: number): Promise<void>;\n  updateEventAttendeeCount(eventId: number): Promise<void>;\n  \n  // Booking operations\n  createBooking(booking: InsertBooking): Promise<Booking>;\n  getBookings(userId?: string, eventId?: number): Promise<BookingWithEvent[]>;\n  getBooking(id: number): Promise<BookingWithEvent | undefined>;\n  getBookingByReference(reference: string): Promise<BookingWithEvent | undefined>;\n  updateBookingStatus(id: number, status: string, paymentIntentId?: string): Promise<Booking>;\n  \n  // Analytics\n  getDashboardStats(): Promise<{\n    totalEvents: number;\n    totalAttendees: number;\n    totalRevenue: number;\n    conversionRate: number;\n  }>;\n  getRevenueAnalytics(): Promise<any>;\n  getAttendeeAnalytics(): Promise<any>;\n  getEventAnalytics(): Promise<any>;\n  \n  // Notification operations\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  getNotifications(userId: string): Promise<Notification[]>;\n  markNotificationAsRead(id: number, userId: string): Promise<Notification>;\n  markAllNotificationsAsRead(userId: string): Promise<void>;\n  deleteNotification(id: number, userId: string): Promise<void>;\n  \n  // Contact message operations\n  createContactMessage(message: InsertContactMessage): Promise<ContactMessage>;\n  getContactMessages(): Promise<ContactMessage[]>;\n  updateContactMessageStatus(id: number, status: string): Promise<ContactMessage>;\n  \n  // Sample data\n  createSampleEvents(): Promise<void>;\n}\n\nexport class MemStorage implements IStorage {\n  private users = new Map<string, User>();\n  private events = new Map<number, Event>();\n  private bookings = new Map<number, Booking>();\n  private notifications = new Map<number, Notification>();\n  private contactMessages = new Map<number, ContactMessage>();\n  private nextEventId = 1;\n  private nextBookingId = 1;\n  private nextNotificationId = 1;\n  private nextContactMessageId = 1;\n\n  constructor() {\n    this.createSampleEvents();\n  }\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async getUsers(): Promise<User[]> {\n    return Array.from(this.users.values()).sort((a, b) => \n      new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime()\n    );\n  }\n\n  async upsertUser(userData: Partial<UpsertUser> & { id: string }): Promise<User> {\n    const now = new Date();\n    const existingUser = this.users.get(userData.id);\n    \n    const user: User = {\n      id: userData.id,\n      email: userData.email || existingUser?.email || '',\n      firstName: userData.firstName !== undefined ? userData.firstName : existingUser?.firstName || null,\n      lastName: userData.lastName !== undefined ? userData.lastName : existingUser?.lastName || null,\n      username: userData.username !== undefined ? userData.username : existingUser?.username || null,\n      password: userData.password !== undefined ? userData.password : existingUser?.password || null,\n      profileImageUrl: userData.profileImageUrl !== undefined ? userData.profileImageUrl : existingUser?.profileImageUrl || null,\n      isAdmin: userData.isAdmin !== undefined ? userData.isAdmin : existingUser?.isAdmin || false,\n      stripeCustomerId: existingUser?.stripeCustomerId || null,\n      authProvider: userData.authProvider || existingUser?.authProvider || 'local',\n      authProviderId: userData.authProviderId !== undefined ? userData.authProviderId : existingUser?.authProviderId || null,\n      createdAt: existingUser?.createdAt || now,\n      updatedAt: now,\n    };\n    \n    this.users.set(userData.id, user);\n    return user;\n  }\n\n  async createUser(userData: Partial<UpsertUser> & { email: string }): Promise<User> {\n    const id = `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const now = new Date();\n    \n    const user: User = {\n      id,\n      email: userData.email,\n      firstName: userData.firstName || null,\n      lastName: userData.lastName || null,\n      username: userData.username || null,\n      password: userData.password || null,\n      profileImageUrl: userData.profileImageUrl || null,\n      isAdmin: userData.isAdmin || false,\n      stripeCustomerId: null,\n      authProvider: userData.authProvider || 'local',\n      authProviderId: userData.authProviderId || null,\n      createdAt: now,\n      updatedAt: now,\n    };\n    \n    this.users.set(id, user);\n    return user;\n  }\n\n  // Event operations\n  async createEvent(event: InsertEvent): Promise<Event> {\n    const now = new Date();\n    const newEvent: Event = {\n      id: this.nextEventId++,\n      name: event.name,\n      description: event.description || null,\n      category: event.category,\n      startDate: event.startDate,\n      endDate: event.endDate,\n      location: event.location,\n      ticketPrice: event.ticketPrice,\n      maxAttendees: event.maxAttendees,\n      currentAttendees: 0,\n      status: event.status || 'draft',\n      imageUrl: event.imageUrl || null,\n      createdBy: event.createdBy,\n      createdAt: now,\n      updatedAt: now,\n    };\n    \n    this.events.set(newEvent.id, newEvent);\n    return newEvent;\n  }\n\n  async getEvents(filters?: { search?: string; category?: string; status?: string }): Promise<Event[]> {\n    let events = Array.from(this.events.values());\n    \n    if (filters?.search) {\n      const searchLower = filters.search.toLowerCase();\n      events = events.filter(event => \n        event.name.toLowerCase().includes(searchLower) ||\n        (event.description && event.description.toLowerCase().includes(searchLower))\n      );\n    }\n    \n    if (filters?.category) {\n      events = events.filter(event => event.category === filters.category);\n    }\n    \n    if (filters?.status) {\n      events = events.filter(event => event.status === filters.status);\n    }\n    \n    return events.sort((a, b) => new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime());\n  }\n\n  async getEvent(id: number): Promise<EventWithBookings | undefined> {\n    const event = this.events.get(id);\n    if (!event) return undefined;\n    \n    const eventBookings = Array.from(this.bookings.values()).filter(booking => booking.eventId === id);\n    const creator = this.users.get(event.createdBy);\n    \n    return {\n      ...event,\n      bookings: eventBookings,\n      creator: creator!,\n    };\n  }\n\n  async updateEvent(id: number, updates: Partial<InsertEvent>): Promise<Event> {\n    const event = this.events.get(id);\n    if (!event) throw new Error('Event not found');\n    \n    const updatedEvent: Event = {\n      ...event,\n      ...updates,\n      updatedAt: new Date(),\n    };\n    \n    this.events.set(id, updatedEvent);\n    return updatedEvent;\n  }\n\n  async deleteEvent(id: number): Promise<void> {\n    this.events.delete(id);\n    // Also delete related bookings\n    Array.from(this.bookings.entries())\n      .filter(([, booking]) => booking.eventId === id)\n      .forEach(([bookingId]) => this.bookings.delete(bookingId));\n  }\n\n  async updateEventAttendeeCount(eventId: number): Promise<void> {\n    const event = this.events.get(eventId);\n    if (!event) return;\n    \n    const confirmedBookings = Array.from(this.bookings.values())\n      .filter(booking => booking.eventId === eventId && booking.status === 'confirmed');\n    \n    const totalAttendees = confirmedBookings.reduce((sum, booking) => sum + booking.quantity, 0);\n    \n    this.events.set(eventId, {\n      ...event,\n      currentAttendees: totalAttendees,\n      updatedAt: new Date(),\n    });\n  }\n\n  // Booking operations\n  async createBooking(booking: InsertBooking): Promise<Booking> {\n    const now = new Date();\n    const reference = `BK${Date.now()}${Math.random().toString(36).substr(2, 4).toUpperCase()}`;\n    \n    const newBooking: Booking = {\n      id: this.nextBookingId++,\n      eventId: booking.eventId,\n      userId: booking.userId,\n      quantity: booking.quantity,\n      totalAmount: booking.totalAmount,\n      status: booking.status || 'pending',\n      stripePaymentIntentId: booking.stripePaymentIntentId || null,\n      bookingReference: reference,\n      attendeeEmail: booking.attendeeEmail,\n      attendeeName: booking.attendeeName,\n      createdAt: now,\n      updatedAt: now,\n    };\n    \n    this.bookings.set(newBooking.id, newBooking);\n    return newBooking;\n  }\n\n  async getBookings(userId?: string, eventId?: number): Promise<BookingWithEvent[]> {\n    let bookings = Array.from(this.bookings.values());\n    \n    if (userId) {\n      bookings = bookings.filter(booking => booking.userId === userId);\n    }\n    \n    if (eventId) {\n      bookings = bookings.filter(booking => booking.eventId === eventId);\n    }\n    \n    return bookings.map(booking => ({\n      ...booking,\n      event: this.events.get(booking.eventId)!,\n      user: this.users.get(booking.userId)!,\n    }));\n  }\n\n  async getBooking(id: number): Promise<BookingWithEvent | undefined> {\n    const booking = this.bookings.get(id);\n    if (!booking) return undefined;\n    \n    return {\n      ...booking,\n      event: this.events.get(booking.eventId)!,\n      user: this.users.get(booking.userId)!,\n    };\n  }\n\n  async getBookingByReference(reference: string): Promise<BookingWithEvent | undefined> {\n    const booking = Array.from(this.bookings.values()).find(b => b.bookingReference === reference);\n    if (!booking) return undefined;\n    \n    return {\n      ...booking,\n      event: this.events.get(booking.eventId)!,\n      user: this.users.get(booking.userId)!,\n    };\n  }\n\n  async updateBookingStatus(id: number, status: string, paymentIntentId?: string): Promise<Booking> {\n    const booking = this.bookings.get(id);\n    if (!booking) throw new Error('Booking not found');\n    \n    const updatedBooking: Booking = {\n      ...booking,\n      status,\n      stripePaymentIntentId: paymentIntentId || booking.stripePaymentIntentId,\n      updatedAt: new Date(),\n    };\n    \n    this.bookings.set(id, updatedBooking);\n    \n    // Update event attendee count if booking is confirmed or cancelled\n    if (status === 'confirmed' || status === 'cancelled') {\n      await this.updateEventAttendeeCount(booking.eventId);\n    }\n    \n    return updatedBooking;\n  }\n\n  // Analytics\n  async getDashboardStats(): Promise<{\n    totalEvents: number;\n    totalAttendees: number;\n    totalRevenue: number;\n    conversionRate: number;\n  }> {\n    const totalEvents = this.events.size;\n    const confirmedBookings = Array.from(this.bookings.values()).filter(b => b.status === 'confirmed');\n    const totalAttendees = confirmedBookings.reduce((sum, booking) => sum + booking.quantity, 0);\n    const totalRevenue = confirmedBookings.reduce((sum, booking) => sum + parseFloat(booking.totalAmount), 0);\n    const totalBookings = this.bookings.size;\n    const conversionRate = totalBookings > 0 ? (confirmedBookings.length / totalBookings) * 100 : 0;\n    \n    return {\n      totalEvents,\n      totalAttendees,\n      totalRevenue,\n      conversionRate,\n    };\n  }\n\n  async getRevenueAnalytics(): Promise<any> {\n    // Simple analytics - could be expanded\n    return [];\n  }\n\n  async getAttendeeAnalytics(): Promise<any> {\n    return [];\n  }\n\n  async getEventAnalytics(): Promise<any> {\n    return [];\n  }\n\n  // Notification operations\n  async createNotification(notification: InsertNotification): Promise<Notification> {\n    const now = new Date();\n    const newNotification: Notification = {\n      id: this.nextNotificationId++,\n      userId: notification.userId,\n      type: notification.type,\n      title: notification.title,\n      message: notification.message,\n      isRead: notification.isRead || false,\n      metadata: notification.metadata || null,\n      createdAt: now,\n    };\n    \n    this.notifications.set(newNotification.id, newNotification);\n    return newNotification;\n  }\n\n  async getNotifications(userId: string): Promise<Notification[]> {\n    return Array.from(this.notifications.values())\n      .filter(notification => notification.userId === userId)\n      .sort((a, b) => new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime());\n  }\n\n  async markNotificationAsRead(id: number, userId: string): Promise<Notification> {\n    const notification = this.notifications.get(id);\n    if (!notification || notification.userId !== userId) {\n      throw new Error('Notification not found');\n    }\n    \n    const updatedNotification = { ...notification, isRead: true };\n    this.notifications.set(id, updatedNotification);\n    return updatedNotification;\n  }\n\n  async markAllNotificationsAsRead(userId: string): Promise<void> {\n    Array.from(this.notifications.entries())\n      .filter(([, notification]) => notification.userId === userId && !notification.isRead)\n      .forEach(([id, notification]) => {\n        this.notifications.set(id, { ...notification, isRead: true });\n      });\n  }\n\n  async deleteNotification(id: number, userId: string): Promise<void> {\n    const notification = this.notifications.get(id);\n    if (notification && notification.userId === userId) {\n      this.notifications.delete(id);\n    }\n  }\n\n  // Contact message operations\n  async createContactMessage(message: InsertContactMessage): Promise<ContactMessage> {\n    const now = new Date();\n    const newMessage: ContactMessage = {\n      id: this.nextContactMessageId++,\n      name: message.name,\n      email: message.email,\n      subject: message.subject,\n      message: message.message,\n      status: message.status || 'new',\n      createdAt: now,\n      updatedAt: now,\n    };\n    \n    this.contactMessages.set(newMessage.id, newMessage);\n    return newMessage;\n  }\n\n  async getContactMessages(): Promise<ContactMessage[]> {\n    return Array.from(this.contactMessages.values())\n      .sort((a, b) => new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime());\n  }\n\n  async updateContactMessageStatus(id: number, status: string): Promise<ContactMessage> {\n    const message = this.contactMessages.get(id);\n    if (!message) throw new Error('Contact message not found');\n    \n    const updatedMessage: ContactMessage = {\n      ...message,\n      status,\n      updatedAt: new Date(),\n    };\n    \n    this.contactMessages.set(id, updatedMessage);\n    return updatedMessage;\n  }\n\n  // Sample data\n  async createSampleEvents(): Promise<void> {\n    // Create default admin user\n    const adminUser: User = {\n      id: 'admin_user',\n      email: 'akshadapastambh37@gmail.com',\n      firstName: 'Admin',\n      lastName: 'User',\n      username: 'admin',\n      password: 'Akshad@11',\n      profileImageUrl: null,\n      isAdmin: true,\n      stripeCustomerId: null,\n      authProvider: 'local',\n      authProviderId: null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.users.set(adminUser.id, adminUser);\n\n    // Create sample events\n    const sampleEvents = [\n      {\n        name: \"AI Revolution Conference 2025\",\n        description: \"Join industry leaders to explore the latest in artificial intelligence, machine learning, and the future of technology.\",\n        category: \"Technology\",\n        startDate: new Date('2025-09-15T09:00:00Z'),\n        endDate: new Date('2025-09-15T17:00:00Z'),\n        location: \"San Francisco Convention Center\",\n        ticketPrice: \"299.00\",\n        maxAttendees: 500,\n        status: \"active\",\n        imageUrl: \"https://images.unsplash.com/photo-1485827404703-89b55fcc595e?w=800\",\n        createdBy: adminUser.id,\n      },\n      {\n        name: \"Web Development Bootcamp\",\n        description: \"Intensive workshop covering React, Node.js, and modern full-stack development practices.\",\n        category: \"Technology\",\n        startDate: new Date('2025-08-20T10:00:00Z'),\n        endDate: new Date('2025-08-22T16:00:00Z'),\n        location: \"Tech Hub Downtown\",\n        ticketPrice: \"149.00\",\n        maxAttendees: 50,\n        status: \"active\",\n        imageUrl: \"https://images.unsplash.com/photo-1461749280684-dccba630e2f6?w=800\",\n        createdBy: adminUser.id,\n      },\n      {\n        name: \"Mobile App Development Summit\",\n        description: \"Learn the latest in iOS and Android development with hands-on workshops and expert speakers.\",\n        category: \"Technology\",\n        startDate: new Date('2025-10-05T09:00:00Z'),\n        endDate: new Date('2025-10-06T17:00:00Z'),\n        location: \"Innovation Center\",\n        ticketPrice: \"199.00\",\n        maxAttendees: 200,\n        status: \"upcoming\",\n        imageUrl: \"https://images.unsplash.com/photo-1551650975-87deedd944c3?w=800\",\n        createdBy: adminUser.id,\n      },\n    ];\n\n    for (const event of sampleEvents) {\n      await this.createEvent(event);\n    }\n  }\n}\n\n// Create and export storage instance - using MongoDB for data persistence\nimport { MongoStorage } from './mongodb-storage';\n\nconsole.log('Using MongoDB for data persistence with Gmail confirmations');\nexport const storage = new MongoStorage();","size_bytes":17897},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/mongodb-schema.ts":{"content":"import mongoose, { Schema, Document } from 'mongoose';\nimport { z } from 'zod';\n\n// Zod validation schemas\nexport const UserSchema = z.object({\n  id: z.string(),\n  email: z.string().email(),\n  username: z.string().optional().nullable(),\n  password: z.string().optional().nullable(),\n  firstName: z.string().optional().nullable(),\n  lastName: z.string().optional().nullable(),\n  profileImageUrl: z.string().optional().nullable(),\n  isAdmin: z.boolean().default(false),\n  authProvider: z.string().default('local'),\n  createdAt: z.date().default(() => new Date()),\n  updatedAt: z.date().default(() => new Date()),\n});\n\nexport const EventSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  description: z.string(),\n  startDate: z.date(),\n  endDate: z.date(),\n  location: z.string(),\n  ticketPrice: z.string(),\n  maxAttendees: z.number(),\n  currentAttendees: z.number().default(0),\n  category: z.string(),\n  status: z.enum(['draft', 'active', 'upcoming', 'completed']).default('active'),\n  imageUrl: z.string().optional().nullable(),\n  organizerId: z.string(),\n  createdAt: z.date().default(() => new Date()),\n  updatedAt: z.date().default(() => new Date()),\n});\n\nexport const BookingSchema = z.object({\n  id: z.string(),\n  eventId: z.string(),\n  userId: z.string(),\n  quantity: z.number(),\n  totalAmount: z.string(),\n  status: z.enum(['pending', 'confirmed', 'cancelled']).default('pending'),\n  stripePaymentIntentId: z.string().optional().nullable(),\n  bookingReference: z.string(),\n  attendeeEmail: z.string().email(),\n  attendeeName: z.string(),\n  createdAt: z.date().default(() => new Date()),\n  updatedAt: z.date().default(() => new Date()),\n});\n\nexport const NotificationSchema = z.object({\n  id: z.string(),\n  userId: z.string(),\n  title: z.string(),\n  message: z.string(),\n  type: z.enum(['info', 'success', 'warning', 'error']).default('info'),\n  isRead: z.boolean().default(false),\n  createdAt: z.date().default(() => new Date()),\n});\n\nexport const ContactMessageSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  email: z.string().email(),\n  subject: z.string(),\n  message: z.string(),\n  status: z.enum(['new', 'read', 'responded']).default('new'),\n  createdAt: z.date().default(() => new Date()),\n  updatedAt: z.date().default(() => new Date()),\n});\n\n// MongoDB Mongoose Schemas\nconst userMongoSchema = new Schema({\n  _id: { type: String, required: true },\n  email: { type: String, required: true, unique: true },\n  username: { type: String, default: null },\n  password: { type: String, default: null },\n  firstName: { type: String, default: null },\n  lastName: { type: String, default: null },\n  profileImageUrl: { type: String, default: null },\n  isAdmin: { type: Boolean, default: false },\n  stripeCustomerId: { type: String, default: null },\n  authProvider: { type: String, default: 'local' },\n  authProviderId: { type: String, default: null },\n  createdAt: { type: Date, default: Date.now },\n  updatedAt: { type: Date, default: Date.now },\n});\n\nconst eventMongoSchema = new Schema({\n  _id: { type: String, required: true },\n  name: { type: String, required: true },\n  description: { type: String, required: true },\n  startDate: { type: Date, required: true },\n  endDate: { type: Date, required: true },\n  location: { type: String, required: false, default: 'TBD' },\n  ticketPrice: { type: String, required: true },\n  maxAttendees: { type: Number, required: true },\n  currentAttendees: { type: Number, default: 0 },\n  category: { type: String, required: true },\n  status: { type: String, enum: ['draft', 'active', 'upcoming', 'completed'], default: 'active' },\n  imageUrl: { type: String, default: null },\n  organizerId: { type: String, required: true },\n  createdBy: { type: String, required: true }, // Add this field for compatibility\n  createdAt: { type: Date, default: Date.now },\n  updatedAt: { type: Date, default: Date.now },\n});\n\nconst bookingMongoSchema = new Schema({\n  _id: { type: String, required: true },\n  eventId: { type: String, required: true },\n  userId: { type: String, required: true },\n  quantity: { type: Number, required: true },\n  totalAmount: { type: String, required: true },\n  status: { type: String, enum: ['pending', 'confirmed', 'cancelled'], default: 'pending' },\n  stripePaymentIntentId: { type: String, default: null },\n  bookingReference: { type: String, required: true, unique: true },\n  attendeeEmail: { type: String, required: true },\n  attendeeName: { type: String, required: true },\n  createdAt: { type: Date, default: Date.now },\n  updatedAt: { type: Date, default: Date.now },\n});\n\nconst notificationMongoSchema = new Schema({\n  _id: { type: String, required: true },\n  userId: { type: String, required: true },\n  title: { type: String, required: true },\n  message: { type: String, required: true },\n  type: { type: String, enum: ['info', 'success', 'warning', 'error'], default: 'info' },\n  isRead: { type: Boolean, default: false },\n  createdAt: { type: Date, default: Date.now },\n});\n\nconst contactMessageMongoSchema = new Schema({\n  _id: { type: String, required: true },\n  name: { type: String, required: true },\n  email: { type: String, required: true },\n  subject: { type: String, required: true },\n  message: { type: String, required: true },\n  status: { type: String, enum: ['new', 'read', 'responded'], default: 'new' },\n  createdAt: { type: Date, default: Date.now },\n  updatedAt: { type: Date, default: Date.now },\n});\n\n// Export Mongoose models\nexport const UserModel = mongoose.model('User', userMongoSchema);\nexport const EventModel = mongoose.model('Event', eventMongoSchema);\nexport const BookingModel = mongoose.model('Booking', bookingMongoSchema);\nexport const NotificationModel = mongoose.model('Notification', notificationMongoSchema);\nexport const ContactMessageModel = mongoose.model('ContactMessage', contactMessageMongoSchema);\n\n// Type definitions to match existing schema\nexport interface User {\n  id: string;\n  email: string;\n  username: string | null;\n  password: string | null;\n  firstName: string | null;\n  lastName: string | null;\n  profileImageUrl: string | null;\n  isAdmin: boolean | null;\n  stripeCustomerId: string | null;\n  authProvider: string;\n  authProviderId: string | null;\n  createdAt: Date | null;\n  updatedAt: Date | null;\n}\n\nexport interface Event {\n  id: number;\n  name: string;\n  description: string | null;\n  startDate: Date;\n  endDate: Date;\n  location: string;\n  ticketPrice: string;\n  maxAttendees: number;\n  currentAttendees: number;\n  category: string;\n  status: string;\n  imageUrl: string | null;\n  createdBy: string;\n  createdAt: Date | null;\n  updatedAt: Date | null;\n}\n\nexport interface Booking {\n  id: number;\n  eventId: number;\n  userId: string;\n  quantity: number;\n  totalAmount: string;\n  status: string;\n  stripePaymentIntentId: string | null;\n  bookingReference: string;\n  attendeeEmail: string;\n  attendeeName: string;\n  createdAt: Date | null;\n  updatedAt: Date | null;\n}\n\nexport interface Notification {\n  id: number;\n  userId: string;\n  title: string;\n  message: string;\n  type: string;\n  isRead: boolean;\n  createdAt: Date | null;\n}\n\nexport interface ContactMessage {\n  id: number;\n  name: string;\n  email: string;\n  subject: string;\n  message: string;\n  status: string;\n  createdAt: Date | null;\n  updatedAt: Date | null;\n}\n\n// Insert types (without auto-generated fields)\nexport type UpsertUser = Omit<User, 'createdAt' | 'updatedAt'>;\nexport type InsertEvent = Omit<Event, 'id' | 'createdAt' | 'updatedAt'>;\nexport type InsertBooking = Omit<Booking, 'id' | 'createdAt' | 'updatedAt'>;\nexport type InsertNotification = Omit<Notification, 'id' | 'createdAt'>;\nexport type InsertContactMessage = Omit<ContactMessage, 'id' | 'createdAt' | 'updatedAt'>;\n\n// Extended types for joins\nexport type EventWithBookings = Event & {\n  bookings?: Booking[];\n};\n\nexport type BookingWithEvent = Booking & {\n  event?: Event;\n  user?: User;\n};","size_bytes":7870},"shared/schema.ts":{"content":"import {\n  pgTable,\n  text,\n  varchar,\n  timestamp,\n  jsonb,\n  index,\n  serial,\n  integer,\n  decimal,\n  boolean,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\n// Session storage table (required for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table (supports Auth0 and local auth)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().notNull(),\n  email: varchar(\"email\").unique().notNull(),\n  username: varchar(\"username\").unique(),\n  password: varchar(\"password\"), // For local auth fallback\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  isAdmin: boolean(\"is_admin\").default(false),\n  stripeCustomerId: varchar(\"stripe_customer_id\"),\n  authProvider: varchar(\"auth_provider\").default(\"local\"), // auth0, local\n  authProviderId: varchar(\"auth_provider_id\"), // Auth0 user ID\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Events table\nexport const events = pgTable(\"events\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  category: varchar(\"category\", { length: 100 }).notNull(),\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\").notNull(),\n  location: varchar(\"location\", { length: 255 }).notNull(),\n  ticketPrice: decimal(\"ticket_price\", { precision: 10, scale: 2 }).notNull(),\n  maxAttendees: integer(\"max_attendees\").notNull(),\n  currentAttendees: integer(\"current_attendees\").default(0),\n  status: varchar(\"status\", { length: 50 }).notNull().default(\"draft\"), // draft, active, upcoming, completed, cancelled\n  imageUrl: varchar(\"image_url\", { length: 500 }),\n  createdBy: varchar(\"created_by\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Bookings table\nexport const bookings = pgTable(\"bookings\", {\n  id: serial(\"id\").primaryKey(),\n  eventId: integer(\"event_id\").notNull(),\n  userId: varchar(\"user_id\").notNull(),\n  quantity: integer(\"quantity\").notNull().default(1),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  status: varchar(\"status\", { length: 50 }).notNull().default(\"pending\"), // pending, confirmed, cancelled, refunded\n  stripePaymentIntentId: varchar(\"stripe_payment_intent_id\"),\n  bookingReference: varchar(\"booking_reference\", { length: 20 }).notNull().unique(),\n  attendeeEmail: varchar(\"attendee_email\").notNull(),\n  attendeeName: varchar(\"attendee_name\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  events: many(events),\n  bookings: many(bookings),\n  notifications: many(notifications),\n}));\n\nexport const eventsRelations = relations(events, ({ one, many }) => ({\n  creator: one(users, {\n    fields: [events.createdBy],\n    references: [users.id],\n  }),\n  bookings: many(bookings),\n}));\n\nexport const bookingsRelations = relations(bookings, ({ one }) => ({\n  event: one(events, {\n    fields: [bookings.eventId],\n    references: [events.id],\n  }),\n  user: one(users, {\n    fields: [bookings.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  stripeCustomerId: true,\n});\n\nexport const insertEventSchema = createInsertSchema(events).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  currentAttendees: true,\n});\n\nexport const insertBookingSchema = createInsertSchema(bookings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  bookingReference: true,\n});\n\n// Notifications table\nexport const notifications = pgTable(\"notifications\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull(),\n  type: varchar(\"type\", { length: 50 }).notNull(), // booking_confirmed, payment_success, event_reminder, etc.\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  message: text(\"message\").notNull(),\n  isRead: boolean(\"is_read\").default(false),\n  metadata: jsonb(\"metadata\"), // Additional data like eventId, bookingId, etc.\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Contact messages table\nexport const contactMessages = pgTable(\"contact_messages\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  email: varchar(\"email\", { length: 255 }).notNull(),\n  subject: varchar(\"subject\", { length: 255 }).notNull(),\n  message: text(\"message\").notNull(),\n  status: varchar(\"status\", { length: 20 }).default(\"new\"), // new, read, replied, closed\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Types\nexport type UpsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertEvent = z.infer<typeof insertEventSchema>;\nexport type Event = typeof events.$inferSelect;\nexport type InsertBooking = z.infer<typeof insertBookingSchema>;\nexport type Booking = typeof bookings.$inferSelect;\n\n// Extended types for API responses\nexport type EventWithBookings = Event & {\n  bookings: Booking[];\n  creator: User;\n};\n\nexport type BookingWithEvent = Booking & {\n  event: Event;\n  user: User;\n};\n\n// Notification types\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertContactMessageSchema = createInsertSchema(contactMessages).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertContactMessage = z.infer<typeof insertContactMessageSchema>;\nexport type ContactMessage = typeof contactMessages.$inferSelect;\n\n// Add notification relations after table definition\nexport const notificationsRelations = relations(notifications, ({ one }) => ({\n  user: one(users, {\n    fields: [notifications.userId],\n    references: [users.id],\n  }),\n}));\n","size_bytes":6463},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth, AuthProvider } from \"@/hooks/use-auth\";\nimport { ProtectedRoute } from \"./lib/protected-route\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport Events from \"@/pages/events\";\nimport EventDetails from \"@/pages/event-details\";\nimport Checkout from \"@/pages/checkout\";\nimport AuthPage from \"@/pages/auth-page\";\nimport About from \"@/pages/about\";\nimport Contact from \"@/pages/contact\";\nimport Users from \"@/pages/users\";\nimport Profile from \"@/pages/profile\";\nimport MyTickets from \"@/pages/my-tickets\";\nimport type { User } from \"@shared/schema\";\n\nfunction Router() {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {/* Public routes */}\n      <Route path=\"/\" component={user ? (user.isAdmin ? AdminDashboard : Events) : Landing} />\n      <Route path=\"/events\" component={Events} />\n      <Route path=\"/events/:id\" component={EventDetails} />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/contact\" component={Contact} />\n      <Route path=\"/login\" component={AuthPage} />\n      <Route path=\"/auth\" component={AuthPage} />\n      \n      {/* Protected routes */}\n      <ProtectedRoute path=\"/admin\" component={AdminDashboard} />\n      <ProtectedRoute path=\"/admin/users\" component={Users} />\n      <ProtectedRoute path=\"/profile\" component={Profile} />\n      <ProtectedRoute path=\"/my-tickets\" component={MyTickets} />\n      <ProtectedRoute path=\"/checkout/:bookingId\" component={Checkout} />\n      \n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2373},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(225, 15%, 10%);\n  --muted: hsl(225, 25%, 97%);\n  --muted-foreground: hsl(225, 10%, 45%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(225, 15%, 10%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(225, 15%, 10%);\n  --border: hsl(225, 20%, 90%);\n  --input: hsl(225, 20%, 90%);\n  --primary: hsl(262, 83%, 58%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(225, 25%, 95%);\n  --secondary-foreground: hsl(225, 15%, 15%);\n  --accent: hsl(262, 83%, 96%);\n  --accent-foreground: hsl(262, 83%, 25%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(262, 83%, 58%);\n  --radius: 0.75rem;\n\n  /* Custom EventMaster theme colors */\n  --gradient-primary: linear-gradient(135deg, hsl(262, 83%, 58%) 0%, hsl(230, 85%, 65%) 100%);\n  --gradient-secondary: linear-gradient(135deg, hsl(225, 25%, 97%) 0%, hsl(225, 25%, 93%) 100%);\n  --gradient-accent: linear-gradient(135deg, hsl(45, 93%, 85%) 0%, hsl(30, 95%, 88%) 100%);\n  \n  --primary-50: hsl(262, 83%, 98%);\n  --primary-100: hsl(262, 83%, 95%);\n  --primary-500: hsl(262, 83%, 58%);\n  --primary-600: hsl(262, 83%, 50%);\n  --primary-700: hsl(262, 83%, 42%);\n  \n  --accent-yellow: hsl(45, 93%, 65%);\n  --accent-orange: hsl(30, 95%, 68%);\n  --success-green: hsl(142, 76%, 45%);\n  --warning-amber: hsl(38, 92%, 50%);\n}\n\n.dark {\n  --background: hsl(225, 15%, 6%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(225, 15%, 12%);\n  --muted-foreground: hsl(225, 10%, 60%);\n  --popover: hsl(225, 15%, 8%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(225, 15%, 8%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(225, 15%, 18%);\n  --input: hsl(225, 15%, 18%);\n  --primary: hsl(262, 83%, 65%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(225, 15%, 12%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(225, 15%, 18%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62%, 50%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(262, 83%, 65%);\n  --radius: 0.75rem;\n  \n  --gradient-primary: linear-gradient(135deg, hsl(262, 83%, 65%) 0%, hsl(230, 85%, 70%) 100%);\n  --gradient-secondary: linear-gradient(135deg, hsl(225, 15%, 12%) 0%, hsl(225, 15%, 16%) 100%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply antialiased bg-background text-foreground;\n    font-family: 'Inter', system-ui, -apple-system, sans-serif;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    font-family: 'Poppins', system-ui, -apple-system, sans-serif;\n    font-weight: 600;\n  }\n\n  .font-display {\n    font-family: 'Playfair Display', Georgia, serif;\n  }\n\n  .gradient-text {\n    background: var(--gradient-primary);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n\n  .card-gradient {\n    background: var(--gradient-secondary);\n  }\n\n  .dark .card-gradient {\n    background: var(--gradient-secondary);\n  }\n\n  .glass-effect {\n    backdrop-filter: blur(10px);\n    background: rgba(255, 255, 255, 0.1);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n  }\n\n  .dark .glass-effect {\n    background: rgba(0, 0, 0, 0.3);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n  }\n\n  .animate-float {\n    animation: float 6s ease-in-out infinite;\n  }\n\n  @keyframes float {\n    0%, 100% { transform: translateY(0px); }\n    50% { transform: translateY(-20px); }\n  }\n\n  .animate-pulse-slow {\n    animation: pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n  }\n\n  .shadow-glow {\n    box-shadow: 0 0 20px rgba(138, 43, 226, 0.3);\n  }\n\n  .dark .shadow-glow {\n    box-shadow: 0 0 25px rgba(147, 51, 234, 0.4);\n  }\n}\n\n@layer utilities {\n  .bg-primary-50 {\n    background-color: var(--primary-50);\n  }\n  .bg-primary-100 {\n    background-color: var(--primary-100);\n  }\n  .bg-primary-500 {\n    background-color: var(--primary-500);\n  }\n  .bg-primary-600 {\n    background-color: var(--primary-600);\n  }\n  .bg-primary-700 {\n    background-color: var(--primary-700);\n  }\n  \n  .text-primary-500 {\n    color: var(--primary-500);\n  }\n  .text-primary-600 {\n    color: var(--primary-600);\n  }\n  .text-primary-700 {\n    color: var(--primary-700);\n  }\n  \n  .text-slate-50 {\n    color: var(--slate-50);\n  }\n  .text-slate-100 {\n    color: var(--slate-100);\n  }\n  .text-slate-400 {\n    color: var(--slate-400);\n  }\n  .text-slate-500 {\n    color: var(--slate-500);\n  }\n  .text-slate-600 {\n    color: var(--slate-600);\n  }\n  .text-slate-700 {\n    color: var(--slate-700);\n  }\n  .text-slate-800 {\n    color: var(--slate-800);\n  }\n  \n  .bg-slate-50 {\n    background-color: var(--slate-50);\n  }\n  .bg-slate-100 {\n    background-color: var(--slate-100);\n  }\n  .bg-slate-200 {\n    background-color: var(--slate-200);\n  }\n  \n  .border-slate-200 {\n    border-color: var(--slate-200);\n  }\n  .border-slate-300 {\n    border-color: var(--slate-300);\n  }\n  \n  .hover\\:bg-slate-50:hover {\n    background-color: var(--slate-50);\n  }\n  .hover\\:bg-slate-100:hover {\n    background-color: var(--slate-100);\n  }\n  .hover\\:text-slate-800:hover {\n    color: var(--slate-800);\n  }\n  \n  .hover\\:bg-primary-600:hover {\n    background-color: var(--primary-600);\n  }\n  .hover\\:text-primary-800:hover {\n    color: var(--primary-700);\n  }\n}\n","size_bytes":5309},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/admin-sidebar.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Calendar, BarChart3, Users, Ticket, Settings, Eye } from \"lucide-react\";\n\ninterface AdminSidebarProps {\n  activeTab: string;\n  onTabChange: (tab: string) => void;\n  user: any;\n}\n\nexport default function AdminSidebar({ activeTab, onTabChange, user }: AdminSidebarProps) {\n  const navItems = [\n    { id: \"dashboard\", label: \"Dashboard\", icon: BarChart3 },\n    { id: \"events\", label: \"Events\", icon: Calendar },\n    { id: \"attendees\", label: \"Attendees\", icon: Users },\n    { id: \"tickets\", label: \"Tickets\", icon: Ticket },\n    { id: \"analytics\", label: \"Analytics\", icon: BarChart3 },\n    { id: \"users\", label: \"User View\", icon: Eye },\n  ];\n\n  return (\n    <div className=\"fixed left-0 top-0 h-full w-64 bg-white shadow-lg border-r border-slate-200 z-30\">\n      <div className=\"p-6 border-b border-slate-200\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-primary-500 rounded-lg flex items-center justify-center\">\n            <Calendar className=\"text-white h-6 w-6\" />\n          </div>\n          <div>\n            <h2 className=\"text-xl font-bold text-slate-800\">EventMaster</h2>\n            <p className=\"text-sm text-slate-500\">Admin Panel</p>\n          </div>\n        </div>\n      </div>\n      \n      <nav className=\"p-4 space-y-2\">\n        {navItems.map((item) => {\n          const Icon = item.icon;\n          const isActive = activeTab === item.id;\n          \n          return (\n            <Button\n              key={item.id}\n              variant={isActive ? \"default\" : \"ghost\"}\n              className={`w-full justify-start ${\n                isActive \n                  ? \"bg-primary-50 text-primary-700 hover:bg-primary-100\" \n                  : \"text-slate-600 hover:bg-slate-50\"\n              }`}\n              onClick={() => {\n                if (item.id === \"users\") {\n                  window.location.href = \"/admin/users\";\n                } else {\n                  onTabChange(item.id);\n                }\n              }}\n            >\n              <Icon className=\"w-5 h-5 mr-3\" />\n              {item.label}\n            </Button>\n          );\n        })}\n      </nav>\n\n      <div className=\"absolute bottom-4 left-4 right-4\">\n        <div className=\"bg-slate-100 rounded-lg p-3\">\n          <div className=\"flex items-center space-x-3\">\n            <img \n              src={user?.profileImageUrl || `https://api.dicebear.com/7.x/initials/svg?seed=${user?.firstName} ${user?.lastName}`}\n              alt=\"Admin Profile\" \n              className=\"w-10 h-10 rounded-full object-cover\"\n            />\n            <div className=\"flex-1 min-w-0\">\n              <p className=\"font-medium text-slate-800 truncate\">\n                {user?.firstName} {user?.lastName}\n              </p>\n              <p className=\"text-xs text-slate-500\">Administrator</p>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => window.location.href = '/profile'}\n              className=\"p-2 hover:bg-slate-200\"\n              title=\"Profile Settings\"\n            >\n              <Settings className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3268},"client/src/components/create-event-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertEventSchema } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Calendar, X } from \"lucide-react\";\nimport { z } from \"zod\";\n\nconst eventFormSchema = insertEventSchema.omit({ createdBy: true }).extend({\n  startDate: z.string().min(1, \"Start date is required\"),\n  endDate: z.string().min(1, \"End date is required\"),\n  ticketPrice: z.string().min(1, \"Ticket price is required\"),\n  maxAttendees: z.string().min(1, \"Max attendees is required\"),\n});\n\ntype EventFormData = z.infer<typeof eventFormSchema>;\n\ninterface CreateEventModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function CreateEventModal({ isOpen, onClose }: CreateEventModalProps) {\n  const { toast } = useToast();\n\n  const form = useForm<EventFormData>({\n    resolver: zodResolver(eventFormSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      category: \"\",\n      startDate: \"\",\n      endDate: \"\",\n      location: \"\",\n      ticketPrice: \"\",\n      maxAttendees: \"\",\n      status: \"draft\",\n      imageUrl: \"\",\n    },\n  });\n\n  const createEventMutation = useMutation({\n    mutationFn: async (data: EventFormData) => {\n      console.log('Frontend form data:', data);\n      \n      const eventData = {\n        ...data,\n        startDate: data.startDate, // Keep as string, backend will handle conversion\n        endDate: data.endDate,     // Keep as string, backend will handle conversion\n        ticketPrice: data.ticketPrice,\n        maxAttendees: data.maxAttendees, // Keep as string, backend will handle conversion\n      };\n      \n      console.log('Sending to API:', eventData);\n      \n      const response = await apiRequest(\"POST\", \"/api/events\", eventData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Event Created\",\n        description: \"Your event has been created successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      form.reset();\n      onClose();\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      \n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create event\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: EventFormData) => {\n    createEventMutation.mutate(data);\n  };\n\n  const handleClose = () => {\n    form.reset();\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <Calendar className=\"h-5 w-5\" />\n              <span>Create New Event</span>\n            </div>\n            <Button variant=\"ghost\" size=\"sm\" onClick={handleClose}>\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Event Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter event name\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"category\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Category</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select category\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"conference\">Conference</SelectItem>\n                        <SelectItem value=\"workshop\">Workshop</SelectItem>\n                        <SelectItem value=\"festival\">Festival</SelectItem>\n                        <SelectItem value=\"meetup\">Meetup</SelectItem>\n                        <SelectItem value=\"seminar\">Seminar</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Event description\"\n                      className=\"min-h-[100px]\"\n                      {...field} \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"startDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Start Date & Time</FormLabel>\n                    <FormControl>\n                      <Input type=\"datetime-local\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"endDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>End Date & Time</FormLabel>\n                    <FormControl>\n                      <Input type=\"datetime-local\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"location\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Location</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Event venue or address\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"ticketPrice\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Ticket Price ($)</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        step=\"0.01\" \n                        placeholder=\"0.00\" \n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"maxAttendees\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Max Attendees</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        placeholder=\"100\" \n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"status\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Status</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select status\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"draft\">Draft</SelectItem>\n                        <SelectItem value=\"active\">Active</SelectItem>\n                        <SelectItem value=\"upcoming\">Upcoming</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"imageUrl\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Event Image URL (Optional)</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"https://example.com/image.jpg\" \n                      {...field} \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex items-center justify-end space-x-4 pt-6 border-t\">\n              <Button type=\"button\" variant=\"outline\" onClick={handleClose}>\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createEventMutation.isPending}\n                className=\"bg-primary-500 hover:bg-primary-600\"\n              >\n                {createEventMutation.isPending ? (\n                  <>\n                    <div className=\"animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full mr-2\" />\n                    Creating...\n                  </>\n                ) : (\n                  \"Create Event\"\n                )}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":11547},"client/src/components/edit-event-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Calendar, X } from \"lucide-react\";\n\nconst eventFormSchema = z.object({\n  name: z.string().min(1, \"Event name is required\"),\n  description: z.string().min(1, \"Description is required\"),\n  category: z.string().min(1, \"Category is required\"),\n  startDate: z.string().min(1, \"Start date is required\"),\n  endDate: z.string().min(1, \"End date is required\"),\n  location: z.string().min(1, \"Location is required\"),\n  ticketPrice: z.string().min(1, \"Ticket price is required\"),\n  maxAttendees: z.string().min(1, \"Max attendees is required\"),\n  status: z.enum([\"draft\", \"active\", \"upcoming\", \"completed\", \"cancelled\"]),\n  imageUrl: z.string().optional(),\n});\n\ntype EventFormData = z.infer<typeof eventFormSchema>;\n\ninterface EditEventModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  event: any;\n}\n\nexport default function EditEventModal({ isOpen, onClose, event }: EditEventModalProps) {\n  const { toast } = useToast();\n\n  const form = useForm<EventFormData>({\n    resolver: zodResolver(eventFormSchema),\n    defaultValues: {\n      name: event?.name || \"\",\n      description: event?.description || \"\",\n      category: event?.category || \"\",\n      startDate: event?.startDate ? new Date(event.startDate).toISOString().slice(0, 16) : \"\",\n      endDate: event?.endDate ? new Date(event.endDate).toISOString().slice(0, 16) : \"\",\n      location: event?.location || \"\",\n      ticketPrice: event?.ticketPrice || \"\",\n      maxAttendees: event?.maxAttendees?.toString() || \"\",\n      status: event?.status || \"draft\",\n      imageUrl: event?.imageUrl || \"\",\n    },\n  });\n\n  const updateEventMutation = useMutation({\n    mutationFn: async (data: EventFormData) => {\n      const eventData = {\n        ...data,\n        startDate: new Date(data.startDate).toISOString(),\n        endDate: new Date(data.endDate).toISOString(),\n        ticketPrice: data.ticketPrice,\n        maxAttendees: parseInt(data.maxAttendees),\n      };\n      \n      const response = await apiRequest(\"PUT\", `/api/events/${event.id}`, eventData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Event Updated\",\n        description: \"Your event has been updated successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      onClose();\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      \n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update event\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: EventFormData) => {\n    updateEventMutation.mutate(data);\n  };\n\n  const handleClose = () => {\n    form.reset();\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <Calendar className=\"h-5 w-5\" />\n              <span>Edit Event</span>\n            </div>\n            <Button variant=\"ghost\" size=\"sm\" onClick={handleClose}>\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Event Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter event name\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"category\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Category</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select category\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"conference\">Conference</SelectItem>\n                        <SelectItem value=\"workshop\">Workshop</SelectItem>\n                        <SelectItem value=\"festival\">Festival</SelectItem>\n                        <SelectItem value=\"meetup\">Meetup</SelectItem>\n                        <SelectItem value=\"seminar\">Seminar</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Enter event description\" \n                      className=\"resize-none\" \n                      rows={4} \n                      {...field} \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"startDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Start Date & Time</FormLabel>\n                    <FormControl>\n                      <Input type=\"datetime-local\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"endDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>End Date & Time</FormLabel>\n                    <FormControl>\n                      <Input type=\"datetime-local\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"location\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Location</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Enter event location\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"ticketPrice\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Ticket Price ($)</FormLabel>\n                    <FormControl>\n                      <Input type=\"number\" step=\"0.01\" placeholder=\"0.00\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"maxAttendees\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Max Attendees</FormLabel>\n                    <FormControl>\n                      <Input type=\"number\" placeholder=\"100\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"status\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Status</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select status\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"draft\">Draft</SelectItem>\n                        <SelectItem value=\"active\">Active</SelectItem>\n                        <SelectItem value=\"upcoming\">Upcoming</SelectItem>\n                        <SelectItem value=\"completed\">Completed</SelectItem>\n                        <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"imageUrl\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Image URL (Optional)</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"https://example.com/image.jpg\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex items-center justify-end space-x-4 pt-6 border-t\">\n              <Button type=\"button\" variant=\"outline\" onClick={handleClose}>\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={updateEventMutation.isPending}\n                className=\"bg-primary-500 hover:bg-primary-600\"\n              >\n                {updateEventMutation.isPending ? (\n                  <>\n                    <div className=\"animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full mr-2\" />\n                    Updating...\n                  </>\n                ) : (\n                  \"Update Event\"\n                )}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":11708},"client/src/components/event-card.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Calendar, MapPin, Users, DollarSign, Clock } from \"lucide-react\";\n\ninterface EventCardProps {\n  event: {\n    id: number;\n    name: string;\n    description: string;\n    category: string;\n    startDate: string;\n    endDate: string;\n    location: string;\n    ticketPrice: string;\n    maxAttendees: number;\n    currentAttendees: number;\n    status: string;\n    imageUrl?: string;\n  };\n}\n\nexport default function EventCard({ event }: EventCardProps) {\n  const handleViewDetails = () => {\n    window.location.href = `/events/${event.id}`;\n  };\n\n  const handleBookTicket = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    window.location.href = `/events/${event.id}`;\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'bg-green-100 text-green-800';\n      case 'upcoming':\n        return 'bg-blue-100 text-blue-800';\n      case 'completed':\n        return 'bg-gray-100 text-gray-800';\n      case 'draft':\n        return 'bg-yellow-100 text-yellow-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case 'conference':\n        return 'bg-blue-100 text-blue-800';\n      case 'workshop':\n        return 'bg-purple-100 text-purple-800';\n      case 'festival':\n        return 'bg-green-100 text-green-800';\n      case 'meetup':\n        return 'bg-orange-100 text-orange-800';\n      case 'seminar':\n        return 'bg-indigo-100 text-indigo-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const isEventFull = event.currentAttendees >= event.maxAttendees;\n  const isEventPast = new Date(event.endDate) < new Date();\n\n  return (\n    <Card \n      className=\"bg-white rounded-2xl shadow-lg overflow-hidden hover:shadow-xl transition-shadow cursor-pointer\"\n      onClick={handleViewDetails}\n    >\n      <div className=\"aspect-video w-full overflow-hidden\">\n        <img \n          src={event.imageUrl || \"https://images.unsplash.com/photo-1540575467063-178a50c2df87?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\"}\n          alt={event.name}\n          className=\"w-full h-full object-cover\"\n        />\n      </div>\n      \n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <Badge className={getCategoryColor(event.category)}>\n            {event.category}\n          </Badge>\n          <span className=\"text-slate-500 text-sm\">\n            {new Date(event.startDate).toLocaleDateString()}\n          </span>\n        </div>\n        \n        <h3 className=\"text-xl font-bold text-slate-800 mb-2 line-clamp-1\">\n          {event.name}\n        </h3>\n        \n        <p className=\"text-slate-600 mb-4 line-clamp-2\">\n          {event.description}\n        </p>\n        \n        <div className=\"space-y-2 mb-4\">\n          <div className=\"flex items-center space-x-2 text-slate-500 text-sm\">\n            <Calendar className=\"h-4 w-4\" />\n            <span>\n              {new Date(event.startDate).toLocaleDateString('en-US', { \n                month: 'short', \n                day: 'numeric', \n                year: 'numeric' \n              })}\n              {new Date(event.startDate).toLocaleDateString() !== new Date(event.endDate).toLocaleDateString() && \n                ` - ${new Date(event.endDate).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}`\n              }\n            </span>\n          </div>\n          \n          <div className=\"flex items-center space-x-2 text-slate-500 text-sm\">\n            <Clock className=\"h-4 w-4\" />\n            <span>\n              {new Date(event.startDate).toLocaleTimeString('en-US', { \n                hour: 'numeric', \n                minute: '2-digit',\n                hour12: true \n              })}\n              {new Date(event.startDate).toLocaleDateString() === new Date(event.endDate).toLocaleDateString() &&\n                ` - ${new Date(event.endDate).toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true })}`\n              }\n            </span>\n          </div>\n          \n          <div className=\"flex items-center space-x-2 text-slate-500 text-sm\">\n            <MapPin className=\"h-4 w-4\" />\n            <span className=\"truncate\">{event.location}</span>\n          </div>\n          \n          <div className=\"flex items-center space-x-2 text-slate-500 text-sm\">\n            <Users className=\"h-4 w-4\" />\n            <span className=\"font-medium text-slate-700\">{event.currentAttendees}</span>\n            <span className=\"text-slate-400\">/</span>\n            <span className=\"text-slate-400\">{event.maxAttendees} attending</span>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"text-right\">\n              <p className=\"text-sm text-slate-500\">Starting from</p>\n              <p className=\"text-lg font-bold text-primary-600\">\n                ${parseFloat(event.ticketPrice).toFixed(2)}\n              </p>\n            </div>\n            \n            <Badge className={getStatusColor(event.status)}>\n              {event.status}\n            </Badge>\n          </div>\n        </div>\n        \n        <Button \n          onClick={handleBookTicket}\n          disabled={isEventFull || isEventPast || event.status === 'draft'}\n          className=\"w-full mt-4 bg-primary-500 hover:bg-primary-600 disabled:bg-slate-300\"\n        >\n          {isEventPast ? \"Event Ended\" :\n           isEventFull ? \"Sold Out\" :\n           event.status === 'draft' ? \"Coming Soon\" :\n           \"Book Tickets\"}\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5877},"client/src/components/notification-center.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Bell, X, Check, Calendar, CreditCard, User, Settings } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface Notification {\n  id: number;\n  userId: string;\n  type: 'booking_confirmed' | 'payment_success' | 'event_reminder' | 'event_cancelled' | 'account_update';\n  title: string;\n  message: string;\n  isRead: boolean;\n  createdAt: string;\n  metadata?: {\n    eventId?: number;\n    bookingId?: number;\n    actionUrl?: string;\n  };\n}\n\ninterface NotificationCenterProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function NotificationCenter({ isOpen, onClose }: NotificationCenterProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: notifications = [], isLoading } = useQuery({\n    queryKey: ['/api/notifications'],\n    enabled: isOpen,\n  });\n\n  const markAsReadMutation = useMutation({\n    mutationFn: async (notificationId: number) => {\n      const response = await fetch(`/api/notifications/${notificationId}/read`, {\n        method: 'PATCH',\n      });\n      if (!response.ok) throw new Error('Failed to mark as read');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/notifications'] });\n    },\n  });\n\n  const markAllAsReadMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch('/api/notifications/mark-all-read', {\n        method: 'PATCH',  \n      });\n      if (!response.ok) throw new Error('Failed to mark all as read');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/notifications'] });\n      toast({\n        title: \"All notifications marked as read\",\n      });\n    },\n  });\n\n  const deleteNotificationMutation = useMutation({\n    mutationFn: async (notificationId: number) => {\n      const response = await fetch(`/api/notifications/${notificationId}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) throw new Error('Failed to delete notification');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/notifications'] });\n    },\n  });\n\n  const getNotificationIcon = (type: Notification['type']) => {\n    switch (type) {\n      case 'booking_confirmed':\n        return <Calendar className=\"w-5 h-5 text-green-500\" />;\n      case 'payment_success':\n        return <CreditCard className=\"w-5 h-5 text-blue-500\" />;\n      case 'event_reminder':\n        return <Bell className=\"w-5 h-5 text-orange-500\" />;\n      case 'event_cancelled':\n        return <X className=\"w-5 h-5 text-red-500\" />;\n      case 'account_update':\n        return <User className=\"w-5 h-5 text-purple-500\" />;\n      default:\n        return <Bell className=\"w-5 h-5 text-gray-500\" />;\n    }\n  };\n\n  const handleNotificationClick = (notification: Notification) => {\n    if (!notification.isRead) {\n      markAsReadMutation.mutate(notification.id);\n    }\n\n    // Handle navigation based on notification type\n    if (notification.metadata?.actionUrl) {\n      window.location.href = notification.metadata.actionUrl;\n    } else if (notification.metadata?.eventId) {\n      window.location.href = `/event/${notification.metadata.eventId}`;\n    } else if (notification.metadata?.bookingId) {\n      window.location.href = '/my-tickets';\n    }\n  };\n\n  const unreadCount = notifications.filter((n: Notification) => !n.isRead).length;\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 z-50 flex items-start justify-end\">\n      <div className=\"w-full max-w-md h-full bg-background shadow-xl border-l\">\n        <Card className=\"h-full rounded-none border-0\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-4\">\n            <div>\n              <CardTitle className=\"text-lg\">Notifications</CardTitle>\n              {unreadCount > 0 && (\n                <Badge variant=\"secondary\" className=\"mt-1 text-xs\">\n                  {unreadCount} new\n                </Badge>\n              )}\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              {unreadCount > 0 && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => markAllAsReadMutation.mutate()}\n                  disabled={markAllAsReadMutation.isPending}\n                >\n                  <Check className=\"w-4 h-4 mr-1\" />\n                  Mark all read\n                </Button>\n              )}\n              <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n                <X className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </CardHeader>\n\n          <CardContent className=\"p-0\">\n            <ScrollArea className=\"h-[calc(100vh-120px)]\">\n              {isLoading ? (\n                <div className=\"p-6 text-center text-muted-foreground\">\n                  Loading notifications...\n                </div>\n              ) : notifications.length === 0 ? (\n                <div className=\"p-6 text-center text-muted-foreground\">\n                  <Bell className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                  <p>No notifications yet</p>\n                  <p className=\"text-sm\">We'll notify you about important updates</p>\n                </div>\n              ) : (\n                <div className=\"divide-y\">\n                  {notifications.map((notification: Notification) => (\n                    <div\n                      key={notification.id}\n                      className={`p-4 hover:bg-muted/50 cursor-pointer transition-colors ${\n                        !notification.isRead ? 'bg-primary/5 border-l-4 border-l-primary' : ''\n                      }`}\n                      onClick={() => handleNotificationClick(notification)}\n                    >\n                      <div className=\"flex items-start space-x-3\">\n                        <div className=\"flex-shrink-0 mt-1\">\n                          {getNotificationIcon(notification.type)}\n                        </div>\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center justify-between\">\n                            <h4 className={`text-sm font-medium ${!notification.isRead ? 'text-primary' : ''}`}>\n                              {notification.title}\n                            </h4>\n                            <div className=\"group opacity-0 hover:opacity-100\">\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                className=\"p-1 h-auto\"\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  deleteNotificationMutation.mutate(notification.id);\n                                }}\n                              >\n                                <X className=\"w-3 h-3\" />\n                              </Button>\n                            </div>\n                          </div>\n                          <p className=\"text-sm text-muted-foreground mt-1\">\n                            {notification.message}\n                          </p>\n                          <p className=\"text-xs text-muted-foreground mt-2\">\n                            {formatDistanceToNow(new Date(notification.createdAt), { addSuffix: true })}\n                          </p>\n                          {!notification.isRead && (\n                            <div className=\"w-2 h-2 bg-primary rounded-full absolute right-4 top-4\"></div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </ScrollArea>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\n// Notification Bell Component for Header\nexport function NotificationBell() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const { data: notifications = [] } = useQuery({\n    queryKey: ['/api/notifications'],\n    refetchInterval: 30000, // Refetch every 30 seconds\n  });\n\n  const unreadCount = notifications.filter((n: Notification) => !n.isRead).length;\n\n  return (\n    <>\n      <div className=\"relative\">\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => setIsOpen(true)}\n          className=\"relative\"\n        >\n          <Bell className=\"w-5 h-5\" />\n          {unreadCount > 0 && (\n            <Badge\n              className=\"absolute -top-1 -right-1 px-1 min-w-[18px] h-[18px] text-xs flex items-center justify-center\"\n              variant=\"destructive\"\n            >\n              {unreadCount > 99 ? '99+' : unreadCount}\n            </Badge>\n          )}\n        </Button>\n      </div>\n\n      <NotificationCenter isOpen={isOpen} onClose={() => setIsOpen(false)} />\n    </>\n  );\n}","size_bytes":9322},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { User as SelectUser } from \"@shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthContextType = {\n  user: SelectUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<SelectUser, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<SelectUser, Error, RegisterData>;\n};\n\ntype LoginData = {\n  email: string;\n  password: string;\n};\n\ntype RegisterData = {\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n  username: string;\n};\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SelectUser | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/auth/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Welcome back!\",\n        description: `Signed in as ${user.name || user.email}`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: RegisterData) => {\n      const res = await apiRequest(\"POST\", \"/api/auth/register\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Account created!\",\n        description: `Welcome to EventMaster, ${user.firstName}!`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      // Clear all query cache\n      queryClient.clear();\n      queryClient.setQueryData([\"/api/user\"], null);\n      toast({\n        title: \"Signed out\",\n        description: \"You have been successfully signed out\",\n      });\n      // Force navigation to auth page\n      setTimeout(() => {\n        window.location.href = '/auth';\n      }, 500);\n    },\n    onError: (error: Error) => {\n      console.error(\"Logout error:\", error);\n      // Even if logout fails on server, clear client state\n      queryClient.clear();\n      queryClient.setQueryData([\"/api/user\"], null);\n      window.location.href = '/auth';\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}","size_bytes":3576},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-border\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  return <Route path={path} component={Component} />;\n}","size_bytes":705},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/about.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { ArrowLeft, Calendar, Users, Globe, Heart } from \"lucide-react\";\n\nexport default function About() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-muted/30 to-primary/5\">\n      <div className=\"container mx-auto px-6 py-8\">\n        <div className=\"mb-8\">\n          <Button \n            variant=\"ghost\" \n            onClick={() => window.location.href = '/events'}\n            className=\"mb-4\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Events\n          </Button>\n          <h1 className=\"text-4xl font-bold gradient-text mb-2\">About EventMaster</h1>\n          <p className=\"text-muted-foreground text-lg\">Connecting the tech community through amazing events</p>\n        </div>\n\n        <div className=\"max-w-4xl mx-auto space-y-8\">\n          {/* Mission Section */}\n          <Card className=\"glass-effect\">\n            <CardContent className=\"p-8\">\n              <div className=\"text-center mb-6\">\n                <Calendar className=\"w-16 h-16 text-primary mx-auto mb-4\" />\n                <h2 className=\"text-3xl font-bold mb-4\">Our Mission</h2>\n                <p className=\"text-lg text-muted-foreground\">\n                  EventMaster is dedicated to bringing together technology professionals, enthusiasts, \n                  and learners through carefully curated events that inspire, educate, and connect.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Features Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            <Card className=\"glass-effect\">\n              <CardContent className=\"p-6 text-center\">\n                <Users className=\"w-12 h-12 text-primary mx-auto mb-4\" />\n                <h3 className=\"text-xl font-semibold mb-2\">Tech Community</h3>\n                <p className=\"text-muted-foreground\">\n                  Connect with like-minded developers, engineers, and tech professionals from around the world.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glass-effect\">\n              <CardContent className=\"p-6 text-center\">\n                <Globe className=\"w-12 h-12 text-primary mx-auto mb-4\" />\n                <h3 className=\"text-xl font-semibold mb-2\">Global Events</h3>\n                <p className=\"text-muted-foreground\">\n                  Discover conferences, workshops, meetups, and hackathons happening worldwide.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glass-effect\">\n              <CardContent className=\"p-6 text-center\">\n                <Heart className=\"w-12 h-12 text-primary mx-auto mb-4\" />\n                <h3 className=\"text-xl font-semibold mb-2\">Passion Driven</h3>\n                <p className=\"text-muted-foreground\">\n                  Built by developers for developers, with a focus on creating meaningful experiences.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Story Section */}\n          <Card className=\"glass-effect\">\n            <CardContent className=\"p-8\">\n              <h2 className=\"text-2xl font-bold mb-6\">Our Story</h2>\n              <div className=\"space-y-4 text-muted-foreground\">\n                <p>\n                  EventMaster was born from a simple observation: the tech community thrives when people \n                  come together to share knowledge, collaborate on projects, and inspire each other. \n                  However, finding quality tech events was often difficult and fragmented across \n                  multiple platforms.\n                </p>\n                <p>\n                  We created EventMaster to be the central hub for technology events, making it easy \n                  for organizers to reach their audience and for attendees to discover events that \n                  match their interests and skill levels.\n                </p>\n                <p>\n                  Whether you're a seasoned software architect looking for the latest in cloud computing, \n                  a startup founder interested in AI breakthroughs, or a student wanting to learn \n                  web development, EventMaster helps you find your place in the tech community.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Values Section */}\n          <Card className=\"glass-effect\">\n            <CardContent className=\"p-8\">\n              <h2 className=\"text-2xl font-bold mb-6\">Our Values</h2>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-2\">üåü Quality First</h3>\n                  <p className=\"text-muted-foreground\">\n                    We carefully curate events to ensure high-quality experiences for all attendees.\n                  </p>\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-2\">ü§ù Community Focused</h3>\n                  <p className=\"text-muted-foreground\">\n                    Building connections and fostering collaboration within the tech community.\n                  </p>\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-2\">üöÄ Innovation Driven</h3>\n                  <p className=\"text-muted-foreground\">\n                    Constantly improving our platform to better serve organizers and attendees.\n                  </p>\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-2\">üí° Learning Oriented</h3>\n                  <p className=\"text-muted-foreground\">\n                    Promoting continuous learning and professional development through events.\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* CTA Section */}\n          <Card className=\"glass-effect border-primary/20\">\n            <CardContent className=\"p-8 text-center\">\n              <h2 className=\"text-2xl font-bold mb-4\">Join the Community</h2>\n              <p className=\"text-muted-foreground mb-6\">\n                Ready to discover amazing tech events and connect with the community?\n              </p>\n              <Button \n                onClick={() => window.location.href = '/events'}\n                className=\"bg-primary hover:bg-primary/90\"\n                size=\"lg\"\n              >\n                Explore Events\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6789},"client/src/pages/admin-dashboard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport AdminSidebar from \"@/components/admin-sidebar\";\nimport CreateEventModal from \"@/components/create-event-modal\";\nimport EditEventModal from \"@/components/edit-event-modal\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Calendar, Users, DollarSign, TrendingUp, Plus, Download, Mail, BarChart3, CalendarDays, Filter, ArrowUpDown, Edit, Trash2, Eye, LogOut, User, Settings } from \"lucide-react\";\n\n// Export Functions\nconst exportAttendees = async () => {\n  try {\n    const response = await fetch('/api/export/attendees', {\n      method: 'GET',\n      credentials: 'include',\n    });\n    \n    if (response.ok) {\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'attendees-export.csv';\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n    }\n  } catch (error) {\n    console.error('Export failed:', error);\n  }\n};\n\nconst exportTickets = async () => {\n  try {\n    const response = await fetch('/api/export/tickets', {\n      method: 'GET',\n      credentials: 'include',\n    });\n    \n    if (response.ok) {\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'tickets-export.csv';\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n    }\n  } catch (error) {\n    console.error('Export failed:', error);\n  }\n};\n\n// Send Notification Modal Component\nfunction SendNotificationModal() {\n  const [title, setTitle] = useState('');\n  const [message, setMessage] = useState('');\n  const [eventId, setEventId] = useState('');\n  const [isOpen, setIsOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: events } = useQuery({\n    queryKey: [\"/api/events\"],\n    retry: false,\n  });\n\n  const sendNotificationMutation = useMutation({\n    mutationFn: async (data: { title: string; message: string; eventId?: string }) => {\n      return apiRequest('/api/notifications/bulk', {\n        method: 'POST',\n        body: JSON.stringify(data),\n      });\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Notifications Sent\",\n        description: data.message,\n      });\n      setIsOpen(false);\n      setTitle('');\n      setMessage('');\n      setEventId('');\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to send notifications\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!title || !message) return;\n    \n    sendNotificationMutation.mutate({\n      title,\n      message,\n      eventId: eventId || undefined,\n    });\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger asChild>\n        <Button variant=\"outline\" size=\"default\">\n          <Mail className=\"w-4 h-4 mr-2\" />\n          Send Notification\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Send Notification</DialogTitle>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <label className=\"text-sm font-medium\">Title</label>\n            <Input\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n              placeholder=\"Notification title\"\n              required\n            />\n          </div>\n          <div>\n            <label className=\"text-sm font-medium\">Message</label>\n            <Textarea\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n              placeholder=\"Your message to attendees\"\n              rows={4}\n              required\n            />\n          </div>\n          <div>\n            <label className=\"text-sm font-medium\">Event (Optional)</label>\n            <select\n              value={eventId}\n              onChange={(e) => setEventId(e.target.value)}\n              className=\"w-full p-2 border rounded-md\"\n            >\n              <option value=\"\">All attendees</option>\n              {events?.map((event: any) => (\n                <option key={event.id} value={event.id}>\n                  {event.name}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div className=\"flex justify-end space-x-2\">\n            <Button type=\"button\" variant=\"outline\" onClick={() => setIsOpen(false)}>\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={sendNotificationMutation.isPending}>\n              {sendNotificationMutation.isPending ? 'Sending...' : 'Send'}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n// Attendees Table Component\nfunction AttendeesTable() {\n  const { data: bookings } = useQuery({\n    queryKey: [\"/api/bookings\"],\n    retry: false,\n  });\n\n  return (\n    <div className=\"overflow-x-auto\">\n      {bookings && bookings.length > 0 ? (\n        <table className=\"w-full border-collapse\">\n          <thead>\n            <tr className=\"border-b border-slate-200\">\n              <th className=\"text-left p-4 font-semibold text-slate-700\">Name</th>\n              <th className=\"text-left p-4 font-semibold text-slate-700\">Email</th>\n              <th className=\"text-left p-4 font-semibold text-slate-700\">Event</th>\n              <th className=\"text-left p-4 font-semibold text-slate-700\">Tickets</th>\n              <th className=\"text-left p-4 font-semibold text-slate-700\">Status</th>\n              <th className=\"text-left p-4 font-semibold text-slate-700\">Date</th>\n            </tr>\n          </thead>\n          <tbody>\n            {bookings.map((booking: any) => (\n              <tr key={booking.id} className=\"border-b border-slate-100 hover:bg-slate-50\">\n                <td className=\"p-4\">\n                  <p className=\"font-semibold text-slate-800\">{booking.user?.firstName || booking.attendeeName} {booking.user?.lastName || ''}</p>\n                </td>\n                <td className=\"p-4\">\n                  <p className=\"text-sm text-slate-800\">{booking.user?.email || booking.attendeeEmail}</p>\n                </td>\n                <td className=\"p-4\">\n                  <p className=\"text-sm text-slate-800\">{booking.event?.name || 'Loading Event...'}</p>\n                </td>\n                <td className=\"p-4\">\n                  <p className=\"text-sm text-slate-800\">{booking.quantity}</p>\n                </td>\n                <td className=\"p-4\">\n                  <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                    booking.status === 'confirmed' ? 'bg-green-100 text-green-800' :\n                    booking.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :\n                    'bg-gray-100 text-gray-800'\n                  }`}>\n                    {booking.status}\n                  </span>\n                </td>\n                <td className=\"p-4\">\n                  <div>\n                    <p className=\"text-sm text-slate-800 font-medium\">\n                      {new Date(booking.createdAt).toLocaleDateString('en-US', { \n                        month: 'short', \n                        day: 'numeric', \n                        year: 'numeric' \n                      })}\n                    </p>\n                    <p className=\"text-xs text-slate-500\">\n                      Booked at {new Date(booking.createdAt).toLocaleTimeString('en-US', { \n                        hour: 'numeric', \n                        minute: '2-digit',\n                        hour12: true \n                      })}\n                    </p>\n                  </div>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : (\n        <div className=\"text-center py-12\">\n          <Users className=\"mx-auto h-12 w-12 text-slate-400 mb-4\" />\n          <h3 className=\"text-lg font-medium text-slate-800 mb-2\">No attendees yet</h3>\n          <p className=\"text-slate-600\">Attendees will appear here once events are booked</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\n// View Ticket Modal Component\nfunction ViewTicketModal({ booking }: { booking: any }) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger asChild>\n        <Button variant=\"outline\" size=\"sm\">\n          <Eye className=\"w-4 h-4 mr-1\" />\n          View\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Ticket Details</DialogTitle>\n        </DialogHeader>\n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"text-sm font-medium text-slate-600\">Booking Reference</label>\n            <p className=\"font-mono text-sm\">{booking.bookingReference}</p>\n          </div>\n          <div>\n            <label className=\"text-sm font-medium text-slate-600\">Event</label>\n            <p>{booking.event?.name}</p>\n          </div>\n          <div>\n            <label className=\"text-sm font-medium text-slate-600\">Attendee</label>\n            <p>{booking.attendeeName}</p>\n            <p className=\"text-sm text-slate-500\">{booking.attendeeEmail}</p>\n          </div>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"text-sm font-medium text-slate-600\">Quantity</label>\n              <p>{booking.quantity}</p>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium text-slate-600\">Amount</label>\n              <p>${booking.totalAmount}</p>\n            </div>\n          </div>\n          <div>\n            <label className=\"text-sm font-medium text-slate-600\">Status</label>\n            <p className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n              booking.status === 'confirmed' ? 'bg-green-100 text-green-800' :\n              booking.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :\n              'bg-gray-100 text-gray-800'\n            }`}>\n              {booking.status}\n            </p>\n          </div>\n          <div>\n            <label className=\"text-sm font-medium text-slate-600\">Booking Date</label>\n            <p>{new Date(booking.createdAt).toLocaleDateString()}</p>\n          </div>\n        </div>\n        <div className=\"flex justify-end\">\n          <Button onClick={() => setIsOpen(false)}>Close</Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n// Tickets Table Component\nfunction TicketsTable() {\n  const { data: bookings } = useQuery({\n    queryKey: [\"/api/bookings\"],\n    retry: false,\n  });\n\n  return (\n    <div className=\"overflow-x-auto\">\n      {bookings && bookings.length > 0 ? (\n        <table className=\"w-full border-collapse\">\n          <thead>\n            <tr className=\"border-b border-slate-200\">\n              <th className=\"text-left p-4 font-semibold text-slate-700\">Booking ID</th>\n              <th className=\"text-left p-4 font-semibold text-slate-700\">Event</th>\n              <th className=\"text-left p-4 font-semibold text-slate-700\">Attendee</th>\n              <th className=\"text-left p-4 font-semibold text-slate-700\">Quantity</th>\n              <th className=\"text-left p-4 font-semibold text-slate-700\">Amount</th>\n              <th className=\"text-left p-4 font-semibold text-slate-700\">Status</th>\n              <th className=\"text-left p-4 font-semibold text-slate-700\">Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {bookings.map((booking: any) => (\n              <tr key={booking.id} className=\"border-b border-slate-100 hover:bg-slate-50\">\n                <td className=\"p-4\">\n                  <p className=\"font-mono text-sm text-slate-800\">{booking.bookingReference}</p>\n                </td>\n                <td className=\"p-4\">\n                  <p className=\"text-sm text-slate-800\">{booking.event?.name || 'Loading Event...'}</p>\n                </td>\n                <td className=\"p-4\">\n                  <div>\n                    <p className=\"font-semibold text-slate-800\">{booking.attendeeName}</p>\n                    <p className=\"text-xs text-slate-600\">{booking.attendeeEmail}</p>\n                  </div>\n                </td>\n                <td className=\"p-4\">\n                  <p className=\"text-sm text-slate-800\">{booking.quantity}</p>\n                </td>\n                <td className=\"p-4\">\n                  <p className=\"text-sm font-medium text-slate-800\">${booking.totalAmount}</p>\n                </td>\n                <td className=\"p-4\">\n                  <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                    booking.status === 'confirmed' ? 'bg-green-100 text-green-800' :\n                    booking.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :\n                    'bg-gray-100 text-gray-800'\n                  }`}>\n                    {booking.status}\n                  </span>\n                </td>\n                <td className=\"p-4\">\n                  <ViewTicketModal booking={booking} />\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : (\n        <div className=\"text-center py-12\">\n          <Calendar className=\"mx-auto h-12 w-12 text-slate-400 mb-4\" />\n          <h3 className=\"text-lg font-medium text-slate-800 mb-2\">No tickets yet</h3>\n          <p className=\"text-slate-600\">Ticket bookings will appear here once events are booked</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\ntype DashboardStats = {\n  totalEvents: number;\n  totalAttendees: number;\n  totalRevenue: number;\n  conversionRate: number;\n};\n\nexport default function AdminDashboard() {\n  const { user, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [activeTab, setActiveTab] = useState(\"dashboard\");\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [editingEvent, setEditingEvent] = useState<any>(null);\n  \n  // Event filtering and sorting states\n  const [dateFilterFrom, setDateFilterFrom] = useState(\"\");\n  const [dateFilterTo, setDateFilterTo] = useState(\"\");\n  const [sortBy, setSortBy] = useState(\"createdAt\");\n  const [sortOrder, setSortOrder] = useState(\"desc\");\n\n  // Handler functions\n  const handleDateFromChange = (value: string) => {\n    setDateFilterFrom(value);\n    if (value && !dateFilterTo) {\n      // Auto-set end date to 7 days after start date\n      const startDate = new Date(value);\n      const endDate = new Date(startDate);\n      endDate.setDate(startDate.getDate() + 7);\n      setDateFilterTo(endDate.toISOString().split('T')[0]);\n    }\n  };\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !user) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Redirecting to login...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/auth\";\n      }, 500);\n      return;\n    }\n  }, [user, isLoading, toast]);\n\n  const { data: stats, isLoading: statsLoading } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\"],\n    retry: false,\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n    },\n  });\n\n  // For admin dashboard, fetch all events regardless of status\n  const { data: rawEvents, isLoading: eventsLoading } = useQuery({\n    queryKey: [\"/api/events\"],\n    queryFn: () => fetch(\"/api/events?status=\").then(res => res.json()),\n    retry: false,\n  });\n\n  // Process and filter events\n  const events = rawEvents ? [...rawEvents]\n    .filter(event => {\n      // Date filtering\n      if (dateFilterFrom && dateFilterTo) {\n        const eventStart = new Date(event.startDate);\n        const filterFrom = new Date(dateFilterFrom);\n        const filterTo = new Date(dateFilterTo);\n        return eventStart >= filterFrom && eventStart <= filterTo;\n      }\n      return true;\n    })\n    .sort((a, b) => {\n      const aVal = sortBy === 'createdAt' ? new Date(a.createdAt) : \n                   sortBy === 'startDate' ? new Date(a.startDate) : \n                   sortBy === 'name' ? a.name : a[sortBy];\n      const bVal = sortBy === 'createdAt' ? new Date(b.createdAt) : \n                   sortBy === 'startDate' ? new Date(b.startDate) : \n                   sortBy === 'name' ? b.name : b[sortBy];\n      \n      if (sortOrder === 'asc') {\n        return aVal > bVal ? 1 : -1;\n      } else {\n        return aVal < bVal ? 1 : -1;\n      }\n    }) : [];\n\n  // Delete event mutation\n  const deleteEventMutation = useMutation({\n    mutationFn: async (eventId: number) => {\n      const response = await apiRequest(\"DELETE\", `/api/events/${eventId}`);\n      return response;\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Event Deleted\",\n        description: \"The event has been deleted successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      \n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete event\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDeleteEvent = (event: any) => {\n    if (window.confirm(`Are you sure you want to delete \"${event.name}\"? This action cannot be undone.`)) {\n      deleteEventMutation.mutate(event.id);\n    }\n  };\n\n  if (isLoading || !user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  if (!user.isAdmin) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-slate-50\">\n        <Card className=\"w-full max-w-md mx-4\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <h1 className=\"text-2xl font-bold text-slate-800 mb-4\">Access Denied</h1>\n              <p className=\"text-slate-600 mb-4\">You need admin privileges to access this page.</p>\n              <Button onClick={() => window.location.href = \"/events\"}>\n                Go to Events\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <AdminSidebar activeTab={activeTab} onTabChange={setActiveTab} user={user} />\n      \n      {/* Main Content */}\n      <div className=\"lg:ml-64 min-h-screen\">\n        {/* Top Bar */}\n        <header className=\"bg-white shadow-sm border-b border-slate-200 sticky top-0 z-20\">\n          <div className=\"flex items-center justify-between px-4 lg:px-6 py-4\">\n            <div className=\"flex items-center space-x-2 lg:space-x-4\">\n              <h1 className=\"text-lg lg:text-2xl font-bold text-slate-800 truncate\">\n                {activeTab === \"dashboard\" ? \"Dashboard\" : \n                 activeTab === \"events\" ? \"Event Management\" :\n                 activeTab === \"attendees\" ? \"Attendee Management\" :\n                 activeTab === \"tickets\" ? \"Ticket Management\" :\n                 activeTab === \"analytics\" ? \"Analytics & Reports\" :\n                 activeTab === \"user-view\" ? \"User View\" :\n                 \"Event Discovery\"}\n              </h1>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" className=\"flex items-center space-x-2 lg:space-x-3 hover:bg-slate-100\">\n                    <img \n                      src={user.profileImageUrl || `https://api.dicebear.com/7.x/initials/svg?seed=${user.firstName} ${user.lastName}`} \n                      alt=\"User Avatar\" \n                      className=\"w-8 h-8 rounded-full object-cover\"\n                    />\n                    <span className=\"text-sm font-medium text-slate-700 hidden sm:block\">\n                      {user.firstName} {user.lastName}\n                    </span>\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\" className=\"w-56\">\n                  <DropdownMenuLabel>My Account</DropdownMenuLabel>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem \n                    onClick={() => window.location.href = \"/profile\"}\n                    className=\"cursor-pointer\"\n                  >\n                    <User className=\"mr-2 h-4 w-4\" />\n                    <span>Profile</span>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem \n                    onClick={() => setActiveTab(\"user-view\")}\n                    className=\"cursor-pointer\"\n                  >\n                    <Eye className=\"mr-2 h-4 w-4\" />\n                    <span>User View</span>\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem \n                    onClick={() => {\n                      // Clear session and redirect to logout\n                      fetch('/api/logout', { method: 'POST', credentials: 'include' })\n                        .then(() => {\n                          window.location.href = \"/auth\";\n                        })\n                        .catch(() => {\n                          // Fallback logout\n                          window.location.href = \"/auth\";\n                        });\n                    }}\n                    className=\"cursor-pointer text-red-600 focus:text-red-600\"\n                  >\n                    <LogOut className=\"mr-2 h-4 w-4\" />\n                    <span>Log out</span>\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n          </div>\n        </header>\n\n        {/* Dashboard Content */}\n        {activeTab === \"dashboard\" && (\n          <main className=\"p-4 lg:p-6\">\n            {/* Stats Cards */}\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 lg:gap-6 mb-6 lg:mb-8\">\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-slate-600\">Total Events</p>\n                      <p className=\"text-3xl font-bold text-slate-800\">\n                        {statsLoading ? \"...\" : stats?.totalEvents || 0}\n                      </p>\n                    </div>\n                    <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                      <Calendar className=\"text-blue-600 h-6 w-6\" />\n                    </div>\n                  </div>\n                  <div className=\"mt-4 flex items-center text-sm\">\n                    <span className=\"text-green-600 font-medium\">+12%</span>\n                    <span className=\"text-slate-500 ml-1\">vs last month</span>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-slate-600\">Total Attendees</p>\n                      <p className=\"text-3xl font-bold text-slate-800\">\n                        {statsLoading ? \"...\" : stats?.totalAttendees || 0}\n                      </p>\n                    </div>\n                    <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                      <Users className=\"text-green-600 h-6 w-6\" />\n                    </div>\n                  </div>\n                  <div className=\"mt-4 flex items-center text-sm\">\n                    <span className=\"text-green-600 font-medium\">+23%</span>\n                    <span className=\"text-slate-500 ml-1\">vs last month</span>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-slate-600\">Revenue</p>\n                      <p className=\"text-3xl font-bold text-slate-800\">\n                        {statsLoading ? \"...\" : `$${stats?.totalRevenue?.toLocaleString() || 0}`}\n                      </p>\n                    </div>\n                    <div className=\"w-12 h-12 bg-emerald-100 rounded-lg flex items-center justify-center\">\n                      <DollarSign className=\"text-emerald-600 h-6 w-6\" />\n                    </div>\n                  </div>\n                  <div className=\"mt-4 flex items-center text-sm\">\n                    <span className=\"text-green-600 font-medium\">+8%</span>\n                    <span className=\"text-slate-500 ml-1\">vs last month</span>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-slate-600\">Conversion Rate</p>\n                      <p className=\"text-3xl font-bold text-slate-800\">\n                        {statsLoading ? \"...\" : `${stats?.conversionRate || 0}%`}\n                      </p>\n                    </div>\n                    <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n                      <TrendingUp className=\"text-purple-600 h-6 w-6\" />\n                    </div>\n                  </div>\n                  <div className=\"mt-4 flex items-center text-sm\">\n                    <span className=\"text-red-600 font-medium\">-2%</span>\n                    <span className=\"text-slate-500 ml-1\">vs last month</span>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Recent Events & Quick Actions */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 lg:gap-6\">\n              <div className=\"lg:col-span-2\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Recent Events</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {eventsLoading ? (\n                        <div className=\"text-center py-4\">\n                          <div className=\"animate-spin w-6 h-6 border-2 border-primary border-t-transparent rounded-full mx-auto mb-2\" />\n                          <p className=\"text-sm text-slate-600\">Loading events...</p>\n                        </div>\n                      ) : events && events.length > 0 ? (\n                        events.slice(0, 3).map((event: any) => (\n                          <div key={event.id} className=\"flex items-center space-x-4 p-4 border border-slate-200 rounded-lg\">\n                          <img \n                            src={event.imageUrl || `https://images.unsplash.com/photo-1540575467063-178a50c2df87?ixlib=rb-4.0.3&auto=format&fit=crop&w=80&h=80`}\n                            alt={event.name}\n                            className=\"w-16 h-16 rounded-lg object-cover\"\n                          />\n                          <div className=\"flex-1\">\n                            <h4 className=\"font-semibold text-slate-800\">{event.name}</h4>\n                            <p className=\"text-sm text-slate-600\">\n                              {new Date(event.startDate).toLocaleDateString()} ‚Ä¢ {new Date(event.startDate).toLocaleTimeString()}\n                            </p>\n                            <p className=\"text-sm text-slate-500\">{event.location}</p>\n                          </div>\n                          <div className=\"text-right\">\n                            <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                              event.status === 'active' ? 'bg-green-100 text-green-800' :\n                              event.status === 'upcoming' ? 'bg-blue-100 text-blue-800' :\n                              event.status === 'draft' ? 'bg-yellow-100 text-yellow-800' :\n                              'bg-gray-100 text-gray-800'\n                            }`}>\n                              {event.status}\n                            </span>\n                            <div className=\"mt-2 w-32\">\n                              <div className=\"flex justify-between text-xs text-slate-600 mb-1\">\n                                <span>{event.currentAttendees}</span>\n                                <span>{event.maxAttendees}</span>\n                              </div>\n                              <Progress \n                                value={(event.currentAttendees / event.maxAttendees) * 100} \n                                className=\"h-2\"\n                              />\n                              <p className=\"text-xs text-slate-500 mt-1\">\n                                {Math.round((event.currentAttendees / event.maxAttendees) * 100)}% filled\n                              </p>\n                            </div>\n                          </div>\n                          </div>\n                        ))\n                      ) : (\n                        <div className=\"text-center py-8\">\n                          <Calendar className=\"mx-auto h-8 w-8 text-slate-400 mb-2\" />\n                          <p className=\"text-sm text-slate-600\">No events found</p>\n                        </div>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Quick Actions</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <Button \n                    onClick={() => setIsCreateModalOpen(true)}\n                    className=\"w-full justify-start border-2 border-dashed border-primary-300 text-primary-600 hover:bg-primary-50\"\n                    variant=\"outline\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Create New Event\n                  </Button>\n                  \n                  <Button \n                    variant=\"outline\" \n                    className=\"w-full justify-start\"\n                    onClick={exportAttendees}\n                  >\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    Export Attendee Data\n                  </Button>\n                  \n                  <div className=\"w-full\">\n                    <SendNotificationModal />\n                  </div>\n                  \n                  <Button \n                    variant=\"outline\" \n                    className=\"w-full justify-start\"\n                    onClick={async () => {\n                      try {\n                        const response = await fetch('/api/reports/generate', {\n                          method: 'GET',\n                          credentials: 'include',\n                        });\n                        \n                        if (response.ok) {\n                          const report = await response.json();\n                          const blob = new Blob([JSON.stringify(report, null, 2)], { type: 'application/json' });\n                          const url = window.URL.createObjectURL(blob);\n                          const a = document.createElement('a');\n                          a.href = url;\n                          a.download = `eventmaster-report-${new Date().toISOString().split('T')[0]}.json`;\n                          document.body.appendChild(a);\n                          a.click();\n                          window.URL.revokeObjectURL(url);\n                          document.body.removeChild(a);\n                          toast({\n                            title: \"Report Generated\",\n                            description: \"Analytics report has been downloaded successfully\",\n                          });\n                        }\n                      } catch (error) {\n                        toast({\n                          title: \"Error\",\n                          description: \"Failed to generate report\",\n                          variant: \"destructive\",\n                        });\n                      }\n                    }}\n                  >\n                    <BarChart3 className=\"w-4 h-4 mr-2\" />\n                    Generate Reports\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          </main>\n        )}\n\n        {/* Events Tab */}\n        {activeTab === \"events\" && (\n          <main className=\"p-4 lg:p-6\">\n            <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4 mb-6\">\n              <h2 className=\"text-xl lg:text-2xl font-bold text-slate-800\">Event Management</h2>\n              <Button \n                onClick={() => setIsCreateModalOpen(true)}\n                className=\"bg-primary-500 hover:bg-primary-600\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create Event\n              </Button>\n            </div>\n\n            {/* Filters and Controls */}\n            <Card className=\"mb-6\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex flex-col lg:flex-row lg:flex-wrap lg:items-center gap-4\">\n                  {/* Date Range Filter */}\n                  <div className=\"flex flex-col sm:flex-row sm:items-center gap-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <CalendarDays className=\"w-4 h-4 text-slate-600\" />\n                      <label className=\"text-sm font-medium text-slate-700\">From:</label>\n                    </div>\n                    <div className=\"flex flex-col sm:flex-row sm:items-center gap-2\">\n                      <input\n                        type=\"date\"\n                        value={dateFilterFrom}\n                        onChange={(e) => handleDateFromChange(e.target.value)}\n                        className=\"px-3 py-1 border border-slate-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      />\n                      <label className=\"text-sm font-medium text-slate-700\">To:</label>\n                      <input\n                        type=\"date\"\n                        value={dateFilterTo}\n                        onChange={(e) => setDateFilterTo(e.target.value)}\n                        className=\"px-3 py-1 border border-slate-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      />\n                    </div>\n                  </div>\n\n                  {/* Sort Controls */}\n                  <div className=\"flex flex-col sm:flex-row sm:items-center gap-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <ArrowUpDown className=\"w-4 h-4 text-slate-600\" />\n                      <label className=\"text-sm font-medium text-slate-700\">Sort by:</label>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <select\n                        value={sortBy}\n                        onChange={(e) => setSortBy(e.target.value)}\n                        className=\"px-3 py-1 border border-slate-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      >\n                        <option value=\"createdAt\">Created Date</option>\n                        <option value=\"startDate\">Event Date</option>\n                        <option value=\"name\">Name</option>\n                        <option value=\"status\">Status</option>\n                      </select>\n                      <button\n                        onClick={() => setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')}\n                        className=\"px-3 py-1 border border-slate-300 rounded-md text-sm hover:bg-slate-50 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      >\n                        {sortOrder === 'asc' ? '‚Üë Asc' : '‚Üì Desc'}\n                      </button>\n                    </div>\n                  </div>\n\n                  {/* Clear Filters */}\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => {\n                      setDateFilterFrom(\"\");\n                      setDateFilterTo(\"\");\n                      setSortBy(\"createdAt\");\n                      setSortOrder(\"desc\");\n                    }}\n                    className=\"ml-auto\"\n                  >\n                    <Filter className=\"w-4 h-4 mr-2\" />\n                    Clear Filters\n                  </Button>\n\n                  {/* Event Count */}\n                  <div className=\"text-sm text-slate-600\">\n                    Showing {events?.length || 0} events\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-4\">\n                  {events && events.length > 0 ? (\n                    <div className=\"overflow-x-auto\">\n                      <table className=\"w-full border-collapse\">\n                        <thead>\n                          <tr className=\"border-b border-slate-200\">\n                            <th className=\"text-left p-4 font-semibold text-slate-700\">Event</th>\n                            <th className=\"text-left p-4 font-semibold text-slate-700\">Event Date</th>\n                            <th className=\"text-left p-4 font-semibold text-slate-700\">Created</th>\n                            <th className=\"text-left p-4 font-semibold text-slate-700\">Location</th>\n                            <th className=\"text-left p-4 font-semibold text-slate-700\">Attendees</th>\n                            <th className=\"text-left p-4 font-semibold text-slate-700\">Price</th>\n                            <th className=\"text-left p-4 font-semibold text-slate-700\">Status</th>\n                            <th className=\"text-left p-4 font-semibold text-slate-700\">Actions</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {events.map((event: any) => (\n                            <tr key={event.id} className=\"border-b border-slate-100 hover:bg-slate-50\">\n                              <td className=\"p-4\">\n                                <div className=\"flex items-center space-x-3\">\n                                  <img \n                                    src={event.imageUrl || `https://images.unsplash.com/photo-1540575467063-178a50c2df87?ixlib=rb-4.0.3&auto=format&fit=crop&w=60&h=60`}\n                                    alt={event.name}\n                                    className=\"w-12 h-12 rounded-lg object-cover\"\n                                  />\n                                  <div>\n                                    <h4 className=\"font-semibold text-slate-800\">{event.name}</h4>\n                                    <p className=\"text-sm text-slate-600\">{event.category}</p>\n                                  </div>\n                                </div>\n                              </td>\n                              <td className=\"p-4\">\n                                <div className=\"text-sm\">\n                                  <p className=\"font-medium text-slate-800\">\n                                    {new Date(event.startDate).toLocaleDateString()}\n                                  </p>\n                                  <p className=\"text-slate-600\">\n                                    {new Date(event.startDate).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}\n                                  </p>\n                                </div>\n                              </td>\n                              <td className=\"p-4\">\n                                <div className=\"text-sm\">\n                                  <p className=\"font-medium text-slate-800\">\n                                    {new Date(event.createdAt).toLocaleDateString()}\n                                  </p>\n                                  <p className=\"text-slate-600\">\n                                    {new Date(event.createdAt).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}\n                                  </p>\n                                </div>\n                              </td>\n                              <td className=\"p-4\">\n                                <p className=\"text-sm text-slate-800\">{event.location}</p>\n                              </td>\n                              <td className=\"p-4\">\n                                <div className=\"w-24\">\n                                  <div className=\"flex justify-between text-xs text-slate-600 mb-1\">\n                                    <span>{event.currentAttendees || 0}</span>\n                                    <span>{event.maxAttendees}</span>\n                                  </div>\n                                  <Progress \n                                    value={((event.currentAttendees || 0) / event.maxAttendees) * 100} \n                                    className=\"h-2\"\n                                  />\n                                  <p className=\"text-xs text-slate-500 mt-1 text-center\">\n                                    {Math.round(((event.currentAttendees || 0) / event.maxAttendees) * 100)}%\n                                  </p>\n                                </div>\n                              </td>\n                              <td className=\"p-4\">\n                                <p className=\"text-sm font-medium text-slate-800\">${event.ticketPrice}</p>\n                              </td>\n                              <td className=\"p-4\">\n                                <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                                  event.status === 'active' ? 'bg-green-100 text-green-800' :\n                                  event.status === 'upcoming' ? 'bg-blue-100 text-blue-800' :\n                                  event.status === 'draft' ? 'bg-yellow-100 text-yellow-800' :\n                                  'bg-gray-100 text-gray-800'\n                                }`}>\n                                  {event.status}\n                                </span>\n                              </td>\n                              <td className=\"p-4\">\n                                <div className=\"flex space-x-2\">\n                                  <Button \n                                    size=\"sm\" \n                                    variant=\"outline\"\n                                    onClick={() => setEditingEvent(event)}\n                                    disabled={deleteEventMutation.isPending}\n                                  >\n                                    <Edit className=\"w-4 h-4 mr-1\" />\n                                    Edit\n                                  </Button>\n                                  <Button \n                                    size=\"sm\" \n                                    variant=\"outline\" \n                                    className=\"text-red-600 hover:bg-red-50\"\n                                    onClick={() => handleDeleteEvent(event)}\n                                    disabled={deleteEventMutation.isPending}\n                                  >\n                                    <Trash2 className=\"w-4 h-4 mr-1\" />\n                                    Delete\n                                  </Button>\n                                </div>\n                              </td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-12\">\n                      <Calendar className=\"mx-auto h-12 w-12 text-slate-400 mb-4\" />\n                      <h3 className=\"text-lg font-medium text-slate-800 mb-2\">No events yet</h3>\n                      <p className=\"text-slate-600 mb-4\">Create your first event to get started</p>\n                      <Button \n                        onClick={() => setIsCreateModalOpen(true)}\n                        className=\"bg-primary-500 hover:bg-primary-600\"\n                      >\n                        <Plus className=\"w-4 h-4 mr-2\" />\n                        Create Event\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </main>\n        )}\n\n        {/* Attendees Tab */}\n        {activeTab === \"attendees\" && (\n          <main className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h2 className=\"text-2xl font-bold text-slate-800\">Attendee Management</h2>\n              <div className=\"flex space-x-3\">\n                <Button variant=\"outline\" onClick={exportAttendees}>\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Export Data\n                </Button>\n                <SendNotificationModal />\n              </div>\n            </div>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <AttendeesTable />\n              </CardContent>\n            </Card>\n          </main>\n        )}\n\n        {/* Tickets Tab */}\n        {activeTab === \"tickets\" && (\n          <main className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h2 className=\"text-2xl font-bold text-slate-800\">Ticket Management</h2>\n              <div className=\"flex space-x-3\">\n                <Button variant=\"outline\" onClick={exportTickets}>\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Export Tickets\n                </Button>\n              </div>\n            </div>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <TicketsTable />\n              </CardContent>\n            </Card>\n          </main>\n        )}\n\n        {/* Analytics Tab */}\n        {activeTab === \"analytics\" && (\n          <main className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h2 className=\"text-2xl font-bold text-slate-800\">Analytics & Reports</h2>\n              <div className=\"flex space-x-3\">\n                <Button variant=\"outline\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Export Report\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Event Performance</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-slate-600\">Most Popular Event</span>\n                      <span className=\"font-semibold\">Tech Conference 2024</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-slate-600\">Average Attendance Rate</span>\n                      <span className=\"font-semibold\">78%</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-slate-600\">Revenue Growth</span>\n                      <span className=\"font-semibold text-green-600\">+15%</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Monthly Trends</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-slate-600\">Events This Month</span>\n                      <span className=\"font-semibold\">{events?.length || 0}</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-slate-600\">New Registrations</span>\n                      <span className=\"font-semibold\">{stats?.totalAttendees || 0}</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-slate-600\">Revenue This Month</span>\n                      <span className=\"font-semibold\">${stats?.totalRevenue?.toLocaleString() || 0}</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </main>\n        )}\n\n        {/* User View */}\n        {activeTab === \"users\" && (\n          <main className=\"p-6\">\n            <div className=\"text-center\">\n              <Button \n                onClick={() => window.location.href = \"/events\"}\n                className=\"bg-primary-500 hover:bg-primary-600\"\n              >\n                Switch to User View\n              </Button>\n            </div>\n          </main>\n        )}\n      </div>\n\n      <CreateEventModal \n        isOpen={isCreateModalOpen} \n        onClose={() => setIsCreateModalOpen(false)} \n      />\n      \n      {editingEvent && (\n        <EditEventModal \n          isOpen={!!editingEvent} \n          onClose={() => setEditingEvent(null)} \n          event={editingEvent}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":51952},"client/src/pages/auth-choice.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { LogIn, Calendar, Shield, Zap } from \"lucide-react\";\n\nexport default function AuthChoice() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-muted/30 to-primary/5 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-center space-x-3 mb-4\">\n            <div className=\"w-12 h-12 bg-primary rounded-xl flex items-center justify-center shadow-glow animate-pulse-slow\">\n              <Calendar className=\"text-primary-foreground h-7 w-7\" />\n            </div>\n            <h1 className=\"text-3xl font-display font-bold gradient-text\">EventMaster</h1>\n          </div>\n          <p className=\"text-muted-foreground text-lg\">Choose your sign-in method</p>\n        </div>\n\n        <div className=\"space-y-4\">\n          {/* Auth0 Login */}\n          <Card className=\"card-gradient border-2 hover:border-primary/50 transition-all duration-300 hover:scale-105\">\n            <CardHeader className=\"text-center pb-3\">\n              <div className=\"w-12 h-12 bg-primary/10 rounded-xl flex items-center justify-center mx-auto mb-3\">\n                <Shield className=\"h-6 w-6 text-primary\" />\n              </div>\n              <CardTitle className=\"text-xl\">Professional Sign In</CardTitle>\n              <CardDescription>\n                Sign in with Google, GitHub, or email using secure Auth0 authentication\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Button \n                className=\"w-full h-12 bg-primary hover:bg-primary/90 rounded-xl transition-all duration-300 hover:scale-105 shadow-glow\"\n                onClick={() => window.location.href = '/auth/login'}\n              >\n                <Shield className=\"mr-2 h-5 w-5\" />\n                Continue with Auth0\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Local Login */}\n          <Card className=\"card-gradient border-2 hover:border-accent/50 transition-all duration-300 hover:scale-105\">\n            <CardHeader className=\"text-center pb-3\">\n              <div className=\"w-12 h-12 bg-accent/10 rounded-xl flex items-center justify-center mx-auto mb-3\">\n                <Zap className=\"h-6 w-6 text-accent\" />\n              </div>\n              <CardTitle className=\"text-xl\">Quick Access</CardTitle>\n              <CardDescription>\n                Use the demo account or create a local account for testing\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Button \n                variant=\"outline\"\n                className=\"w-full h-12 border-2 hover:bg-accent/20 rounded-xl transition-all duration-300 hover:scale-105\"\n                onClick={() => window.location.href = '/auth'}\n              >\n                <LogIn className=\"mr-2 h-5 w-5\" />\n                Local Sign In\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"text-center mt-8\">\n          <p className=\"text-sm text-muted-foreground\">\n            New to EventMaster?{\" \"}\n            <a href=\"/signup\" className=\"text-primary hover:underline font-medium\">\n              Create an account\n            </a>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":3505},"client/src/pages/auth-page.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Redirect } from \"wouter\";\nimport { Calendar, Users, Trophy } from \"lucide-react\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nconst registerSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\ntype RegisterFormData = z.infer<typeof registerSchema>;\n\nexport default function AuthPage() {\n  const { user, isLoading, loginMutation, registerMutation } = useAuth();\n  const [activeTab, setActiveTab] = useState(\"login\");\n\n  const loginForm = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const registerForm = useForm<RegisterFormData>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      username: \"\",\n    },\n  });\n\n  // Redirect if already logged in\n  if (user) {\n    return <Redirect to=\"/\" />;\n  }\n\n  const onLogin = (data: LoginFormData) => {\n    loginMutation.mutate(data);\n  };\n\n  const onRegister = (data: RegisterFormData) => {\n    registerMutation.mutate(data);\n  };\n\n  const handleAuth0Login = () => {\n    window.location.href = \"/api/auth/login\";\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 flex\">\n      {/* Left side - Hero Section */}\n      <div className=\"hidden lg:flex lg:w-1/2 flex-col justify-center p-12 bg-gradient-to-br from-blue-600 to-indigo-700 dark:from-blue-800 dark:to-indigo-900 text-white\">\n        <div className=\"space-y-8\">\n          <div className=\"space-y-4\">\n            <h1 className=\"text-4xl font-bold leading-tight\">\n              Welcome to EventMaster\n            </h1>\n            <p className=\"text-xl text-blue-100\">\n              Your complete event management and ticketing platform\n            </p>\n          </div>\n\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"bg-white/20 rounded-lg p-3\">\n                <Calendar className=\"h-6 w-6\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold\">Event Management</h3>\n                <p className=\"text-blue-100\">Create and manage events with ease</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"bg-white/20 rounded-lg p-3\">\n                <Users className=\"h-6 w-6\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold\">Attendee Management</h3>\n                <p className=\"text-blue-100\">Track bookings and manage attendees</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"bg-white/20 rounded-lg p-3\">\n                <Trophy className=\"h-6 w-6\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold\">Analytics & Insights</h3>\n                <p className=\"text-blue-100\">Get detailed insights into your events</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Right side - Auth Forms */}\n      <div className=\"w-full lg:w-1/2 flex items-center justify-center p-8\">\n        <div className=\"w-full max-w-md space-y-6\">\n          <div className=\"text-center\">\n            <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n              Get Started\n            </h2>\n            <p className=\"mt-2 text-gray-600 dark:text-gray-400\">\n              Sign in to your account or create a new one\n            </p>\n          </div>\n\n          <Card>\n            <CardHeader className=\"text-center\">\n              <CardTitle>Authentication</CardTitle>\n              <CardDescription>\n                Choose your preferred sign-in method\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {/* Auth0 Login Button */}\n              <Button \n                onClick={handleAuth0Login}\n                className=\"w-full\"\n                variant=\"outline\"\n              >\n                Continue with Auth0\n              </Button>\n\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 flex items-center\">\n                  <span className=\"w-full border-t\" />\n                </div>\n                <div className=\"relative flex justify-center text-xs uppercase\">\n                  <span className=\"bg-background px-2 text-muted-foreground\">\n                    Or continue with\n                  </span>\n                </div>\n              </div>\n\n              {/* Local Auth Tabs */}\n              <Tabs value={activeTab} onValueChange={setActiveTab}>\n                <TabsList className=\"grid w-full grid-cols-2\">\n                  <TabsTrigger value=\"login\">Sign In</TabsTrigger>\n                  <TabsTrigger value=\"register\">Sign Up</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"login\" className=\"space-y-4\">\n                  <Form {...loginForm}>\n                    <form onSubmit={loginForm.handleSubmit(onLogin)} className=\"space-y-4\">\n                      <FormField\n                        control={loginForm.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Email</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Enter your email\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={loginForm.control}\n                        name=\"password\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Password</FormLabel>\n                            <FormControl>\n                              <Input type=\"password\" placeholder=\"Enter your password\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <Button \n                        type=\"submit\" \n                        className=\"w-full\"\n                        disabled={loginMutation.isPending}\n                      >\n                        {loginMutation.isPending ? \"Signing in...\" : \"Sign In\"}\n                      </Button>\n                    </form>\n                  </Form>\n\n                  <div className=\"text-center text-sm text-gray-500\">\n                    <p>Demo admin account:</p>\n                    <p>Email: admin@eventmaster.com</p>\n                    <p>Password: admin123</p>\n                  </div>\n                </TabsContent>\n\n                <TabsContent value=\"register\" className=\"space-y-4\">\n                  <Form {...registerForm}>\n                    <form onSubmit={registerForm.handleSubmit(onRegister)} className=\"space-y-4\">\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={registerForm.control}\n                          name=\"firstName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>First Name</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"First name\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={registerForm.control}\n                          name=\"lastName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Last Name</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"Last name\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <FormField\n                        control={registerForm.control}\n                        name=\"username\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Username</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Choose a username\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={registerForm.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Email</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Enter your email\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={registerForm.control}\n                        name=\"password\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Password</FormLabel>\n                            <FormControl>\n                              <Input type=\"password\" placeholder=\"Create a password\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <Button \n                        type=\"submit\" \n                        className=\"w-full\"\n                        disabled={registerMutation.isPending}\n                      >\n                        {registerMutation.isPending ? \"Creating account...\" : \"Create Account\"}\n                      </Button>\n                    </form>\n                  </Form>\n                </TabsContent>\n              </Tabs>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12012},"client/src/pages/checkout.tsx":{"content":"import { useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ArrowLeft, Calendar, MapPin, Users } from \"lucide-react\";\n\n// Payment processing removed - bookings are automatically confirmed\n\nexport default function Checkout() {\n  const { bookingId } = useParams();\n\n  const { data: booking, isLoading } = useQuery({\n    queryKey: [\"/api/bookings\", bookingId],\n    enabled: !!bookingId,\n    retry: false,\n  });\n\n  // If booking data is not available, return empty object to prevent errors\n  const safeBooking: any = booking || {};\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  if (!booking) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-slate-50\">\n        <Card className=\"w-full max-w-md mx-4\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <h1 className=\"text-2xl font-bold text-slate-800 mb-4\">Booking Not Found</h1>\n              <p className=\"text-slate-600 mb-4\">The booking you're looking for doesn't exist.</p>\n              <Button onClick={() => window.location.href = \"/events\"}>\n                Back to Events\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      {/* Navigation */}\n      <nav className=\"bg-white shadow-sm border-b border-slate-200 px-6 py-4\">\n        <div className=\"max-w-7xl mx-auto flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"ghost\" \n              onClick={() => window.history.back()}\n              className=\"flex items-center space-x-2\"\n            >\n              <ArrowLeft className=\"h-4 w-4\" />\n              <span>Back</span>\n            </Button>\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 bg-primary-500 rounded-lg flex items-center justify-center\">\n                <Calendar className=\"text-white h-5 w-5\" />\n              </div>\n              <h1 className=\"text-xl font-bold text-slate-800\">EventMaster - Checkout</h1>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      <div className=\"max-w-4xl mx-auto px-6 py-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Booking Summary */}\n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Booking Summary</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center space-x-4\">\n                  <img \n                    src={safeBooking.event?.imageUrl || \"https://images.unsplash.com/photo-1540575467063-178a50c2df87?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&h=100\"}\n                    alt={safeBooking.event?.name || \"Event\"}\n                    className=\"w-20 h-16 rounded-lg object-cover\"\n                  />\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-semibold text-slate-800\">{safeBooking.event?.name || \"Loading...\"}</h3>\n                    <p className=\"text-sm text-slate-600\">{safeBooking.event?.category || \"\"}</p>\n                  </div>\n                </div>\n\n                <Separator />\n\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center space-x-3 text-sm\">\n                    <Calendar className=\"h-4 w-4 text-slate-400\" />\n                    <span className=\"text-slate-600\">\n                      {safeBooking.event?.startDate ? new Date(safeBooking.event.startDate).toLocaleDateString() : \"Date TBD\"} at{\" \"}\n                      {safeBooking.event?.startDate ? new Date(safeBooking.event.startDate).toLocaleTimeString() : \"Time TBD\"}\n                    </span>\n                  </div>\n\n                  <div className=\"flex items-center space-x-3 text-sm\">\n                    <MapPin className=\"h-4 w-4 text-slate-400\" />\n                    <span className=\"text-slate-600\">{safeBooking.event?.location || \"Location TBD\"}</span>\n                  </div>\n\n                  <div className=\"flex items-center space-x-3 text-sm\">\n                    <Users className=\"h-4 w-4 text-slate-400\" />\n                    <span className=\"text-slate-600\">{safeBooking.quantity || 0} ticket(s)</span>\n                  </div>\n                </div>\n\n                <Separator />\n\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-slate-600\">Booking Reference</span>\n                    <span className=\"font-medium\">{safeBooking.bookingReference || \"Loading...\"}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-slate-600\">Attendee Name</span>\n                    <span className=\"font-medium\">{safeBooking.attendeeName || \"Loading...\"}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-slate-600\">Email</span>\n                    <span className=\"font-medium\">{safeBooking.attendeeEmail || \"Loading...\"}</span>\n                  </div>\n                </div>\n\n                <Separator />\n\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-slate-600\">Ticket Price</span>\n                    <span>${parseFloat(safeBooking.event?.ticketPrice || \"0\").toFixed(2)}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-slate-600\">Quantity</span>\n                    <span>{safeBooking.quantity || 0}</span>\n                  </div>\n                  <div className=\"flex justify-between text-lg font-semibold border-t pt-2\">\n                    <span>Total</span>\n                    <span>${parseFloat(safeBooking.totalAmount || \"0\").toFixed(2)}</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Payment Form */}\n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Payment Details</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center py-8\">\n                  <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <svg className=\"w-6 h-6 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5 13l4 4L19 7\" />\n                    </svg>\n                  </div>\n                  <h3 className=\"text-lg font-semibold text-slate-800 mb-2\">Booking Confirmed!</h3>\n                  <p className=\"text-slate-600 mb-4\">\n                    Your booking has been automatically confirmed. A confirmation email has been sent to your email address.\n                  </p>\n                  <div className=\"bg-green-50 border border-green-200 rounded-lg p-4 mb-4\">\n                    <p className=\"text-green-800 text-sm\">\n                      <strong>Confirmation sent to:</strong> {safeBooking.attendeeEmail || \"Loading...\"}\n                    </p>\n                    <p className=\"text-green-800 text-sm mt-1\">\n                      <strong>Booking Reference:</strong> {safeBooking.bookingReference || \"Loading...\"}\n                    </p>\n                  </div>\n                  <div className=\"flex gap-3 justify-center\">\n                    <Button \n                      onClick={() => window.location.href = `/my-tickets`}\n                      className=\"bg-primary hover:bg-primary/90\"\n                    >\n                      View My Tickets\n                    </Button>\n                    <Button \n                      onClick={() => window.location.href = `/events`}\n                      variant=\"outline\"\n                    >\n                      Browse Events\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <div className=\"text-xs text-slate-500 text-center\">\n              <p>Your booking is confirmed automatically. Payment arrangements will be handled separately via email.</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9026},"client/src/pages/contact.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { ArrowLeft, Mail, Phone, MapPin, Send, CheckCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function Contact() {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    subject: \"\",\n    message: \"\"\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const { toast } = useToast();\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n\n    try {\n      const response = await fetch('/api/contact', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(formData),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to send message');\n      }\n\n      setIsSubmitted(true);\n      toast({\n        title: \"Message sent successfully!\",\n        description: \"We'll get back to you within 24 hours.\",\n      });\n\n      // Reset form after successful submission\n      setFormData({ name: \"\", email: \"\", subject: \"\", message: \"\" });\n    } catch (error) {\n      toast({\n        title: \"Failed to send message\",\n        description: \"Please try again later or contact us directly.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  if (isSubmitted) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-background via-muted/30 to-primary/5\">\n        <div className=\"container mx-auto px-6 py-8\">\n          <div className=\"mb-8\">\n            <Button \n              variant=\"ghost\" \n              onClick={() => window.location.href = '/events'}\n              className=\"mb-4\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Events\n            </Button>\n          </div>\n\n          <div className=\"max-w-2xl mx-auto text-center\">\n            <Card className=\"glass-effect border-green-200 dark:border-green-800\">\n              <CardContent className=\"p-12\">\n                <CheckCircle className=\"w-16 h-16 text-green-500 mx-auto mb-6\" />\n                <h1 className=\"text-3xl font-bold mb-4\">Message Sent Successfully!</h1>\n                <p className=\"text-muted-foreground mb-6\">\n                  Thank you for contacting us. We've received your message and will get back to you within 24 hours.\n                </p>\n                <div className=\"space-y-3\">\n                  <Button \n                    onClick={() => setIsSubmitted(false)}\n                    variant=\"outline\"\n                    className=\"mr-4\"\n                  >\n                    Send Another Message\n                  </Button>\n                  <Button onClick={() => window.location.href = '/events'}>\n                    Back to Events\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-muted/30 to-primary/5\">\n      <div className=\"container mx-auto px-6 py-8\">\n        <div className=\"mb-8\">\n          <Button \n            variant=\"ghost\" \n            onClick={() => window.location.href = '/events'}\n            className=\"mb-4\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Events\n          </Button>\n          <h1 className=\"text-4xl font-bold gradient-text mb-2\">Contact Us</h1>\n          <p className=\"text-muted-foreground text-lg\">Get in touch with the EventMaster team</p>\n        </div>\n\n        <div className=\"max-w-6xl mx-auto grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Contact Form */}\n          <Card className=\"glass-effect\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl\">Send us a message</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"name\">Full Name</Label>\n                    <Input\n                      id=\"name\"\n                      name=\"name\"\n                      value={formData.name}\n                      onChange={handleInputChange}\n                      placeholder=\"Your full name\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email Address</Label>\n                    <Input\n                      id=\"email\"\n                      name=\"email\"\n                      type=\"email\"\n                      value={formData.email}\n                      onChange={handleInputChange}\n                      placeholder=\"your.email@example.com\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"subject\">Subject</Label>\n                  <Input\n                    id=\"subject\"\n                    name=\"subject\"\n                    value={formData.subject}\n                    onChange={handleInputChange}\n                    placeholder=\"What's this about?\"\n                    required\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"message\">Message</Label>\n                  <Textarea\n                    id=\"message\"\n                    name=\"message\"\n                    value={formData.message}\n                    onChange={handleInputChange}\n                    placeholder=\"Tell us more about your inquiry...\"\n                    rows={6}\n                    required\n                  />\n                </div>\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  size=\"lg\"\n                  disabled={isSubmitting}\n                >\n                  {isSubmitting ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                      Sending...\n                    </>\n                  ) : (\n                    <>\n                      <Send className=\"w-4 h-4 mr-2\" />\n                      Send Message\n                    </>\n                  )}\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n\n          {/* Contact Information */}\n          <div className=\"space-y-6\">\n            <Card className=\"glass-effect\">\n              <CardHeader>\n                <CardTitle className=\"text-2xl\">Get in Touch</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"bg-primary/10 p-3 rounded-lg\">\n                    <Mail className=\"w-6 h-6 text-primary\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold mb-1\">Email Us</h3>\n                    <p className=\"text-muted-foreground\">support@eventmaster.com</p>\n                    <p className=\"text-sm text-muted-foreground\">We'll respond within 24 hours</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"bg-primary/10 p-3 rounded-lg\">\n                    <Phone className=\"w-6 h-6 text-primary\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold mb-1\">Phone Support</h3>\n                    <p className=\"text-muted-foreground\">+1 (555) 123-4567</p>\n                    <p className=\"text-sm text-muted-foreground\">Mon-Fri, 9am-6pm EST</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"bg-primary/10 p-3 rounded-lg\">\n                    <MapPin className=\"w-6 h-6 text-primary\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold mb-1\">Office</h3>\n                    <p className=\"text-muted-foreground\">\n                      123 Tech Street<br />\n                      San Francisco, CA 94105<br />\n                      United States\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glass-effect\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-xl font-semibold mb-4\">Common Questions</h3>\n                <div className=\"space-y-4\">\n                  <div>\n                    <h4 className=\"font-medium mb-2\">How do I cancel my booking?</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      You can cancel your booking from your profile page or contact us for assistance.\n                    </p>\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium mb-2\">Can I get a refund?</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Refund policies depend on the event organizer. Check the event details or contact us.\n                    </p>\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium mb-2\">How do I create an event?</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Admin accounts can create events through the dashboard. Contact us for admin access.\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10417},"client/src/pages/event-details.tsx":{"content":"import { useState } from \"react\";\nimport { useParams } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar, MapPin, Users, Clock, ArrowLeft, Ticket } from \"lucide-react\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function EventDetails() {\n  const { id } = useParams();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [ticketQuantity, setTicketQuantity] = useState(1);\n  \n  // Define authentication state\n  const isAuthenticated = !!user;\n\n  const { data: event, isLoading } = useQuery({\n    queryKey: [\"/api/events\", id],\n    enabled: !!id,\n    retry: false,\n  });\n  \n  // Type guard for event\n  const eventData = event as any;\n\n  const bookingMutation = useMutation({\n    mutationFn: async (bookingData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/bookings\", bookingData);\n      return response.json();\n    },\n    onSuccess: (booking) => {\n      toast({\n        title: \"Booking Confirmed!\",\n        description: `Your booking reference is ${booking.bookingReference}. Email confirmation sent!`,\n      });\n      \n      // Invalidate cache to refresh event data and attendee counts\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\", id] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      \n      // Navigate to checkout using MongoDB ObjectId\n      const bookingId = booking._id || booking.id;\n      console.log('Redirecting to checkout with booking ID:', bookingId);\n      window.location.href = `/checkout/${bookingId}`;\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Please sign in\",\n          description: \"You need to sign in to book tickets.\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 1000);\n        return;\n      }\n      \n      toast({\n        title: \"Booking Failed\",\n        description: error.message || \"Failed to create booking\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleBookTickets = () => {\n    if (!isAuthenticated) {\n      toast({\n        title: \"Please sign in\",\n        description: \"You need to sign in to book tickets.\",\n        variant: \"destructive\",\n      });\n      window.location.href = \"/api/login\";\n      return;\n    }\n\n    if (!eventData) return;\n\n    const totalAmount = parseFloat(eventData.ticketPrice) * ticketQuantity;\n    \n    bookingMutation.mutate({\n      eventId: eventData.id,\n      quantity: ticketQuantity,\n      totalAmount: totalAmount.toString(),\n      status: \"pending\",\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  if (!eventData) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-slate-50\">\n        <Card className=\"w-full max-w-md mx-4\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <h1 className=\"text-2xl font-bold text-slate-800 mb-4\">Event Not Found</h1>\n              <p className=\"text-slate-600 mb-4\">The event you're looking for doesn't exist.</p>\n              <Button onClick={() => window.location.href = \"/events\"}>\n                Back to Events\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const availableTickets = eventData.maxAttendees - eventData.currentAttendees;\n  const isEventFull = availableTickets <= 0;\n  const isEventPast = new Date(eventData.endDate) < new Date();\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      {/* Navigation */}\n      <nav className=\"bg-white shadow-sm border-b border-slate-200 px-6 py-4\">\n        <div className=\"max-w-7xl mx-auto flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"ghost\" \n              onClick={() => window.history.back()}\n              className=\"flex items-center space-x-2\"\n            >\n              <ArrowLeft className=\"h-4 w-4\" />\n              <span>Back</span>\n            </Button>\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 bg-primary-500 rounded-lg flex items-center justify-center\">\n                <Calendar className=\"text-white h-5 w-5\" />\n              </div>\n              <h1 className=\"text-xl font-bold text-slate-800\">EventMaster</h1>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            {user ? (\n              <div className=\"flex items-center space-x-3\">\n                <span className=\"text-sm font-medium text-slate-700\">\n                  {user.firstName} {user.lastName}\n                </span>\n                <Button \n                  size=\"sm\"\n                  onClick={() => window.location.href = \"/api/logout\"}\n                  variant=\"outline\"\n                >\n                  Logout\n                </Button>\n              </div>\n            ) : (\n              <Button onClick={() => window.location.href = '/auth-choice'}>\n                Sign In\n              </Button>\n            )}\n          </div>\n        </div>\n      </nav>\n\n      <div className=\"max-w-7xl mx-auto px-6 py-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Event Details */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Event Image */}\n            <div className=\"aspect-video rounded-2xl overflow-hidden\">\n              <img \n                src={eventData.imageUrl || \"https://images.unsplash.com/photo-1540575467063-178a50c2df87?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\"}\n                alt={eventData.name}\n                className=\"w-full h-full object-cover\"\n              />\n            </div>\n\n            {/* Event Info */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <CardTitle className=\"text-3xl font-bold text-slate-800 mb-2\">\n                      {eventData.name}\n                    </CardTitle>\n                    <Badge variant=\"secondary\" className=\"mb-4\">\n                      {eventData.category}\n                    </Badge>\n                  </div>\n                  <Badge \n                    variant={eventData.status === 'active' ? 'default' : 'secondary'}\n                    className={\n                      eventData.status === 'active' ? 'bg-green-100 text-green-800' :\n                      eventData.status === 'upcoming' ? 'bg-blue-100 text-blue-800' :\n                      eventData.status === 'completed' ? 'bg-gray-100 text-gray-800' :\n                      'bg-yellow-100 text-yellow-800'\n                    }\n                  >\n                    {eventData.status}\n                  </Badge>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <p className=\"text-lg text-slate-600 leading-relaxed\">\n                  {eventData.description}\n                </p>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Calendar className=\"h-5 w-5 text-slate-400\" />\n                    <div>\n                      <p className=\"font-medium text-slate-800\">Start Date</p>\n                      <p className=\"text-slate-600\">\n                        {new Date(eventData.startDate).toLocaleDateString()} at{\" \"}\n                        {new Date(eventData.startDate).toLocaleTimeString()}\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-3\">\n                    <Clock className=\"h-5 w-5 text-slate-400\" />\n                    <div>\n                      <p className=\"font-medium text-slate-800\">End Date</p>\n                      <p className=\"text-slate-600\">\n                        {new Date(eventData.endDate).toLocaleDateString()} at{\" \"}\n                        {new Date(eventData.endDate).toLocaleTimeString()}\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-3\">\n                    <MapPin className=\"h-5 w-5 text-slate-400\" />\n                    <div>\n                      <p className=\"font-medium text-slate-800\">Location</p>\n                      <p className=\"text-slate-600\">{eventData.location}</p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-3\">\n                    <Users className=\"h-5 w-5 text-slate-400\" />\n                    <div>\n                      <p className=\"font-medium text-slate-800\">Capacity</p>\n                      <p className=\"text-slate-600\">\n                        {eventData.currentAttendees} / {eventData.maxAttendees} attendees\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Booking Card */}\n          <div className=\"space-y-6\">\n            <Card className=\"sticky top-6\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Ticket className=\"h-5 w-5\" />\n                  <span>Book Tickets</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"text-center\">\n                  <p className=\"text-3xl font-bold text-slate-800\">\n                    ${parseFloat(eventData.ticketPrice).toFixed(2)}\n                  </p>\n                  <p className=\"text-slate-600\">per ticket</p>\n                </div>\n\n                {!isEventPast && !isEventFull && eventData.status !== 'draft' ? (\n                  <>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"quantity\">Number of Tickets</Label>\n                      <Input\n                        id=\"quantity\"\n                        type=\"number\"\n                        min=\"1\"\n                        max={Math.min(10, availableTickets)}\n                        value={ticketQuantity}\n                        onChange={(e) => setTicketQuantity(Math.max(1, parseInt(e.target.value) || 1))}\n                      />\n                      <p className=\"text-sm text-slate-500\">\n                        {availableTickets} tickets available\n                      </p>\n                    </div>\n\n                    <div className=\"border-t pt-4\">\n                      <div className=\"flex justify-between text-lg font-semibold\">\n                        <span>Total:</span>\n                        <span>${(parseFloat(eventData.ticketPrice) * ticketQuantity).toFixed(2)}</span>\n                      </div>\n                    </div>\n\n                    <Button \n                      onClick={handleBookTickets}\n                      disabled={bookingMutation.isPending}\n                      className=\"w-full bg-primary-500 hover:bg-primary-600\"\n                      size=\"lg\"\n                    >\n                      {bookingMutation.isPending ? (\n                        <>\n                          <div className=\"animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full mr-2\" />\n                          Processing...\n                        </>\n                      ) : (\n                        \"Book Now\"\n                      )}\n                    </Button>\n\n                    {!isAuthenticated && (\n                      <p className=\"text-sm text-slate-500 text-center\">\n                        You'll be asked to sign in before completing your booking\n                      </p>\n                    )}\n                  </>\n                ) : (\n                  <div className=\"text-center py-4\">\n                    {isEventPast ? (\n                      <p className=\"text-slate-600\">This event has ended</p>\n                    ) : isEventFull ? (\n                      <p className=\"text-slate-600\">This event is sold out</p>\n                    ) : eventData.status === 'draft' ? (\n                      <p className=\"text-slate-600\">This event is not yet available for booking</p>\n                    ) : (\n                      <p className=\"text-slate-600\">Booking is not available</p>\n                    )}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Event Stats */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Event Stats</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-600\">Tickets Sold</span>\n                    <span className=\"font-medium\">{eventData.currentAttendees}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-600\">Available</span>\n                    <span className=\"font-medium\">{availableTickets}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-600\">Total Capacity</span>\n                    <span className=\"font-medium\">{eventData.maxAttendees}</span>\n                  </div>\n                  <div className=\"w-full bg-slate-200 rounded-full h-2\">\n                    <div \n                      className=\"bg-primary-500 h-2 rounded-full\" \n                      style={{ width: `${(eventData.currentAttendees / eventData.maxAttendees) * 100}%` }}\n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14703},"client/src/pages/events.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Badge } from \"@/components/ui/badge\";\nimport EventCard from \"@/components/event-card\";\nimport { NotificationBell } from \"@/components/notification-center\";\nimport { Calendar, MapPin, Search, User, Bell, Settings, LogOut, Shield, MoreVertical } from \"lucide-react\";\n\nexport default function Events() {\n  const { user, logoutMutation } = useAuth();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [selectedStatus, setSelectedStatus] = useState(\"all\");\n\n  const { data: events, isLoading } = useQuery({\n    queryKey: [\"/api/events\", { \n      search: searchQuery || undefined, \n      category: selectedCategory === \"all\" ? undefined : selectedCategory, \n      status: selectedStatus === \"all\" ? undefined : selectedStatus \n    }],\n    queryFn: () => {\n      const params = new URLSearchParams();\n      if (searchQuery) params.append('search', searchQuery);\n      if (selectedCategory !== \"all\") params.append('category', selectedCategory);\n      if (selectedStatus !== \"all\") params.append('status', selectedStatus);\n      \n      const url = `/api/events${params.toString() ? '?' + params.toString() : ''}`;\n      return fetch(url).then(res => res.json());\n    },\n    retry: false,\n  });\n\n  const categories = [\n    { value: \"all\", label: \"All Tech Events\" },\n    { value: \"conference\", label: \"Tech Conference\" },\n    { value: \"workshop\", label: \"Coding Workshop\" },\n    { value: \"meetup\", label: \"Developer Meetup\" },\n    { value: \"seminar\", label: \"Tech Seminar\" },\n    { value: \"hackathon\", label: \"Hackathon\" },\n    { value: \"webinar\", label: \"Online Webinar\" },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-muted/30 to-primary/5\">\n      {/* Navigation */}\n      <nav className=\"glass-effect sticky top-0 z-50 border-b border-border/50 px-4 lg:px-6 py-4\">\n        <div className=\"max-w-7xl mx-auto flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3 lg:space-x-6\">\n            <div className=\"flex items-center space-x-2 lg:space-x-3\">\n              <div className=\"w-8 lg:w-10 h-8 lg:h-10 bg-primary rounded-xl flex items-center justify-center shadow-glow animate-pulse-slow\">\n                <Calendar className=\"text-primary-foreground h-5 lg:h-6 w-5 lg:w-6\" />\n              </div>\n              <h1 className=\"text-lg lg:text-2xl font-display font-bold gradient-text\">EventMaster</h1>\n            </div>\n            <div className=\"hidden lg:flex space-x-6\">\n              <a href=\"/events\" className=\"text-primary font-semibold\">Events</a>\n              {user && <a href=\"/my-tickets\" className=\"text-muted-foreground hover:text-foreground transition-colors\">My Tickets</a>}\n              <a href=\"/about\" className=\"text-muted-foreground hover:text-foreground transition-colors\">About</a>\n              <a href=\"/contact\" className=\"text-muted-foreground hover:text-foreground transition-colors\">Contact</a>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-2 lg:space-x-4\">\n            <div className=\"relative hidden lg:block\">\n              <Input \n                placeholder=\"Search technology events...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10 w-72 h-11 rounded-xl border-2 focus:border-primary/50 transition-all\"\n              />\n              <Search className=\"absolute left-3 top-3.5 h-4 w-4 text-muted-foreground\" />\n            </div>\n            \n            {user ? (\n              <div className=\"flex items-center space-x-3\">\n                <NotificationBell />\n\n                {/* User Profile Menu */}\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" className=\"flex items-center space-x-2 hover:bg-accent/20 rounded-xl\">\n                      <img \n                        src={user.profileImageUrl || `https://api.dicebear.com/7.x/initials/svg?seed=${user.firstName} ${user.lastName}`} \n                        alt=\"User Avatar\" \n                        className=\"w-8 h-8 rounded-full object-cover\"\n                      />\n                      <span className=\"text-sm font-medium\">{user.firstName} {user.lastName}</span>\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\" className=\"w-56\">\n                    <DropdownMenuLabel>My Account</DropdownMenuLabel>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem onClick={() => window.location.href = '/my-tickets'}>\n                      <Calendar className=\"mr-2 h-4 w-4\" />\n                      My Tickets\n                    </DropdownMenuItem>\n                    <DropdownMenuItem onClick={() => window.location.href = '/profile'}>\n                      <User className=\"mr-2 h-4 w-4\" />\n                      Profile Settings\n                    </DropdownMenuItem>\n                    {user.isAdmin && (\n                      <>\n                        <DropdownMenuSeparator />\n                        <DropdownMenuItem onClick={() => window.location.href = '/admin'}>\n                          <Shield className=\"mr-2 h-4 w-4\" />\n                          Admin Dashboard\n                        </DropdownMenuItem>\n                      </>\n                    )}\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem onClick={() => logoutMutation.mutate()}>\n                      <LogOut className=\"mr-2 h-4 w-4\" />\n                      Logout\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </div>\n            ) : (\n              <Button \n                onClick={() => window.location.href = '/auth-choice'}\n                className=\"bg-primary hover:bg-primary/90 rounded-xl px-6 py-2 transition-all duration-300 hover:scale-105 shadow-glow\"\n              >\n                Sign In\n              </Button>\n            )}\n          </div>\n        </div>\n      </nav>\n\n      {/* Hero Section */}\n      <section className=\"relative overflow-hidden py-8 lg:py-16 px-4 lg:px-6\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-primary/10 via-transparent to-primary/5\" />\n        <div className=\"relative max-w-7xl mx-auto text-center\">\n          <div className=\"inline-flex items-center px-3 lg:px-4 py-2 rounded-full bg-primary/10 text-primary text-xs lg:text-sm font-medium mb-4 lg:mb-6 animate-fade-in\">\n            <MapPin className=\"w-3 lg:w-4 h-3 lg:h-4 mr-2\" />\n            Discover Technology Events Near You\n          </div>\n          <h1 className=\"text-3xl sm:text-4xl lg:text-6xl font-display font-bold gradient-text mb-4 lg:mb-6 animate-slide-up\">\n            Find Your Next Tech Adventure\n          </h1>\n          <p className=\"text-lg lg:text-xl text-muted-foreground max-w-3xl mx-auto mb-6 lg:mb-8 animate-slide-up animation-delay-200\">\n            Connect with the tech community through conferences, workshops, meetups, and hackathons. \n            Expand your knowledge, network with professionals, and stay ahead in technology.\n          </p>\n        </div>\n      </section>\n\n      {/* Filters Section */}\n      <section className=\"px-6 py-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"flex flex-col sm:flex-row gap-4 mb-8\">\n            <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n              <SelectTrigger className=\"w-full sm:w-48\">\n                <SelectValue placeholder=\"Category\" />\n              </SelectTrigger>\n              <SelectContent>\n                {categories.map((category) => (\n                  <SelectItem key={category.value} value={category.value}>\n                    {category.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n              <SelectTrigger className=\"w-full sm:w-48\">\n                <SelectValue placeholder=\"Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"active\">Active</SelectItem>\n                <SelectItem value=\"upcoming\">Upcoming</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Button \n              variant=\"outline\" \n              onClick={() => {\n                setSearchQuery(\"\");\n                setSelectedCategory(\"all\");\n                setSelectedStatus(\"all\");\n              }}\n              className=\"w-full sm:w-auto\"\n            >\n              Clear All\n            </Button>\n          </div>\n\n          <div className=\"text-sm text-muted-foreground mb-4\">\n            {events ? `${events.length} events found` : 'Loading events...'}\n          </div>\n        </div>\n      </section>\n\n      {/* Events Grid */}\n      <section className=\"px-6 pb-16\">\n        <div className=\"max-w-7xl mx-auto\">\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {[...Array(6)].map((_, i) => (\n                <div key={i} className=\"animate-pulse\">\n                  <div className=\"bg-card rounded-xl h-64 border\"></div>\n                </div>\n              ))}\n            </div>\n          ) : events && events.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {events.map((event: any) => (\n                <EventCard key={event.id} event={event} />\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-16\">\n              <Calendar className=\"mx-auto h-16 w-16 text-muted-foreground mb-6\" />\n              <h3 className=\"text-2xl font-semibold text-foreground mb-4\">No events found</h3>\n              <p className=\"text-muted-foreground mb-8 max-w-md mx-auto\">\n                {searchQuery || selectedCategory !== \"all\" || selectedStatus !== \"all\" \n                  ? \"Try adjusting your search criteria or filters.\"\n                  : \"Be the first to discover amazing tech events in your area.\"\n                }\n              </p>\n              <Button \n                onClick={() => {\n                  setSearchQuery(\"\");\n                  setSelectedCategory(\"all\");\n                  setSelectedStatus(\"all\");\n                }}\n                className=\"bg-primary hover:bg-primary/90\"\n              >\n                Clear Filters\n              </Button>\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Popular Categories */}\n      <section className=\"px-6 py-16 bg-muted/30\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-display font-bold mb-4\">Popular Tech Categories</h2>\n            <p className=\"text-muted-foreground max-w-2xl mx-auto\">\n              Explore events by category and discover new areas of technology\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4\">\n            {categories.slice(1).map((category) => (\n              <Button\n                key={category.value}\n                variant=\"outline\"\n                className=\"h-auto p-6 flex flex-col items-center gap-3 hover:bg-primary/5 hover:border-primary/20 transition-all\"\n                onClick={() => setSelectedCategory(category.value)}\n              >\n                <Calendar className=\"h-8 w-8 text-primary\" />\n                <span className=\"text-sm font-medium text-center\">{category.label}</span>\n              </Button>\n            ))}\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":12397},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Calendar, MapPin, Search, Users, Star, Clock } from \"lucide-react\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-accent/30 to-primary/10\">\n      {/* Navigation */}\n      <nav className=\"glass-effect sticky top-0 z-50 border-b border-border/50 px-4 lg:px-6 py-4\">\n        <div className=\"max-w-7xl mx-auto flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2 lg:space-x-3\">\n            <div className=\"w-8 lg:w-10 h-8 lg:h-10 bg-primary rounded-xl flex items-center justify-center shadow-glow animate-pulse-slow\">\n              <Calendar className=\"text-primary-foreground h-4 lg:h-6 w-4 lg:w-6\" />\n            </div>\n            <h1 className=\"text-lg lg:text-2xl font-display font-bold gradient-text\">EventMaster</h1>\n          </div>\n          \n          <div className=\"flex items-center space-x-2 lg:space-x-4\">\n            <Button \n              onClick={() => window.location.href = '/auth'}\n              className=\"bg-primary hover:bg-primary/90 shadow-glow transition-all duration-300 hover:scale-105 text-sm lg:text-base px-3 lg:px-4\"\n            >\n              Sign In\n            </Button>\n          </div>\n        </div>\n      </nav>\n\n      {/* Hero Section */}\n      <section className=\"py-12 lg:py-24 relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-primary/5 via-transparent to-accent/5\"></div>\n        <div className=\"max-w-7xl mx-auto px-4 lg:px-6 text-center relative\">\n          <div className=\"animate-float\">\n            <h1 className=\"text-4xl sm:text-5xl md:text-6xl lg:text-7xl font-display font-bold gradient-text mb-6 lg:mb-8 leading-tight\">\n              Discover Amazing\n              <br />\n              <span className=\"text-foreground\">Events</span>\n            </h1>\n          </div>\n          <p className=\"text-lg sm:text-xl lg:text-2xl text-muted-foreground mb-8 lg:mb-12 max-w-3xl mx-auto font-light leading-relaxed\">\n            From conferences to concerts, find and book tickets for the best events in your area with our premium platform.\n          </p>\n          \n          {/* Event Search */}\n          <div className=\"card-gradient rounded-2xl lg:rounded-3xl shadow-2xl p-4 lg:p-8 max-w-5xl mx-auto border border-border/50\">\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 lg:gap-6\">\n              <div className=\"sm:col-span-2 lg:col-span-1\">\n                <label className=\"block text-sm font-semibold text-foreground mb-2 lg:mb-3\">What</label>\n                <Input \n                  placeholder=\"Event name or keyword\" \n                  className=\"h-10 lg:h-12 rounded-xl border-2 focus:border-primary/50 transition-all text-sm lg:text-base\"\n                />\n              </div>\n              <div className=\"sm:col-span-2 lg:col-span-1\">\n                <label className=\"block text-sm font-semibold text-foreground mb-2 lg:mb-3\">Where</label>\n                <Input \n                  placeholder=\"City or venue\" \n                  className=\"h-10 lg:h-12 rounded-xl border-2 focus:border-primary/50 transition-all text-sm lg:text-base\"\n                />\n              </div>\n              <div className=\"sm:col-span-1\">\n                <label className=\"block text-sm font-semibold text-foreground mb-2 lg:mb-3\">When</label>\n                <Input \n                  type=\"date\" \n                  className=\"h-10 lg:h-12 rounded-xl border-2 focus:border-primary/50 transition-all text-sm lg:text-base\"\n                />\n              </div>\n              <div className=\"flex items-end sm:col-span-1\">\n                <Button \n                  onClick={() => window.location.href = '/events'}\n                  className=\"w-full h-10 lg:h-12 rounded-xl bg-primary hover:bg-primary/90 font-semibold transition-all duration-300 hover:scale-105 shadow-glow text-sm lg:text-base\"\n                >\n                  <Search className=\"w-4 lg:w-5 h-4 lg:h-5 mr-2\" />\n                  <span className=\"hidden sm:inline\">Search Events</span>\n                  <span className=\"sm:hidden\">Search</span>\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features */}\n      <section className=\"py-12 lg:py-24 bg-muted/30\">\n        <div className=\"max-w-7xl mx-auto px-4 lg:px-6\">\n          <div className=\"text-center mb-12 lg:mb-16\">\n            <h2 className=\"text-3xl sm:text-4xl lg:text-5xl font-display font-bold gradient-text mb-4 lg:mb-6\">Why Choose EventMaster?</h2>\n            <p className=\"text-lg lg:text-xl text-muted-foreground max-w-2xl mx-auto\">Everything you need for seamless event discovery and booking</p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 lg:gap-8\">\n            <div className=\"text-center group\">\n              <div className=\"w-20 h-20 bg-primary/10 rounded-2xl flex items-center justify-center mx-auto mb-6 transition-all duration-300 group-hover:bg-primary/20 group-hover:scale-110 shadow-glow\">\n                <Search className=\"w-10 h-10 text-primary\" />\n              </div>\n              <h3 className=\"text-2xl font-display font-semibold text-foreground mb-4\">Easy Discovery</h3>\n              <p className=\"text-muted-foreground leading-relaxed\">Find events that match your interests with our powerful search and filtering tools.</p>\n            </div>\n            \n            <div className=\"text-center group\">\n              <div className=\"w-20 h-20 bg-accent/20 rounded-2xl flex items-center justify-center mx-auto mb-6 transition-all duration-300 group-hover:bg-accent/30 group-hover:scale-110\">\n                <Clock className=\"w-10 h-10 text-accent-foreground\" />\n              </div>\n              <h3 className=\"text-2xl font-display font-semibold text-foreground mb-4\">Instant Booking</h3>\n              <p className=\"text-muted-foreground leading-relaxed\">Book your tickets instantly with our secure email-based confirmation process.</p>\n            </div>\n            \n            <div className=\"text-center group\">\n              <div className=\"w-20 h-20 bg-secondary/50 rounded-2xl flex items-center justify-center mx-auto mb-6 transition-all duration-300 group-hover:bg-secondary/70 group-hover:scale-110\">\n                <Users className=\"w-10 h-10 text-secondary-foreground\" />\n              </div>\n              <h3 className=\"text-2xl font-display font-semibold text-foreground mb-4\">Community</h3>\n              <p className=\"text-muted-foreground leading-relaxed\">Join a community of event enthusiasts and discover new experiences.</p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Popular Categories */}\n      <section className=\"py-20 bg-background\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-display font-bold gradient-text mb-6\">Popular Categories</h2>\n            <p className=\"text-xl text-muted-foreground\">Explore events by category</p>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-6\">\n            {[\n              { name: \"Business\", icon: \"üíº\", color: \"bg-blue-50 hover:bg-blue-100\" },\n              { name: \"Music\", icon: \"üéµ\", color: \"bg-purple-50 hover:bg-purple-100\" },\n              { name: \"Technology\", icon: \"üíª\", color: \"bg-green-50 hover:bg-green-100\" },\n              { name: \"Health\", icon: \"‚ù§Ô∏è\", color: \"bg-red-50 hover:bg-red-100\" },\n              { name: \"Arts\", icon: \"üé®\", color: \"bg-yellow-50 hover:bg-yellow-100\" },\n              { name: \"Gaming\", icon: \"üéÆ\", color: \"bg-indigo-50 hover:bg-indigo-100\" },\n            ].map((category) => (\n              <div\n                key={category.name}\n                className={`${category.color} dark:bg-card rounded-2xl shadow-sm p-6 text-center hover:shadow-lg transition-all duration-300 cursor-pointer hover:scale-105 border border-border/50`}\n              >\n                <div className=\"text-4xl mb-4\">{category.icon}</div>\n                <h3 className=\"font-semibold text-foreground\">{category.name}</h3>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 bg-primary text-primary-foreground relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-primary/90 to-primary\"></div>\n        <div className=\"max-w-4xl mx-auto px-6 text-center relative z-10\">\n          <h2 className=\"text-4xl md:text-5xl font-display font-bold mb-6\">Ready to Get Started?</h2>\n          <p className=\"text-xl mb-8 text-primary-foreground/90\">Join thousands of event enthusiasts and start discovering amazing experiences.</p>\n          <Button \n            onClick={() => window.location.href = '/events'}\n            className=\"bg-background text-foreground hover:bg-background/90 px-8 py-4 text-lg rounded-xl shadow-2xl transition-all duration-300 hover:scale-105\"\n          >\n            Explore Events Now\n          </Button>\n        </div>\n        <div className=\"max-w-4xl mx-auto px-6 text-center\">\n          <h2 className=\"text-3xl font-bold text-white mb-4\">Ready to Discover Events?</h2>\n          <p className=\"text-xl text-blue-100 mb-8\">\n            Join thousands of users who trust EventMaster for their event needs.\n          </p>\n          <Button \n            size=\"lg\"\n            onClick={() => window.location.href = '/api/login'}\n            className=\"bg-white text-primary-500 hover:bg-gray-100\"\n          >\n            Get Started Today\n          </Button>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-slate-800 text-white py-12\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <div className=\"text-center\">\n            <div className=\"flex items-center justify-center space-x-3 mb-4\">\n              <div className=\"w-8 h-8 bg-primary-500 rounded-lg flex items-center justify-center\">\n                <Calendar className=\"text-white h-5 w-5\" />\n              </div>\n              <h3 className=\"text-xl font-bold\">EventMaster</h3>\n            </div>\n            <p className=\"text-slate-400 mb-6\">The ultimate event management platform</p>\n            <div className=\"flex items-center justify-center space-x-6 text-sm text-slate-400\">\n              <a href=\"#\" className=\"hover:text-white\">Privacy Policy</a>\n              <a href=\"#\" className=\"hover:text-white\">Terms of Service</a>\n              <a href=\"#\" className=\"hover:text-white\">Contact Us</a>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":10842},"client/src/pages/my-tickets.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar, MapPin, Clock, ArrowLeft } from \"lucide-react\";\n\nexport default function MyTickets() {\n  const { user } = useAuth();\n\n  const { data: bookings, isLoading } = useQuery({\n    queryKey: [\"/api/bookings\"],\n    enabled: !!user,\n  });\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold mb-4\">Please Sign In</h2>\n          <p className=\"text-muted-foreground mb-6\">You need to sign in to view your tickets.</p>\n          <Button onClick={() => window.location.href = '/auth-choice'}>\n            Sign In\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-muted/30 to-primary/5\">\n      <div className=\"container mx-auto px-6 py-8\">\n        <div className=\"mb-8\">\n          <Button \n            variant=\"ghost\" \n            onClick={() => window.location.href = '/events'}\n            className=\"mb-4\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Events\n          </Button>\n          <h1 className=\"text-4xl font-bold gradient-text mb-2\">My Tickets</h1>\n          <p className=\"text-muted-foreground\">View all your event bookings and tickets</p>\n        </div>\n\n        {isLoading ? (\n          <div className=\"grid gap-6\">\n            {[...Array(3)].map((_, i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <CardContent className=\"p-6\">\n                  <div className=\"h-6 bg-muted rounded w-1/3 mb-4\"></div>\n                  <div className=\"h-4 bg-muted rounded w-1/2 mb-2\"></div>\n                  <div className=\"h-4 bg-muted rounded w-1/4\"></div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : bookings && Array.isArray(bookings) && bookings.length > 0 ? (\n          <div className=\"grid gap-6\">\n            {bookings.map((booking: any) => (\n              <Card key={booking.id} className=\"glass-effect\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex gap-6\">\n                    {/* Event Image */}\n                    <div className=\"w-24 h-24 rounded-lg overflow-hidden bg-muted flex-shrink-0\">\n                      {booking.event?.imageUrl ? (\n                        <img \n                          src={booking.event.imageUrl} \n                          alt={booking.event.name} \n                          className=\"w-full h-full object-cover\"\n                        />\n                      ) : (\n                        <div className=\"w-full h-full bg-gradient-to-br from-primary/20 to-secondary/20 flex items-center justify-center\">\n                          <Calendar className=\"w-8 h-8 text-primary\" />\n                        </div>\n                      )}\n                    </div>\n\n                    {/* Event Details */}\n                    <div className=\"flex-1\">\n                      <div className=\"flex justify-between items-start mb-4\">\n                        <div>\n                          <h3 className=\"text-xl font-semibold mb-2\">{booking.event?.name}</h3>\n                          <div className=\"flex items-center text-muted-foreground text-sm mb-2\">\n                            <Calendar className=\"w-4 h-4 mr-2\" />\n                            {booking.event?.startDate \n                              ? (() => {\n                                  const startDate = new Date(booking.event.startDate);\n                                  const endDate = booking.event.endDate ? new Date(booking.event.endDate) : null;\n                                  \n                                  if (endDate && startDate.toDateString() !== endDate.toDateString()) {\n                                    return `${startDate.toLocaleDateString('en-US', {\n                                      month: 'short',\n                                      day: 'numeric'\n                                    })} - ${endDate.toLocaleDateString('en-US', {\n                                      year: 'numeric',\n                                      month: 'short',\n                                      day: 'numeric'\n                                    })}`;\n                                  } else {\n                                    return startDate.toLocaleDateString('en-US', {\n                                      year: 'numeric',\n                                      month: 'short',\n                                      day: 'numeric'\n                                    });\n                                  }\n                                })()\n                              : 'Event Date TBD'\n                            }\n                          </div>\n                          <div className=\"flex items-center text-muted-foreground text-sm\">\n                            <MapPin className=\"w-4 h-4 mr-2\" />\n                            {booking.event?.location || 'Location TBD'}\n                          </div>\n                        </div>\n                        <Badge variant={booking.status === 'confirmed' ? 'default' : 'secondary'}>\n                          {booking.status}\n                        </Badge>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"border-t pt-4 mt-4\">\n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                      <div>\n                        <p className=\"text-muted-foreground\">Tickets</p>\n                        <p className=\"font-semibold\">{booking.quantity}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-muted-foreground\">Total Paid</p>\n                        <p className=\"font-semibold\">${booking.totalAmount}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-muted-foreground\">Reference</p>\n                        <p className=\"font-semibold font-mono\">{booking.bookingReference || booking.referenceCode}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-muted-foreground\">Booked On</p>\n                        <p className=\"font-semibold\">\n                          {booking.createdAt \n                            ? new Date(booking.createdAt).toLocaleDateString('en-US', {\n                                year: 'numeric',\n                                month: 'short',\n                                day: 'numeric'\n                              })\n                            : 'N/A'\n                          }\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-16\">\n            <Calendar className=\"mx-auto h-16 w-16 text-muted-foreground mb-6\" />\n            <h3 className=\"text-2xl font-semibold mb-4\">No tickets yet</h3>\n            <p className=\"text-muted-foreground mb-8\">\n              You haven't booked any events yet. Discover amazing tech events and get your tickets!\n            </p>\n            <Button onClick={() => window.location.href = '/events'}>\n              Browse Events\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":7723},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/profile.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, User, Mail, Shield, Calendar, Settings, Ticket, Bell } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function Profile() {\n  const { user, logoutMutation } = useAuth();\n  const { toast } = useToast();\n  const [isEditing, setIsEditing] = useState(false);\n  const [formData, setFormData] = useState({\n    firstName: user?.firstName || \"\",\n    lastName: user?.lastName || \"\",\n    email: user?.email || \"\",\n  });\n\n  // Fetch user's bookings to calculate statistics\n  const { data: bookings } = useQuery({\n    queryKey: [\"/api/bookings\"],\n    enabled: !!user,\n  });\n\n  // Fetch user's notifications  \n  const { data: notifications } = useQuery({\n    queryKey: [\"/api/notifications\"],\n    enabled: !!user,\n  });\n\n  // Calculate user statistics\n  const userStats = {\n    totalTickets: bookings ? bookings.reduce((sum: number, booking: any) => sum + booking.quantity, 0) : 0,\n    eventsAttended: bookings ? new Set(bookings.map((booking: any) => booking.eventId)).size : 0,\n    memberSince: user?.createdAt ? new Date(user.createdAt).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long'\n    }) : 'Recently'\n  };\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold mb-4\">Please Sign In</h2>\n          <p className=\"text-muted-foreground mb-6\">You need to sign in to view your profile.</p>\n          <Button onClick={() => window.location.href = '/auth-choice'}>\n            Sign In\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const handleSave = async () => {\n    try {\n      // In a real implementation, you would make an API call to update the profile\n      toast({\n        title: \"Profile Updated\",\n        description: \"Your profile has been successfully updated.\",\n      });\n      setIsEditing(false);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update profile. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-muted/30 to-primary/5\">\n      <div className=\"container mx-auto px-6 py-8 max-w-4xl\">\n        <div className=\"mb-8\">\n          <Button \n            variant=\"ghost\" \n            onClick={() => window.location.href = '/events'}\n            className=\"mb-4\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Events\n          </Button>\n          <h1 className=\"text-4xl font-bold gradient-text mb-2\">Profile Settings</h1>\n          <p className=\"text-muted-foreground\">Manage your account settings and preferences</p>\n        </div>\n\n        <div className=\"grid gap-6\">\n          {/* Profile Information */}\n          <Card className=\"glass-effect\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"flex items-center gap-2\">\n                  <User className=\"w-5 h-5\" />\n                  Profile Information\n                </CardTitle>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  onClick={() => setIsEditing(!isEditing)}\n                >\n                  <Settings className=\"w-4 h-4 mr-2\" />\n                  {isEditing ? \"Cancel\" : \"Edit\"}\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"flex items-center space-x-4\">\n                <img \n                  src={user.profileImageUrl || `https://api.dicebear.com/7.x/initials/svg?seed=${user.firstName} ${user.lastName}`} \n                  alt=\"Profile Avatar\" \n                  className=\"w-20 h-20 rounded-full object-cover border-2 border-primary/20\"\n                />\n                <div>\n                  <h3 className=\"text-xl font-semibold\">{user.firstName} {user.lastName}</h3>\n                  <p className=\"text-muted-foreground\">{user.email}</p>\n                  {user.isAdmin && (\n                    <Badge variant=\"secondary\" className=\"mt-1\">\n                      <Shield className=\"w-3 h-3 mr-1\" />\n                      Administrator\n                    </Badge>\n                  )}\n                </div>\n              </div>\n\n              <Separator />\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"firstName\">First Name</Label>\n                  <Input\n                    id=\"firstName\"\n                    value={formData.firstName}\n                    onChange={(e) => setFormData({ ...formData, firstName: e.target.value })}\n                    disabled={!isEditing}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"lastName\">Last Name</Label>\n                  <Input\n                    id=\"lastName\"\n                    value={formData.lastName}\n                    onChange={(e) => setFormData({ ...formData, lastName: e.target.value })}\n                    disabled={!isEditing}\n                  />\n                </div>\n                <div className=\"space-y-2 md:col-span-2\">\n                  <Label htmlFor=\"email\">Email Address</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={formData.email}\n                    onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                    disabled={!isEditing}\n                  />\n                </div>\n              </div>\n\n              {isEditing && (\n                <div className=\"flex justify-end space-x-2\">\n                  <Button variant=\"outline\" onClick={() => setIsEditing(false)}>\n                    Cancel\n                  </Button>\n                  <Button onClick={handleSave}>\n                    Save Changes\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Account Statistics */}\n          <Card className=\"glass-effect\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Calendar className=\"w-5 h-5\" />\n                Account Statistics\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-primary mb-2\">{userStats.eventsAttended}</div>\n                  <div className=\"text-sm text-muted-foreground\">Events Attended</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-primary mb-2\">{userStats.totalTickets}</div>\n                  <div className=\"text-sm text-muted-foreground\">Total Tickets</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-primary mb-2\">{userStats.memberSince}</div>\n                  <div className=\"text-sm text-muted-foreground\">Member Since</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Recent Tickets */}\n          <Card className=\"glass-effect\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Ticket className=\"w-5 h-5\" />\n                Recent Tickets\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {bookings && bookings.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {bookings.slice(0, 3).map((booking: any) => (\n                    <div key={booking.id} className=\"flex items-center gap-4 p-4 rounded-lg border\">\n                      {/* Event Image */}\n                      <div className=\"w-16 h-16 rounded-lg overflow-hidden bg-muted flex-shrink-0\">\n                        {booking.event?.imageUrl ? (\n                          <img \n                            src={booking.event.imageUrl} \n                            alt={booking.event?.name} \n                            className=\"w-full h-full object-cover\"\n                          />\n                        ) : (\n                          <div className=\"w-full h-full bg-gradient-to-br from-primary/20 to-secondary/20 flex items-center justify-center\">\n                            <Calendar className=\"w-6 h-6 text-primary\" />\n                          </div>\n                        )}\n                      </div>\n                      \n                      {/* Event Details */}\n                      <div className=\"flex-1 min-w-0\">\n                        <h4 className=\"font-semibold truncate\">{booking.event?.name || 'Event'}</h4>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {booking.quantity} ticket{booking.quantity > 1 ? 's' : ''} ‚Ä¢ ${booking.totalAmount}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {booking.event?.startDate \n                            ? new Date(booking.event.startDate).toLocaleDateString('en-US', {\n                                month: 'short',\n                                day: 'numeric',\n                                year: 'numeric'\n                              })\n                            : 'Date TBD'\n                          }\n                        </p>\n                      </div>\n                      \n                      <Badge variant={booking.status === 'confirmed' ? 'default' : 'secondary'} className=\"flex-shrink-0\">\n                        {booking.status}\n                      </Badge>\n                    </div>\n                  ))}\n                  <div className=\"text-center pt-4\">\n                    <Button variant=\"outline\" onClick={() => window.location.href = '/my-tickets'}>\n                      View All Tickets\n                    </Button>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Ticket className=\"mx-auto h-12 w-12 mb-4\" />\n                  <p>No tickets purchased yet</p>\n                  <Button variant=\"outline\" className=\"mt-4\" onClick={() => window.location.href = '/events'}>\n                    Browse Events\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Notifications Section */}\n          <Card className=\"glass-effect\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Bell className=\"w-5 h-5\" />\n                Recent Notifications\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {notifications && notifications.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {notifications.slice(0, 5).map((notification: any) => (\n                    <div key={notification.id} className=\"flex items-start gap-3 p-3 rounded-lg border\">\n                      <div className=\"w-2 h-2 rounded-full bg-primary mt-2 flex-shrink-0\"></div>\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm\">{notification.message}</p>\n                        <p className=\"text-xs text-muted-foreground mt-1\">\n                          {notification.createdAt \n                            ? new Date(notification.createdAt).toLocaleDateString('en-US', {\n                                month: 'short',\n                                day: 'numeric',\n                                hour: '2-digit',\n                                minute: '2-digit'\n                              })\n                            : 'Recently'\n                          }\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Bell className=\"mx-auto h-12 w-12 mb-4\" />\n                  <p>No notifications yet</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Admin Section */}\n          {user.isAdmin && (\n            <Card className=\"glass-effect border-primary/20\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-primary\">\n                  <Shield className=\"w-5 h-5\" />\n                  Administrator Access\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground mb-4\">\n                  You have administrator privileges. Access the admin dashboard to manage events, users, and analytics.\n                </p>\n                <Button \n                  onClick={() => window.location.href = '/admin'}\n                  className=\"bg-primary hover:bg-primary/90\"\n                >\n                  <Shield className=\"w-4 h-4 mr-2\" />\n                  Go to Admin Dashboard\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Account Actions */}\n          <Card className=\"glass-effect\">\n            <CardHeader>\n              <CardTitle>Account Actions</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <div>\n                  <h4 className=\"font-medium\">Sign Out</h4>\n                  <p className=\"text-sm text-muted-foreground\">Sign out of your account</p>\n                </div>\n                <Button \n                  variant=\"outline\" \n                  onClick={() => logoutMutation.mutate()}\n                  disabled={logoutMutation.isPending}\n                >\n                  {logoutMutation.isPending ? \"Signing out...\" : \"Sign Out\"}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":14745},"client/src/pages/users.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Users, Search, Calendar, Mail, User, Filter, Download } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { format } from \"date-fns\";\n\nexport default function UsersPage() {\n  const { user } = useAuth();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [roleFilter, setRoleFilter] = useState(\"all\");\n\n  const { data: users, isLoading: usersLoading, error: usersError } = useQuery({\n    queryKey: [\"/api/users\"],\n    retry: false,\n  });\n\n  const { data: bookings, isLoading: bookingsLoading } = useQuery({\n    queryKey: [\"/api/bookings\"],\n    retry: false,\n  });\n\n  // Filter users based on search and role\n  const filteredUsers = users?.filter((u: any) => {\n    const matchesSearch = !searchQuery || \n      u.firstName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      u.lastName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      u.email?.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesRole = roleFilter === \"all\" || \n      (roleFilter === \"admin\" && u.isAdmin) ||\n      (roleFilter === \"user\" && !u.isAdmin);\n    \n    return matchesSearch && matchesRole;\n  }) || [];\n\n  // Get user booking statistics\n  const getUserStats = (userId: string) => {\n    if (!bookings) return { totalBookings: 0, totalSpent: 0, lastBooking: null };\n    \n    const userBookings = bookings.filter((b: any) => b.userId === userId);\n    const totalBookings = userBookings.length;\n    const totalSpent = userBookings.reduce((sum: number, b: any) => sum + parseFloat(b.totalAmount || 0), 0);\n    const lastBooking = userBookings.sort((a: any, b: any) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())[0];\n    \n    return { totalBookings, totalSpent, lastBooking };\n  };\n\n  const exportUsers = async () => {\n    try {\n      const response = await fetch('/api/export/users', {\n        method: 'GET',\n        credentials: 'include',\n      });\n      \n      if (response.ok) {\n        const blob = await response.blob();\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = 'users-export.csv';\n        document.body.appendChild(a);\n        a.click();\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(a);\n      }\n    } catch (error) {\n      console.error('Export failed:', error);\n    }\n  };\n\n  if (usersLoading || bookingsLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-background to-muted/50 p-4 lg:p-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"flex items-center justify-center h-64\">\n            <div className=\"animate-spin w-8 h-8 border-2 border-primary border-t-transparent rounded-full\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (usersError) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-background to-muted/50 p-4 lg:p-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <Card className=\"border-red-200 bg-red-50\">\n            <CardContent className=\"p-6 text-center\">\n              <p className=\"text-red-600\">Error loading users. Please check your permissions.</p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background to-muted/50 p-4 lg:p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground flex items-center gap-2\">\n              <Users className=\"w-8 h-8 text-primary\" />\n              User Management\n            </h1>\n            <p className=\"text-muted-foreground mt-1\">\n              Manage registered users and view their activity\n            </p>\n          </div>\n          \n          <div className=\"flex flex-col sm:flex-row gap-3\">\n            <Button onClick={exportUsers} variant=\"outline\" className=\"flex items-center gap-2\">\n              <Download className=\"w-4 h-4\" />\n              Export Users\n            </Button>\n          </div>\n        </div>\n\n        {/* Search and Filters */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex flex-col lg:flex-row gap-4\">\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-3 top-3 w-4 h-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search users by name or email...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n              <div className=\"flex gap-2\">\n                <Button\n                  variant={roleFilter === \"all\" ? \"default\" : \"outline\"}\n                  onClick={() => setRoleFilter(\"all\")}\n                  size=\"sm\"\n                >\n                  All Users\n                </Button>\n                <Button\n                  variant={roleFilter === \"admin\" ? \"default\" : \"outline\"}\n                  onClick={() => setRoleFilter(\"admin\")}\n                  size=\"sm\"\n                >\n                  Admins\n                </Button>\n                <Button\n                  variant={roleFilter === \"user\" ? \"default\" : \"outline\"}\n                  onClick={() => setRoleFilter(\"user\")}\n                  size=\"sm\"\n                >\n                  Users\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Users Stats Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total Users</p>\n                  <p className=\"text-2xl font-bold text-foreground\">{users?.length || 0}</p>\n                </div>\n                <Users className=\"w-8 h-8 text-primary\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Admin Users</p>\n                  <p className=\"text-2xl font-bold text-foreground\">\n                    {users?.filter((u: any) => u.isAdmin).length || 0}\n                  </p>\n                </div>\n                <User className=\"w-8 h-8 text-orange-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Active Bookings</p>\n                  <p className=\"text-2xl font-bold text-foreground\">\n                    {bookings?.filter((b: any) => b.status === 'confirmed').length || 0}\n                  </p>\n                </div>\n                <Calendar className=\"w-8 h-8 text-green-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total Revenue</p>\n                  <p className=\"text-2xl font-bold text-foreground\">\n                    ${bookings?.reduce((sum: number, b: any) => sum + parseFloat(b.totalAmount || 0), 0).toFixed(2) || '0.00'}\n                  </p>\n                </div>\n                <Mail className=\"w-8 h-8 text-blue-500\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Users Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Users ({filteredUsers.length})</CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-6\">\n            {filteredUsers.length > 0 ? (\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full border-collapse\">\n                  <thead>\n                    <tr className=\"border-b border-slate-200\">\n                      <th className=\"text-left p-4 font-semibold text-slate-700\">User</th>\n                      <th className=\"text-left p-4 font-semibold text-slate-700\">Email</th>\n                      <th className=\"text-left p-4 font-semibold text-slate-700\">Role</th>\n                      <th className=\"text-left p-4 font-semibold text-slate-700\">Bookings</th>\n                      <th className=\"text-left p-4 font-semibold text-slate-700\">Total Spent</th>\n                      <th className=\"text-left p-4 font-semibold text-slate-700\">Last Activity</th>\n                      <th className=\"text-left p-4 font-semibold text-slate-700\">Joined</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {filteredUsers.map((userItem: any) => {\n                      const stats = getUserStats(userItem.id);\n                      return (\n                        <tr key={userItem.id} className=\"border-b border-slate-100 hover:bg-slate-50\">\n                          <td className=\"p-4\">\n                            <div className=\"flex items-center space-x-3\">\n                              <Avatar className=\"w-8 h-8\">\n                                <AvatarFallback>\n                                  {(userItem.firstName?.[0] || '') + (userItem.lastName?.[0] || '')}\n                                </AvatarFallback>\n                              </Avatar>\n                              <div>\n                                <p className=\"font-medium text-slate-800\">\n                                  {userItem.firstName} {userItem.lastName}\n                                </p>\n                                <p className=\"text-sm text-slate-500\">ID: {userItem.id}</p>\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"p-4\">\n                            <p className=\"text-slate-800\">{userItem.email}</p>\n                          </td>\n                          <td className=\"p-4\">\n                            <Badge variant={userItem.isAdmin ? \"default\" : \"secondary\"}>\n                              {userItem.isAdmin ? \"Admin\" : \"User\"}\n                            </Badge>\n                          </td>\n                          <td className=\"p-4\">\n                            <p className=\"font-medium text-slate-800\">{stats.totalBookings}</p>\n                          </td>\n                          <td className=\"p-4\">\n                            <p className=\"font-medium text-green-600\">${stats.totalSpent.toFixed(2)}</p>\n                          </td>\n                          <td className=\"p-4\">\n                            <p className=\"text-slate-600\">\n                              {stats.lastBooking \n                                ? format(new Date(stats.lastBooking.createdAt), 'MMM dd, yyyy')\n                                : 'No activity'\n                              }\n                            </p>\n                          </td>\n                          <td className=\"p-4\">\n                            <p className=\"text-slate-600\">\n                              {userItem.createdAt \n                                ? format(new Date(userItem.createdAt), 'MMM dd, yyyy')\n                                : 'Unknown'\n                              }\n                            </p>\n                          </td>\n                        </tr>\n                      );\n                    })}\n                  </tbody>\n                </table>\n              </div>\n            ) : (\n              <div className=\"text-center py-12\">\n                <Users className=\"mx-auto h-12 w-12 text-slate-400 mb-4\" />\n                <h3 className=\"text-lg font-medium text-slate-800 mb-2\">No users found</h3>\n                <p className=\"text-slate-600\">\n                  {searchQuery ? \"Try adjusting your search criteria\" : \"No users are registered yet\"}\n                </p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":12886},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }","size_bytes":776},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }","size_bytes":1641},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/mongodb-storage.ts":{"content":"import mongoose from 'mongoose';\nimport { connectToDatabase } from './mongodb';\nimport { \n  UserModel, \n  EventModel, \n  BookingModel, \n  NotificationModel, \n  ContactMessageModel,\n  type User,\n  type Event,\n  type Booking,\n  type Notification,\n  type ContactMessage,\n  type UpsertUser,\n  type InsertEvent,\n  type InsertBooking,\n  type InsertNotification,\n  type InsertContactMessage,\n  type EventWithBookings,\n  type BookingWithEvent\n} from '@shared/mongodb-schema';\nimport type { IStorage } from './storage';\n\nexport class MongoStorage implements IStorage {\n  constructor() {\n    connectToDatabase();\n  }\n\n  // User operations  \n  async getUser(id: string): Promise<User | undefined> {\n    try {\n      const user = await UserModel.findById(id).exec();\n      if (!user) return undefined;\n      \n      const userObj = user.toObject();\n      return {\n        id: userObj._id.toString(),\n        email: userObj.email || '',\n        username: userObj.username || null,\n        password: userObj.password || null,\n        firstName: userObj.firstName || null,\n        lastName: userObj.lastName || null,\n        profileImageUrl: userObj.profileImageUrl || null,\n        isAdmin: Boolean(userObj.isAdmin),\n        stripeCustomerId: userObj.stripeCustomerId || null,\n        authProvider: userObj.authProvider || 'local',\n        authProviderId: userObj.authProviderId || null,\n        createdAt: userObj.createdAt || new Date(),\n        updatedAt: userObj.updatedAt || new Date(),\n      };\n    } catch (error) {\n      console.error('Error getting user:', error);\n      return undefined;\n    }\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    try {\n      const user = await UserModel.findOne({ email }).exec();\n      if (!user) return undefined;\n      \n      const userObj = user.toObject();\n      return {\n        id: userObj._id.toString(),\n        email: userObj.email || '',\n        username: userObj.username || null,\n        password: userObj.password || null,\n        firstName: userObj.firstName || null,\n        lastName: userObj.lastName || null,\n        profileImageUrl: userObj.profileImageUrl || null,\n        isAdmin: Boolean(userObj.isAdmin),\n        stripeCustomerId: userObj.stripeCustomerId || null,\n        authProvider: userObj.authProvider || 'local',\n        authProviderId: userObj.authProviderId || null,\n        createdAt: userObj.createdAt || new Date(),\n        updatedAt: userObj.updatedAt || new Date(),\n      };\n    } catch (error) {\n      console.error('Error getting user by email:', error);\n      return undefined;\n    }\n  }\n\n  async getUsers(): Promise<User[]> {\n    try {\n      const users = await UserModel.find().sort({ createdAt: -1 }).exec();\n      return users.map(user => {\n        const userObj = user.toObject();\n        return {\n          id: userObj._id.toString(),\n          email: userObj.email || '',\n          username: userObj.username || null,\n          password: userObj.password || null,\n          firstName: userObj.firstName || null,\n          lastName: userObj.lastName || null,\n          profileImageUrl: userObj.profileImageUrl || null,\n          isAdmin: Boolean(userObj.isAdmin),\n          stripeCustomerId: userObj.stripeCustomerId || null,\n          authProvider: userObj.authProvider || 'local',\n          authProviderId: userObj.authProviderId || null,\n          createdAt: userObj.createdAt || new Date(),\n          updatedAt: userObj.updatedAt || new Date(),\n        };\n      });\n    } catch (error) {\n      console.error('Error getting users:', error);\n      return [];\n    }\n  }\n\n  async upsertUser(userData: Partial<UpsertUser> & { id: string }): Promise<User> {\n    try {\n      const updateData = {\n        ...userData,\n        updatedAt: new Date()\n      };\n      \n      const user = await UserModel.findByIdAndUpdate(\n        userData.id,\n        updateData,\n        { new: true, upsert: true, setDefaultsOnInsert: true }\n      ).exec();\n      \n      const userObj = user!.toObject();\n      return {\n        id: userObj._id.toString(),\n        email: userObj.email || '',\n        username: userObj.username || null,\n        password: userObj.password || null,\n        firstName: userObj.firstName || null,\n        lastName: userObj.lastName || null,\n        profileImageUrl: userObj.profileImageUrl || null,\n        isAdmin: Boolean(userObj.isAdmin),\n        stripeCustomerId: userObj.stripeCustomerId || null,\n        authProvider: userObj.authProvider || 'local',\n        authProviderId: userObj.authProviderId || null,\n        createdAt: userObj.createdAt || new Date(),\n        updatedAt: userObj.updatedAt || new Date(),\n      };\n    } catch (error) {\n      console.error('Error upserting user:', error);\n      throw error;\n    }\n  }\n\n  async createUser(userData: Partial<UpsertUser> & { email: string }): Promise<User> {\n    try {\n      const id = new mongoose.Types.ObjectId().toString();\n      const user = new UserModel({\n        _id: id,\n        ...userData,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      });\n      \n      await user.save();\n      const userObj = user.toObject();\n      return {\n        id: userObj._id.toString(),\n        email: userObj.email || '',\n        username: userObj.username || null,\n        password: userObj.password || null,\n        firstName: userObj.firstName || null,\n        lastName: userObj.lastName || null,\n        profileImageUrl: userObj.profileImageUrl || null,\n        isAdmin: Boolean(userObj.isAdmin),\n        stripeCustomerId: userObj.stripeCustomerId || null,\n        authProvider: userObj.authProvider || 'local',\n        authProviderId: userObj.authProviderId || null,\n        createdAt: userObj.createdAt || new Date(),\n        updatedAt: userObj.updatedAt || new Date(),\n      };\n    } catch (error) {\n      console.error('Error creating user:', error);\n      throw error;\n    }\n  }\n\n  // Event operations\n  async createEvent(eventData: any): Promise<Event> {\n    try {\n      const id = new mongoose.Types.ObjectId().toString();\n      const event = new EventModel({\n        _id: id,\n        ...eventData,\n        organizerId: eventData.createdBy || eventData.organizerId,\n        createdBy: eventData.createdBy || eventData.organizerId,\n        currentAttendees: eventData.currentAttendees || 0,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      });\n      \n      await event.save();\n      const eventObj = event.toObject();\n      return {\n        id: parseInt(eventObj._id.toString()) || 0,\n        name: eventObj.name || '',\n        description: eventObj.description || null,\n        startDate: eventObj.startDate || new Date(),\n        endDate: eventObj.endDate || new Date(),\n        location: eventObj.location || '',\n        ticketPrice: eventObj.ticketPrice || '0',\n        maxAttendees: eventObj.maxAttendees || 0,\n        currentAttendees: eventObj.currentAttendees || 0,\n        category: eventObj.category || '',\n        status: eventObj.status || 'draft',\n        imageUrl: eventObj.imageUrl || null,\n        createdBy: eventObj.createdBy || '',\n        createdAt: eventObj.createdAt || new Date(),\n        updatedAt: eventObj.updatedAt || new Date(),\n      };\n    } catch (error) {\n      console.error('Error creating event:', error);\n      throw error;\n    }\n  }\n\n  async getEvents(filters?: { search?: string; category?: string; status?: string }): Promise<Event[]> {\n    try {\n      let query: any = {};\n      \n      if (filters?.search) {\n        query.$or = [\n          { name: { $regex: filters.search, $options: 'i' } },\n          { description: { $regex: filters.search, $options: 'i' } }\n        ];\n      }\n      \n      if (filters?.category) {\n        query.category = filters.category;\n      }\n      \n      if (filters?.status) {\n        query.status = filters.status;\n      }\n      \n      const events = await EventModel.find(query).sort({ startDate: 1 }).exec();\n      return events.map(event => {\n        const eventObj = event.toObject();\n        return {\n          id: parseInt(eventObj._id.toString()) || 0,\n          name: eventObj.name || '',\n          description: eventObj.description || null,\n          startDate: eventObj.startDate || new Date(),\n          endDate: eventObj.endDate || new Date(),\n          location: eventObj.location || '',\n          ticketPrice: eventObj.ticketPrice || '0',\n          maxAttendees: eventObj.maxAttendees || 0,\n          currentAttendees: eventObj.currentAttendees || 0,\n          category: eventObj.category || '',\n          status: eventObj.status || 'draft',\n          imageUrl: eventObj.imageUrl || null,\n          createdBy: eventObj.createdBy || eventObj.organizerId,\n          createdAt: eventObj.createdAt,\n          updatedAt: eventObj.updatedAt,\n        };\n      });\n    } catch (error) {\n      console.error('Error getting events:', error);\n      return [];\n    }\n  }\n\n  async getEvent(id: number): Promise<any> {\n    try {\n      // Get all events and find the one that matches the numeric ID\n      const events = await this.getEvents({});\n      const event = events.find(e => e.id === id);\n      \n      if (!event) return undefined;\n      \n      // Get bookings for this event\n      const bookings = await BookingModel.find({ \n        eventId: event.id.toString() \n      }).exec();\n      \n      return {\n        ...event,\n        bookings: bookings.map(booking => {\n          const bookingObj = booking.toObject();\n          return {\n            id: parseInt(bookingObj._id) || bookingObj._id,\n            eventId: parseInt(bookingObj.eventId) || bookingObj.eventId,\n            userId: bookingObj.userId,\n            quantity: bookingObj.quantity,\n            totalAmount: bookingObj.totalAmount,\n            status: bookingObj.status,\n            stripePaymentIntentId: bookingObj.stripePaymentIntentId,\n            bookingReference: bookingObj.bookingReference,\n            attendeeEmail: bookingObj.attendeeEmail,\n            attendeeName: bookingObj.attendeeName,\n            createdAt: bookingObj.createdAt,\n            updatedAt: bookingObj.updatedAt,\n          };\n        })\n      };\n    } catch (error) {\n      console.error('Error getting event:', error);\n      return undefined;\n    }\n  }\n\n  async updateEvent(id: number, updates: Partial<InsertEvent>): Promise<Event> {\n    try {\n      const event = await EventModel.findByIdAndUpdate(\n        id.toString(),\n        { ...updates, updatedAt: new Date() },\n        { new: true }\n      ).exec();\n      \n      if (!event) throw new Error('Event not found');\n      return { ...event.toObject(), id: event._id };\n    } catch (error) {\n      console.error('Error updating event:', error);\n      throw error;\n    }\n  }\n\n  async deleteEvent(id: number): Promise<void> {\n    try {\n      await EventModel.findByIdAndDelete(id.toString()).exec();\n    } catch (error) {\n      console.error('Error deleting event:', error);\n      throw error;\n    }\n  }\n\n  async updateEventAttendeeCount(eventId: number): Promise<void> {\n    try {\n      console.log('üé´ Updating attendee count for event ID:', eventId);\n      \n      const confirmedBookings = await BookingModel.find({\n        eventId: eventId.toString(),\n        status: 'confirmed'\n      }).exec();\n      \n      console.log('üìä Found confirmed bookings:', confirmedBookings.length, confirmedBookings.map(b => ({ id: b._id, quantity: b.quantity })));\n      \n      const totalAttendees = confirmedBookings.reduce((sum, booking) => {\n        return sum + booking.quantity;\n      }, 0);\n      \n      console.log('üî¢ Total attendees calculated:', totalAttendees);\n      \n      // Find the correct event document by searching all events\n      const allEvents = await EventModel.find({}).exec();\n      console.log('üîç Searching through', allEvents.length, 'events for ID:', eventId);\n      \n      // Try multiple ways to match the event ID\n      let matchingEvent = null;\n      \n      // Method 1: Direct numeric comparison\n      for (const event of allEvents) {\n        const numericId = parseInt(event._id.toString());\n        console.log('Comparing event._id:', event._id.toString(), 'parsed as:', numericId, 'with target:', eventId);\n        if (numericId === eventId) {\n          matchingEvent = event;\n          console.log('‚úÖ Found matching event by numeric ID');\n          break;\n        }\n      }\n      \n      // Method 2: Check if eventId matches string directly\n      if (!matchingEvent) {\n        matchingEvent = allEvents.find(event => event._id.toString() === eventId.toString());\n        if (matchingEvent) {\n          console.log('‚úÖ Found matching event by string ID');\n        }\n      }\n      \n      // Method 3: Check name or other fields if still not found\n      if (!matchingEvent && allEvents.length > 0) {\n        console.log('üîÑ Using first event as fallback for testing');\n        matchingEvent = allEvents.find(event => event.name === 'EventMaster') || allEvents[0];\n      }\n      \n      if (!matchingEvent) {\n        console.error('‚ùå Event not found for attendee count update:', eventId);\n        return;\n      }\n      \n      console.log('üéØ Using event:', matchingEvent.name, 'with ID:', matchingEvent._id);\n      \n      // Update using the MongoDB _id\n      const result = await EventModel.findByIdAndUpdate(\n        matchingEvent._id,\n        { \n          currentAttendees: totalAttendees,\n          updatedAt: new Date()\n        },\n        { new: true }\n      ).exec();\n      \n      if (result) {\n        console.log('‚úÖ Event attendee count updated successfully:', {\n          eventId: eventId,\n          mongoId: matchingEvent._id,\n          newAttendeeCount: totalAttendees,\n          eventName: result.name\n        });\n      } else {\n        console.error('‚ùå Failed to update event:', eventId);\n      }\n    } catch (error) {\n      console.error('üí• Error updating event attendee count:', error);\n    }\n  }\n\n  // Booking operations\n  async createBooking(bookingData: InsertBooking): Promise<Booking> {\n    try {\n      const id = new mongoose.Types.ObjectId().toString();\n      const booking = new BookingModel({\n        _id: id,\n        ...bookingData,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      });\n      \n      await booking.save();\n      \n      // Always update event attendee count when booking is created\n      console.log('About to update attendee count for eventId:', bookingData.eventId);\n      await this.updateEventAttendeeCount(parseInt(bookingData.eventId));\n      \n      // Also force an immediate attendee count update\n      console.log('üîÑ Forcing attendee count update after booking creation for event:', bookingData.eventId);\n      await this.updateEventAttendeeCount(parseInt(bookingData.eventId));\n      \n      return { ...booking.toObject(), id: booking._id };\n    } catch (error) {\n      console.error('Error creating booking:', error);\n      throw error;\n    }\n  }\n\n  async getBookings(userId?: string, eventId?: number): Promise<BookingWithEvent[]> {\n    try {\n      let query: any = {};\n      \n      if (userId) query.userId = userId;\n      if (eventId) query.eventId = eventId.toString();\n      \n      const bookings = await BookingModel.find(query).sort({ createdAt: -1 }).exec();\n      \n      // Get events for bookings\n      const bookingsWithEvents: BookingWithEvent[] = [];\n      for (const booking of bookings) {\n        const event = await EventModel.findById(booking.eventId).exec();\n        const user = await UserModel.findById(booking.userId).exec();\n        \n        bookingsWithEvents.push({\n          ...booking.toObject(),\n          id: booking._id,\n          event: event ? { ...event.toObject(), id: event._id } : undefined,\n          user: user ? { ...user.toObject(), id: user._id } : undefined\n        });\n      }\n      \n      return bookingsWithEvents;\n    } catch (error) {\n      console.error('Error getting bookings:', error);\n      return [];\n    }\n  }\n\n  async getBooking(id: string | number): Promise<BookingWithEvent | undefined> {\n    try {\n      // Handle both ObjectId strings and numeric IDs\n      const booking = await BookingModel.findById(id.toString()).exec();\n      if (!booking) return undefined;\n      \n      const event = await EventModel.findById(booking.eventId).exec();\n      const user = await UserModel.findById(booking.userId).exec();\n      \n      return {\n        ...booking.toObject(),\n        id: booking._id,\n        event: event ? { ...event.toObject(), id: event._id } : undefined,\n        user: user ? { ...user.toObject(), id: user._id } : undefined\n      };\n    } catch (error) {\n      console.error('Error getting booking:', error);\n      return undefined;\n    }\n  }\n\n  async getBookingByReference(reference: string): Promise<BookingWithEvent | undefined> {\n    try {\n      const booking = await BookingModel.findOne({ bookingReference: reference }).exec();\n      if (!booking) return undefined;\n      \n      const event = await EventModel.findById(booking.eventId).exec();\n      const user = await UserModel.findById(booking.userId).exec();\n      \n      return {\n        ...booking.toObject(),\n        id: booking._id,\n        event: event ? { ...event.toObject(), id: event._id } : undefined,\n        user: user ? { ...user.toObject(), id: user._id } : undefined\n      };\n    } catch (error) {\n      console.error('Error getting booking by reference:', error);\n      return undefined;\n    }\n  }\n\n  async updateBookingStatus(id: number, status: string, paymentIntentId?: string): Promise<Booking> {\n    try {\n      const updateData: any = { status, updatedAt: new Date() };\n      if (paymentIntentId) {\n        updateData.stripePaymentIntentId = paymentIntentId;\n      }\n      \n      const booking = await BookingModel.findByIdAndUpdate(\n        id.toString(),\n        updateData,\n        { new: true }\n      ).exec();\n      \n      if (!booking) throw new Error('Booking not found');\n      \n      // Update event attendee count\n      await this.updateEventAttendeeCount(parseInt(booking.eventId));\n      \n      return { ...booking.toObject(), id: booking._id };\n    } catch (error) {\n      console.error('Error updating booking status:', error);\n      throw error;\n    }\n  }\n\n  // Analytics\n  async getDashboardStats(): Promise<{\n    totalEvents: number;\n    totalAttendees: number;\n    totalRevenue: number;\n    conversionRate: number;\n  }> {\n    try {\n      const totalEvents = await EventModel.countDocuments({ status: { $ne: 'draft' } });\n      \n      const confirmedBookings = await BookingModel.find({ status: 'confirmed' }).exec();\n      const totalAttendees = confirmedBookings.reduce((sum, booking) => sum + booking.quantity, 0);\n      const totalRevenue = confirmedBookings.reduce((sum, booking) => sum + parseFloat(booking.totalAmount), 0);\n      \n      const totalBookings = await BookingModel.countDocuments();\n      const conversionRate = totalBookings > 0 ? (confirmedBookings.length / totalBookings) * 100 : 0;\n      \n      return {\n        totalEvents,\n        totalAttendees,\n        totalRevenue,\n        conversionRate: Math.round(conversionRate)\n      };\n    } catch (error) {\n      console.error('Error getting dashboard stats:', error);\n      return { totalEvents: 0, totalAttendees: 0, totalRevenue: 0, conversionRate: 0 };\n    }\n  }\n\n  async getRevenueAnalytics(): Promise<any> {\n    try {\n      const bookings = await BookingModel.find({ status: 'confirmed' }).exec();\n      // Implementation for revenue analytics\n      return { data: [] };\n    } catch (error) {\n      console.error('Error getting revenue analytics:', error);\n      return { data: [] };\n    }\n  }\n\n  async getAttendeeAnalytics(): Promise<any> {\n    try {\n      const bookings = await BookingModel.find({ status: 'confirmed' }).exec();\n      // Implementation for attendee analytics\n      return { data: [] };\n    } catch (error) {\n      console.error('Error getting attendee analytics:', error);\n      return { data: [] };\n    }\n  }\n\n  async getEventAnalytics(): Promise<any> {\n    try {\n      const events = await EventModel.find().exec();\n      // Implementation for event analytics\n      return { data: [] };\n    } catch (error) {\n      console.error('Error getting event analytics:', error);\n      return { data: [] };\n    }\n  }\n\n  // Notification operations\n  async createNotification(notificationData: InsertNotification): Promise<Notification> {\n    try {\n      const id = new mongoose.Types.ObjectId().toString();\n      const notification = new NotificationModel({\n        _id: id,\n        ...notificationData,\n        createdAt: new Date()\n      });\n      \n      await notification.save();\n      return { ...notification.toObject(), id: notification._id };\n    } catch (error) {\n      console.error('Error creating notification:', error);\n      throw error;\n    }\n  }\n\n  async getNotifications(userId: string): Promise<Notification[]> {\n    try {\n      const notifications = await NotificationModel.find({ userId })\n        .sort({ createdAt: -1 })\n        .exec();\n      return notifications.map(notification => ({ ...notification.toObject(), id: notification._id }));\n    } catch (error) {\n      console.error('Error getting notifications:', error);\n      return [];\n    }\n  }\n\n  async markNotificationAsRead(id: number, userId: string): Promise<Notification> {\n    try {\n      const notification = await NotificationModel.findOneAndUpdate(\n        { _id: id.toString(), userId },\n        { isRead: true },\n        { new: true }\n      ).exec();\n      \n      if (!notification) throw new Error('Notification not found');\n      return { ...notification.toObject(), id: notification._id };\n    } catch (error) {\n      console.error('Error marking notification as read:', error);\n      throw error;\n    }\n  }\n\n  async markAllNotificationsAsRead(userId: string): Promise<void> {\n    try {\n      await NotificationModel.updateMany(\n        { userId, isRead: false },\n        { isRead: true }\n      ).exec();\n    } catch (error) {\n      console.error('Error marking all notifications as read:', error);\n      throw error;\n    }\n  }\n\n  async deleteNotification(id: number, userId: string): Promise<void> {\n    try {\n      await NotificationModel.findOneAndDelete({\n        _id: id.toString(),\n        userId\n      }).exec();\n    } catch (error) {\n      console.error('Error deleting notification:', error);\n      throw error;\n    }\n  }\n\n  // Contact message operations\n  async createContactMessage(messageData: InsertContactMessage): Promise<ContactMessage> {\n    try {\n      const id = new mongoose.Types.ObjectId().toString();\n      const message = new ContactMessageModel({\n        _id: id,\n        ...messageData,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      });\n      \n      await message.save();\n      return { ...message.toObject(), id: message._id };\n    } catch (error) {\n      console.error('Error creating contact message:', error);\n      throw error;\n    }\n  }\n\n  async getContactMessages(): Promise<ContactMessage[]> {\n    try {\n      const messages = await ContactMessageModel.find()\n        .sort({ createdAt: -1 })\n        .exec();\n      return messages.map(message => ({ ...message.toObject(), id: message._id }));\n    } catch (error) {\n      console.error('Error getting contact messages:', error);\n      return [];\n    }\n  }\n\n  async updateContactMessageStatus(id: number, status: string): Promise<ContactMessage> {\n    try {\n      const message = await ContactMessageModel.findByIdAndUpdate(\n        id.toString(),\n        { status, updatedAt: new Date() },\n        { new: true }\n      ).exec();\n      \n      if (!message) throw new Error('Contact message not found');\n      return { ...message.toObject(), id: message._id };\n    } catch (error) {\n      console.error('Error updating contact message status:', error);\n      throw error;\n    }\n  }\n\n  // Sample data\n  async createSampleEvents(): Promise<void> {\n    try {\n      // Check if events already exist\n      const existingEvents = await EventModel.countDocuments();\n      if (existingEvents > 0) {\n        console.log('Sample events already exist, skipping creation');\n        return;\n      }\n\n      // Create admin user\n      const adminUserId = 'admin_sample_user';\n      await this.upsertUser({\n        id: adminUserId,\n        email: 'admin@eventmaster.com',\n        firstName: 'Event',\n        lastName: 'Administrator',\n        isAdmin: true,\n        authProvider: 'local'\n      });\n\n      const sampleEvents = [\n        {\n          name: \"AI & Machine Learning Conference 2025\",\n          description: \"Join leading experts in artificial intelligence and machine learning for cutting-edge insights and networking opportunities.\",\n          category: \"Technology\",\n          startDate: new Date('2025-09-15T09:00:00Z'),\n          endDate: new Date('2025-09-15T17:00:00Z'),\n          location: \"San Francisco Convention Center\",\n          ticketPrice: \"299.00\",\n          maxAttendees: 500,\n          status: \"active\" as const,\n          imageUrl: \"https://images.unsplash.com/photo-1485827404703-89b55fcc595e?w=800\",\n          organizerId: adminUserId,\n        },\n        {\n          name: \"Web Development Bootcamp\",\n          description: \"Intensive workshop covering React, Node.js, and modern full-stack development practices.\",\n          category: \"Technology\",\n          startDate: new Date('2025-08-20T10:00:00Z'),\n          endDate: new Date('2025-08-22T16:00:00Z'),\n          location: \"Tech Hub Downtown\",\n          ticketPrice: \"149.00\",\n          maxAttendees: 50,\n          status: \"active\" as const,\n          imageUrl: \"https://images.unsplash.com/photo-1461749280684-dccba630e2f6?w=800\",\n          organizerId: adminUserId,\n        },\n        {\n          name: \"Mobile App Development Summit\",\n          description: \"Learn the latest in iOS and Android development with hands-on workshops and expert speakers.\",\n          category: \"Technology\",\n          startDate: new Date('2025-10-05T09:00:00Z'),\n          endDate: new Date('2025-10-06T17:00:00Z'),\n          location: \"Innovation Center\",\n          ticketPrice: \"199.00\",\n          maxAttendees: 200,\n          status: \"upcoming\" as const,\n          imageUrl: \"https://images.unsplash.com/photo-1551650975-87deedd944c3?w=800\",\n          organizerId: adminUserId,\n        },\n      ];\n\n      for (const event of sampleEvents) {\n        await this.createEvent(event);\n      }\n      \n      console.log('‚úÖ Sample events created successfully');\n    } catch (error) {\n      console.error('Error creating sample events:', error);\n    }\n  }\n}","size_bytes":26442},"server/mongodb.ts":{"content":"import mongoose from 'mongoose';\n\n// MongoDB connection setup\nconst MONGODB_URI = process.env.MONGODB_URI;\n\nif (!MONGODB_URI) {\n  console.error('MongoDB URI not found. Please set MONGODB_URI environment variable.');\n  process.exit(1);\n}\n\nlet isConnected = false;\n\nexport async function connectToDatabase() {\n  if (isConnected) {\n    return;\n  }\n\n  try {\n    await mongoose.connect(MONGODB_URI!);\n    isConnected = true;\n    console.log('‚úÖ Connected to MongoDB successfully');\n  } catch (error) {\n    console.error('‚ùå MongoDB connection error:', error);\n    process.exit(1);\n  }\n}\n\n// Handle connection events\nmongoose.connection.on('connected', () => {\n  console.log('MongoDB connected');\n});\n\nmongoose.connection.on('error', (error) => {\n  console.error('MongoDB connection error:', error);\n});\n\nmongoose.connection.on('disconnected', () => {\n  console.log('MongoDB disconnected');\n  isConnected = false;\n});\n\n// Graceful shutdown\nprocess.on('SIGINT', async () => {\n  await mongoose.connection.close();\n  console.log('MongoDB connection closed due to app termination');\n  process.exit(0);\n});","size_bytes":1097},"build.sh":{"content":"#!/bin/bash\n\n# Install dependencies\nnpm install\n\n# Build the application\nnpm run build\n\necho \"Build completed successfully!\"","size_bytes":124},"fix_attendees.js":{"content":"// Quick script to check and fix attendee counts manually\nconst { MongoClient } = require('mongodb');\n\nasync function fixAttendeeCount() {\n  const client = new MongoClient(process.env.MONGODB_URI);\n  \n  try {\n    await client.connect();\n    console.log('Connected to MongoDB');\n    \n    const db = client.db();\n    const events = await db.collection('events').find({}).toArray();\n    const bookings = await db.collection('bookings').find({ status: 'confirmed' }).toArray();\n    \n    console.log('Found events:', events.length);\n    console.log('Found confirmed bookings:', bookings.length);\n    \n    for (const event of events) {\n      const eventBookings = bookings.filter(b => b.eventId === event._id.toString());\n      const totalAttendees = eventBookings.reduce((sum, b) => sum + b.quantity, 0);\n      \n      console.log(`Event ${event._id}: ${eventBookings.length} bookings, ${totalAttendees} attendees`);\n      \n      await db.collection('events').updateOne(\n        { _id: event._id },\n        { $set: { currentAttendees: totalAttendees } }\n      );\n    }\n    \n    console.log('Attendee counts updated');\n    \n  } finally {\n    await client.close();\n  }\n}\n\nfixAttendeeCount().catch(console.error);","size_bytes":1204},"render.yaml":{"content":"services:\n  - type: web\n    name: eventmaster\n    env: node\n    buildCommand: npm install && npm run build\n    startCommand: npm start\n    plan: free\n    envVars:\n      - key: NODE_ENV\n        value: production\n      - key: MONGODB_URI\n        sync: false\n      - key: EMAIL_USER\n        sync: false\n      - key: EMAIL_PASSWORD\n        sync: false\n      - key: SESSION_SECRET\n        generateValue: true","size_bytes":403},"server/auth-simple.ts":{"content":"import bcrypt from 'bcryptjs';\nimport { Request, Response, NextFunction } from 'express';\n\nexport interface AuthUser {\n  id: string;\n  email: string;\n  name: string;\n  isAdmin: boolean;\n}\n\n// Demo users for quick testing\nconst DEMO_USERS: Array<{\n  id: string;\n  email: string;\n  password: string; // In real app, this would be hashed\n  name: string;\n  isAdmin: boolean;\n}> = [\n  {\n    id: 'admin-1',\n    email: 'admin@eventmaster.com',\n    password: 'admin123',\n    name: 'Admin User',\n    isAdmin: true,\n  },\n  {\n    id: 'user-1',  \n    email: 'user@eventmaster.com',\n    password: 'user123',\n    name: 'Demo User',\n    isAdmin: false,\n  },\n];\n\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: AuthUser;\n    }\n  }\n}\n\nexport async function hashPassword(password: string): Promise<string> {\n  return bcrypt.hash(password, 10);\n}\n\nexport async function comparePassword(password: string, hash: string): Promise<boolean> {\n  return bcrypt.compare(password, hash);\n}\n\nexport async function authenticateUser(email: string, password: string): Promise<AuthUser | null> {\n  // Check demo users first for quick testing\n  const demoUser = DEMO_USERS.find(user => user.email === email);\n  if (demoUser && demoUser.password === password) {\n    return {\n      id: demoUser.id,\n      email: demoUser.email,\n      name: demoUser.name,\n      isAdmin: demoUser.isAdmin,\n    };\n  }\n\n  try {\n    // Import storage to check database users\n    const { storage } = await import('./storage');\n    const user = await storage.getUserByEmail(email);\n    \n    if (user && user.password) {\n      const isValidPassword = await comparePassword(password, user.password);\n      if (isValidPassword) {\n        return {\n          id: user.id,\n          email: user.email,\n          name: `${user.firstName || ''} ${user.lastName || ''}`.trim() || user.username || 'User',\n          isAdmin: user.isAdmin || false,\n        };\n      }\n    }\n  } catch (error) {\n    console.error('Database authentication error:', error);\n  }\n\n  return null;\n}\n\nexport async function createUser(email: string, password: string, name: string): Promise<AuthUser> {\n  try {\n    // Hash the password\n    const hashedPassword = await hashPassword(password);\n    \n    // Save to database\n    const { storage } = await import('./storage');\n    const nameParts = name.split(' ');\n    const firstName = nameParts[0] || name;\n    const lastName = nameParts.slice(1).join(' ') || null;\n    \n    const userData = {\n      email,\n      password: hashedPassword,\n      firstName,\n      lastName,\n      username: email.split('@')[0], // Use email prefix as username\n      isAdmin: false,\n    };\n    \n    const newUser = await storage.createUser(userData);\n    \n    return {\n      id: newUser.id,\n      email: newUser.email,\n      name: `${newUser.firstName || ''} ${newUser.lastName || ''}`.trim() || newUser.username || 'User',\n      isAdmin: newUser.isAdmin || false,\n    };\n  } catch (error) {\n    console.error('Error creating user:', error);\n    throw new Error('Failed to create user account');\n  }\n}\n\nexport function requireAuth(req: Request, res: Response, next: NextFunction) {\n  const user = (req.session as any)?.user as AuthUser;\n  \n  if (!user) {\n    return res.status(401).json({ message: 'Unauthorized' });\n  }\n  \n  req.user = user;\n  next();\n}\n\nexport function requireAdmin(req: Request, res: Response, next: NextFunction) {\n  requireAuth(req, res, () => {\n    if (!req.user?.isAdmin) {\n      return res.status(403).json({ message: 'Admin access required' });\n    }\n    next();\n  });\n}\n\ndeclare module 'express-session' {\n  interface SessionData {\n    user?: AuthUser;\n  }\n}","size_bytes":3647},"client/src/hooks/use-auth-simple.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\n\nexport interface SimpleUser {\n  id: string;\n  email: string;\n  name: string;\n  isAdmin: boolean;\n}\n\nexport function useAuth() {\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/user\"],\n    retry: false,\n    refetchOnWindowFocus: false,\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/auth/logout\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.clear();\n      setLocation(\"/login\");\n    },\n  });\n\n  const logout = () => {\n    logoutMutation.mutate();\n  };\n\n  return {\n    user: user as SimpleUser | undefined,\n    isLoading,\n    isAuthenticated: !!user,\n    logout,\n    isLoggingOut: logoutMutation.isPending,\n  };\n}","size_bytes":997},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Calendar, User, Lock, Mail } from \"lucide-react\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nconst registerSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\ntype RegisterForm = z.infer<typeof registerSchema>;\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const [isRegister, setIsRegister] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const loginForm = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const registerForm = useForm<RegisterForm>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      name: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginForm) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Login Successful\",\n        description: \"Welcome back to EventMaster!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n      setLocation(\"/\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login Failed\",\n        description: error.message.includes(\"401\") ? \"Invalid email or password\" : \"An error occurred. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: RegisterForm) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/register\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Registration Successful\",\n        description: \"Welcome to EventMaster!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n      setLocation(\"/\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration Failed\",\n        description: error.message.includes(\"409\") ? \"An account with this email already exists\" : \"An error occurred. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onLoginSubmit = (data: LoginForm) => {\n    loginMutation.mutate(data);\n  };\n\n  const onRegisterSubmit = (data: RegisterForm) => {\n    registerMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-center space-x-3 mb-4\">\n            <div className=\"w-10 h-10 bg-primary-500 rounded-lg flex items-center justify-center\">\n              <Calendar className=\"text-white h-6 w-6\" />\n            </div>\n            <h1 className=\"text-2xl font-bold text-slate-800\">EventMaster</h1>\n          </div>\n          <p className=\"text-slate-600\">\n            {isRegister ? \"Create your account to start booking events\" : \"Sign in to your account\"}\n          </p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-center\">\n              {isRegister ? \"Create Account\" : \"Sign In\"}\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {!isRegister ? (\n              <Form {...loginForm}>\n                <form onSubmit={loginForm.handleSubmit(onLoginSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={loginForm.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email</FormLabel>\n                        <FormControl>\n                          <div className=\"relative\">\n                            <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-slate-400\" />\n                            <Input placeholder=\"your@email.com\" className=\"pl-10\" {...field} />\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={loginForm.control}\n                    name=\"password\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Password</FormLabel>\n                        <FormControl>\n                          <div className=\"relative\">\n                            <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-slate-400\" />\n                            <Input type=\"password\" placeholder=\"‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢\" className=\"pl-10\" {...field} />\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full bg-primary-500 hover:bg-primary-600\"\n                    disabled={loginMutation.isPending}\n                  >\n                    {loginMutation.isPending ? (\n                      <>\n                        <div className=\"animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full mr-2\" />\n                        Signing In...\n                      </>\n                    ) : (\n                      \"Sign In\"\n                    )}\n                  </Button>\n                </form>\n              </Form>\n            ) : (\n              <Form {...registerForm}>\n                <form onSubmit={registerForm.handleSubmit(onRegisterSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={registerForm.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Full Name</FormLabel>\n                        <FormControl>\n                          <div className=\"relative\">\n                            <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-slate-400\" />\n                            <Input placeholder=\"John Doe\" className=\"pl-10\" {...field} />\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={registerForm.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email</FormLabel>\n                        <FormControl>\n                          <div className=\"relative\">\n                            <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-slate-400\" />\n                            <Input placeholder=\"your@email.com\" className=\"pl-10\" {...field} />\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={registerForm.control}\n                    name=\"password\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Password</FormLabel>\n                        <FormControl>\n                          <div className=\"relative\">\n                            <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-slate-400\" />\n                            <Input type=\"password\" placeholder=\"‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢\" className=\"pl-10\" {...field} />\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full bg-primary-500 hover:bg-primary-600\"\n                    disabled={registerMutation.isPending}\n                  >\n                    {registerMutation.isPending ? (\n                      <>\n                        <div className=\"animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full mr-2\" />\n                        Creating Account...\n                      </>\n                    ) : (\n                      \"Create Account\"\n                    )}\n                  </Button>\n                </form>\n              </Form>\n            )}\n\n            <div className=\"space-y-4\">\n              <Separator />\n              \n              <div className=\"text-center\">\n                <p className=\"text-sm text-slate-600\">\n                  {isRegister ? \"Already have an account?\" : \"Don't have an account?\"}\n                </p>\n                <Button\n                  variant=\"link\"\n                  onClick={() => setIsRegister(!isRegister)}\n                  className=\"p-0 h-auto text-primary-600 hover:text-primary-700\"\n                >\n                  {isRegister ? \"Sign in here\" : \"Create one here\"}\n                </Button>\n              </div>\n            </div>\n\n            {/* Demo Credentials */}\n            <div className=\"bg-slate-50 p-4 rounded-lg\">\n              <h4 className=\"text-sm font-medium text-slate-800 mb-2\">Demo Credentials:</h4>\n              <div className=\"space-y-1 text-xs text-slate-600\">\n                <p><strong>Admin:</strong> admin@eventmaster.com / admin123</p>\n                <p><strong>User:</strong> user@eventmaster.com / user123</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":10973}}}